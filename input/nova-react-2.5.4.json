{
    "status": 200,
    "body": "{\"library\":{\"version\":\"2.5.4\",\"name\":\"@visa/nova-react\"},\"components\":[{\"name\":\"accordion\",\"version\":\"0.0.1\",\"description\":\"Sets of vertical headers that reveal or hide the accordion panel.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Individual accordions\",\"description\":\"\",\"order\":1},{\"name\":\"Multi-select accordion groups\",\"description\":\"\",\"order\":2},{\"name\":\"Single-select accordion groups\",\"description\":\"\",\"order\":3},{\"name\":\"Custom accordion groups\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Individual accordions\",\"url\":\"components/accordion/collapsed-accordion\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Accordion, AccordionHeading, AccordionPanel, AccordionToggleIcon, Typography } from '@visa/nova-react';\\n\\nexport const CollapsedAccordion = () => {\\n  return (\\n    <Accordion>\\n      <AccordionHeading buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\">\\n        <AccordionToggleIcon />\\n        Accordion title\\n      </AccordionHeading>\\n      <AccordionPanel>\\n        <Typography>This is required text that describes the accordion section in more detail.</Typography>\\n      </AccordionPanel>\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Default accordion\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Individual accordions\",\"url\":\"components/accordion/collapsed-disabled-accordion\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Accordion, AccordionHeading, AccordionPanel, AccordionToggleIcon, Typography } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'collapsed-disabled-accordion';\\n\\nexport const CollapsedDisabledAccordion = () => {\\n  const expanded = false;\\n\\n  return (\\n    <Accordion id={id} tag=\\\"div\\\">\\n      <AccordionHeading\\n        aria-controls={`${id}-accordion-panel`}\\n        aria-expanded={expanded}\\n        disabled\\n        buttonSize=\\\"large\\\"\\n        colorScheme=\\\"secondary\\\"\\n        id={`${id}-accordion-header`}\\n        tag=\\\"button\\\"\\n      >\\n        <AccordionToggleIcon accordionOpen={expanded} />\\n        Accordion title\\n      </AccordionHeading>\\n      <AccordionPanel aria-hidden={!expanded} id={`${id}-accordion-panel`}>\\n        <Typography>This is required text that describes the accordion section in more detail.</Typography>\\n      </AccordionPanel>\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Disabled accordion\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Individual accordions\",\"url\":\"components/accordion/with-icon-accordion\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaCloudLow } from '@visa/nova-icons-react';\\nimport { Accordion, AccordionHeading, AccordionPanel, AccordionToggleIcon, Typography } from '@visa/nova-react';\\n\\nexport const WithIconAccordion = () => {\\n  return (\\n    <Accordion>\\n      <AccordionHeading buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\">\\n        <AccordionToggleIcon />\\n        <VisaCloudLow />\\n        Accordion title\\n      </AccordionHeading>\\n      <AccordionPanel>\\n        <Typography>This is required text that describes the accordion section in more detail.</Typography>\\n      </AccordionPanel>\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Accordion with icon\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Individual accordions\",\"url\":\"components/accordion/with-badge-accordion\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaSuccessTiny } from '@visa/nova-icons-react';\\nimport {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Badge,\\n  Typography,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\n\\nexport const WithBadgeAccordion = () => {\\n  return (\\n    <Accordion>\\n      <UtilityFragment vAlignItems=\\\"center\\\">\\n        <AccordionHeading buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\">\\n          {/* TODO: Remove this style tag after nova-styles fix */}\\n          <AccordionToggleIcon style={{ alignSelf: 'center' }} />\\n          Accordion title\\n          <UtilityFragment vMarginLeft=\\\"auto\\\">\\n            <Badge badgeType=\\\"stable\\\">\\n              <VisaSuccessTiny />\\n              Label\\n            </Badge>\\n          </UtilityFragment>\\n        </AccordionHeading>\\n      </UtilityFragment>\\n      <AccordionPanel>\\n        <Typography>This is required text that describes the accordion section in more detail.</Typography>\\n      </AccordionPanel>\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Accordion with badge\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Individual accordions\",\"url\":\"components/accordion/subtle-accordion\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\nimport {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\n\\nexport const SubtleAccordion = () => {\\n  return (\\n    <Accordion>\\n      <UtilityFragment vGap={2}>\\n        <AccordionHeading\\n          className=\\\"v-typography-body-2-medium\\\"\\n          colorScheme=\\\"tertiary\\\"\\n          style={\\n            {\\n              '--v-accordion-foreground-initial': 'var(--palette-default-active)',\\n              '--v-button-default-background': 'transparent',\\n            } as CSSProperties\\n          }\\n        >\\n          <AccordionToggleIcon />\\n          Accordion title\\n        </AccordionHeading>\\n      </UtilityFragment>\\n      <UtilityFragment vPaddingHorizontal={32}>\\n        <AccordionPanel\\n          style={\\n            {\\n              '--v-accordion-panel-background-color': 'transparent',\\n              '--v-accordion-panel-border-size': '0px',\\n            } as CSSProperties\\n          }\\n        >\\n          <Typography>This is required text that describes the accordion section in more detail.</Typography>\\n        </AccordionPanel>\\n      </UtilityFragment>\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Subtle accordion\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Individual accordions\",\"url\":\"components/accordion/disabled-subtle-accordion\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\nimport {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-subtle-accordion';\\n\\nexport const DisabledSubtleAccordion = () => {\\n  const expanded = false;\\n\\n  return (\\n    <Accordion tag=\\\"div\\\">\\n      <UtilityFragment vGap={2}>\\n        <AccordionHeading\\n          aria-controls={`${id}-accordion-panel`}\\n          aria-expanded={expanded}\\n          buttonSize=\\\"large\\\"\\n          disabled\\n          colorScheme=\\\"tertiary\\\"\\n          id={`${id}-accordion-header`}\\n          tag=\\\"button\\\"\\n        >\\n          <AccordionToggleIcon accordionOpen={expanded} />\\n          <Typography variant=\\\"body-2-medium\\\">Accordion title</Typography>\\n        </AccordionHeading>\\n      </UtilityFragment>\\n      <UtilityFragment vPaddingHorizontal={32}>\\n        <AccordionPanel\\n          aria-hidden={!expanded}\\n          id={`${id}-accordion-panel`}\\n          style={\\n            {\\n              '--v-accordion-panel-background-color': 'transparent',\\n              '--v-accordion-panel-border-size': '0px',\\n            } as CSSProperties\\n          }\\n        >\\n          <Typography>This is required text that describes the accordion section in more detail.</Typography>\\n        </AccordionPanel>\\n      </UtilityFragment>\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Disabled subtle accordion\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Individual accordions\",\"url\":\"components/accordion/subtle-accordion-with-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\nimport {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { VisaCloudLow } from '@visa/nova-icons-react';\\n\\nexport const SubtleAccordionWithIcon = () => {\\n  return (\\n    <Accordion>\\n      <UtilityFragment vGap={2}>\\n        <AccordionHeading\\n          className=\\\"v-typography-body-2-medium\\\"\\n          colorScheme=\\\"tertiary\\\"\\n          style={\\n            {\\n              '--v-accordion-foreground-initial': 'var(--palette-default-active)',\\n              '--v-button-default-background': 'transparent',\\n            } as CSSProperties\\n          }\\n        >\\n          <AccordionToggleIcon />\\n          <VisaCloudLow />\\n          Accordion title\\n        </AccordionHeading>\\n      </UtilityFragment>\\n      <UtilityFragment vPaddingHorizontal={32}>\\n        <AccordionPanel\\n          style={\\n            {\\n              '--v-accordion-panel-background-color': 'transparent',\\n              '--v-accordion-panel-border-size': '0px',\\n            } as CSSProperties\\n          }\\n        >\\n          <Typography>This is required text that describes the accordion section in more detail.</Typography>\\n        </AccordionPanel>\\n      </UtilityFragment>\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Subtle accordion with icon\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select accordion groups\",\"url\":\"components/accordion/default-multi-select-accordion-group\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-multi-select-accordion-group-example';\\n\\nexport const DefaultMultiSelectAccordionGroup = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => (\\n        <Accordion key={`${id}-${index}`}>\\n          <AccordionHeading buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\">\\n            <AccordionToggleIcon />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel>\\n            <Typography>{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Accordion>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default multi-select accordion group\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select accordion groups\",\"url\":\"components/accordion/multi-select-accordion-group-with-expanded\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'multi-select-accordion-group-with-expanded';\\n\\nexport const MultiSelectAccordionGroupWithExpanded = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => (\\n        <Accordion key={`${id}-${index}`} open={index === 0}>\\n          <AccordionHeading buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\">\\n            <AccordionToggleIcon />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel>\\n            <Typography>{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Accordion>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Multi-select accordion group with accordion expanded by default\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select accordion groups\",\"url\":\"components/accordion/multi-select-accordion-group-with-disabled\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'multi-select-accordion-group-with-disabled';\\n\\nconst accordions = [\\n  {\\n    id: `${id}-panel-1`,\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n    disabled: true,\\n  },\\n  {\\n    id: `${id}-panel-2`,\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    id: `${id}-panel-3`,\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\nexport const MultiSelectAccordionGroupWithDisabled = () => {\\n  const [expandedPanels, setExpandedPanels] = useState<{\\n    [key: string]: boolean;\\n  }>({\\n    panel1: false,\\n    panel2: false,\\n    panel3: false,\\n  });\\n\\n  const handleToggle = (panel: string) => {\\n    setExpandedPanels(prevState => ({\\n      ...prevState,\\n      [panel]: !prevState[panel],\\n    }));\\n  };\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => {\\n        const panelKey = `panel${index + 1}`;\\n\\n        return (\\n          <Accordion id={accordion.id} tag=\\\"div\\\" key={accordion.id}>\\n            <AccordionHeading\\n              aria-controls={`${accordion.id}-accordion-panel`}\\n              aria-expanded={expandedPanels[panelKey]}\\n              disabled={accordion.disabled}\\n              buttonSize=\\\"large\\\"\\n              colorScheme=\\\"secondary\\\"\\n              id={`${accordion.id}-accordion-header`}\\n              onClick={() => handleToggle(panelKey)}\\n              tag=\\\"button\\\"\\n            >\\n              <AccordionToggleIcon accordionOpen={expandedPanels[panelKey]} />\\n              {accordion.header}\\n            </AccordionHeading>\\n            <AccordionPanel aria-hidden={!expandedPanels[panelKey]} id={`${accordion.id}-accordion-panel`}>\\n              <Typography>{accordion.content}</Typography>\\n            </AccordionPanel>\\n          </Accordion>\\n        );\\n      })}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Multi-select accordion group with disabled accordion\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select accordion groups\",\"url\":\"components/accordion/subtle-multi-select-accordion-group\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'subtle-multi-select-accordion-group';\\n\\nexport const SubtleMultiSelectAccordionGroup = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => (\\n        <Accordion key={`${id}-${index}`}>\\n          <UtilityFragment vGap={2}>\\n            <AccordionHeading\\n              className=\\\"v-typography-body-2-medium\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              style={\\n                {\\n                  '--v-accordion-foreground-initial': 'var(--palette-default-active)',\\n                  '--v-button-default-background': 'transparent',\\n                } as CSSProperties\\n              }\\n            >\\n              <AccordionToggleIcon />\\n              {accordion.header}\\n            </AccordionHeading>\\n          </UtilityFragment>\\n          <UtilityFragment vPaddingHorizontal={32}>\\n            <AccordionPanel\\n              style={\\n                {\\n                  '--v-accordion-panel-background-color': 'transparent',\\n                  '--v-accordion-panel-border-size': '0px',\\n                } as CSSProperties\\n              }\\n            >\\n              <Typography>{accordion.content}</Typography>\\n            </AccordionPanel>\\n          </UtilityFragment>\\n        </Accordion>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Subtle multi-select accordion group\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select accordion groups\",\"url\":\"components/accordion/default-single-select-accordion-group\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-single-select-accordion-group';\\n\\nexport const DefaultSingleSelectAccordionGroup = () => {\\n  const [openIndex, setOpenIndex] = useState(-1);\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => (\\n        <Accordion key={`${id}-${index}`} open={openIndex === index}>\\n          <AccordionHeading\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"secondary\\\"\\n            onClick={event => {\\n              event.preventDefault();\\n              // If open, close accordion, else open accordion\\n              setOpenIndex(openIndex === index ? -1 : index);\\n            }}\\n          >\\n            <AccordionToggleIcon />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel>\\n            <Typography tag=\\\"span\\\">{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Accordion>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default single-select accordion group\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select accordion groups\",\"url\":\"components/accordion/single-select-accordion-group-with-expanded\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'single-select-accordion-group-with-expanded';\\n\\nexport const SingleSelectAccordionGroupWithExpanded = () => {\\n  const [openIndex, setOpenIndex] = useState(0);\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => (\\n        <Accordion key={`${id}-${index}`} open={openIndex === index}>\\n          <AccordionHeading\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"secondary\\\"\\n            onClick={event => {\\n              event.preventDefault();\\n              // If open, close accordion, else open accordion\\n              setOpenIndex(openIndex === index ? -1 : index);\\n            }}\\n          >\\n            <AccordionToggleIcon />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel>\\n            <Typography tag=\\\"span\\\">{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Accordion>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Single-select accordion group with accordion expanded by default\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select accordion groups\",\"url\":\"components/accordion/subtle-single-select-accordion-group\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState } from 'react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'subtle-single-select-accordion-group';\\n\\nexport const SubtleSingleSelectAccordionGroup = () => {\\n  const [openIndex, setOpenIndex] = useState(-1);\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => (\\n        <Accordion key={`${id}-${index}`} open={index === openIndex}>\\n          <UtilityFragment vGap={2}>\\n            <AccordionHeading\\n              className=\\\"v-typography-body-2-medium\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={event => {\\n                event.preventDefault();\\n                // If open, close accordion, else open accordion\\n                setOpenIndex(openIndex === index ? -1 : index);\\n              }}\\n              style={\\n                {\\n                  '--v-accordion-foreground-initial': 'var(--palette-default-active)',\\n                  '--v-button-default-background': 'transparent',\\n                } as CSSProperties\\n              }\\n            >\\n              <AccordionToggleIcon />\\n              {accordion.header}\\n            </AccordionHeading>\\n          </UtilityFragment>\\n          <UtilityFragment vPaddingHorizontal={32}>\\n            <AccordionPanel\\n              style={\\n                {\\n                  '--v-accordion-panel-background-color': 'transparent',\\n                  '--v-accordion-panel-border-size': '0px',\\n                } as CSSProperties\\n              }\\n            >\\n              <Typography>{accordion.content}</Typography>\\n            </AccordionPanel>\\n          </UtilityFragment>\\n        </Accordion>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Subtle single-select accordion group\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom accordion groups\",\"url\":\"components/accordion/native-single-select-accordion-group\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'native-single-select-accordion-group';\\n\\nexport const NativeSingleSelectAccordionGroup = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={6}>\\n      {accordions.map((accordion, index) => (\\n        <Accordion key={`${id}-${index}`} name={id}>\\n          <AccordionHeading buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\">\\n            <AccordionToggleIcon />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel>\\n            <Typography tag=\\\"span\\\">{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Accordion>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Native single-select accordion group\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom accordion groups\",\"url\":\"components/accordion/default-with-item-open-accordion\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { Fragment } from 'react';\\nimport {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  useAccordion,\\n} from '@visa/nova-react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\nexport const DefaultWithItemOpenAccordion = () => {\\n  const { isIndexExpanded, toggleIndexExpanded } = useAccordion({ defaultExpanded: 0 });\\n\\n  return (\\n    <Accordion id=\\\"accordion-default-open-group\\\" tag=\\\"div\\\">\\n      {accordions.map((accordion, index) => (\\n        <Fragment key={`accordion-default-open-group-${index}`}>\\n          <AccordionHeading\\n            aria-controls={`accordion-default-open-panel-${index}`}\\n            aria-expanded={isIndexExpanded(index)}\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"secondary\\\"\\n            id={`accordion-default-open-header-${index}`}\\n            onClick={() => toggleIndexExpanded(index)}\\n            tag=\\\"button\\\"\\n          >\\n            <AccordionToggleIcon accordionOpen={isIndexExpanded(index)} />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel aria-hidden={!isIndexExpanded(index)} id={`accordion-default-open-panel-${index}`}>\\n            <Typography>{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Fragment>\\n      ))}\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Custom single-select accordion group with accordion expanded by default\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom accordion groups\",\"url\":\"components/accordion/disclosure-group-accordion\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { Fragment } from 'react';\\nimport {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  useAccordion,\\n} from '@visa/nova-react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\nexport const DisclosureGroupAccordion = () => {\\n  const { isIndexExpanded, toggleIndexExpanded } = useAccordion({ defaultExpanded: [0, 1] });\\n\\n  return (\\n    <Accordion id=\\\"accordion-disclosure-group\\\" tag=\\\"div\\\">\\n      {accordions.map((accordion, index) => (\\n        <Fragment key={`accordion-disclosure-group-${index}`}>\\n          <AccordionHeading\\n            aria-controls={`accordion-disclosure-group-panel-${index}`}\\n            aria-expanded={isIndexExpanded(index)}\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"secondary\\\"\\n            id={`accordion-disclosure-group-header-${index}`}\\n            onClick={() => toggleIndexExpanded(index)}\\n            tag=\\\"button\\\"\\n          >\\n            <AccordionToggleIcon accordionOpen={isIndexExpanded(index)} />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel aria-hidden={!isIndexExpanded(index)} id={`accordion-disclosure-group-panel-${index}`}>\\n            <Typography>{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Fragment>\\n      ))}\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Custom multi-select accordion group with accordion expanded by default\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom accordion groups\",\"url\":\"components/accordion/key-nav-group-accordion\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  useAccordion,\\n} from '@visa/nova-react';\\nimport { Fragment } from 'react';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 1',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 2',\\n  },\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Accordion title 3',\\n  },\\n];\\n\\nexport const KeyNavGroupAccordion = () => {\\n  const { isIndexExpanded, onKeyNavigation, ref: accordionRef, toggleIndexExpanded } = useAccordion();\\n\\n  return (\\n    <Accordion id=\\\"accordion-key-nav-group\\\" onKeyDown={onKeyNavigation} tag=\\\"div\\\">\\n      {accordions.map((accordion, i) => (\\n        <Fragment key={i}>\\n          <AccordionHeading\\n            aria-controls={`accordion-key-nav-group-panel-${i}`}\\n            aria-expanded={isIndexExpanded(i)}\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"secondary\\\"\\n            id={`accordion-key-nav-group-header-${i}`}\\n            onClick={() => toggleIndexExpanded(i)}\\n            ref={el => {\\n              accordionRef.current[i] = el;\\n            }}\\n            tag=\\\"button\\\"\\n          >\\n            <AccordionToggleIcon accordionOpen={isIndexExpanded(i)} />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel aria-hidden={!isIndexExpanded(i)} id={`accordion-key-nav-group-panel-${i}`}>\\n            <Typography>{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Fragment>\\n      ))}\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"Accordion group with arrow key navigation\"}],\"propertySections\":[{\"order\":1,\"name\":\"Accordion\",\"selector\":\"<Accordion />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Sets of vertical headers that reveal or hide the accordion panel.\"},{\"order\":2,\"name\":\"AccordionHeading\",\"selector\":\"<AccordionHeading />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Default summary element, styled as a button that is used to expand and collapse content.\"},{\"order\":3,\"name\":\"AccordionPanel\",\"selector\":\"<AccordionPanel />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component containing the content of the accordion.\"},{\"order\":4,\"name\":\"AccordionToggleIcon\",\"selector\":\"<AccordionToggleIcon />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component containing the icon and logic for the accordion toggle icon.\"},{\"order\":5,\"name\":\"useAccordion\",\"selector\":null,\"libraryId\":null,\"componentId\":null,\"type\":\"hooks\",\"description\":\"This hook is used to manage the open state and keyboard navigation of accordions.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Accordion\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Accordion\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"details\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"alternate\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"iconButton\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"AccordionHeading\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"summary\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"ref\",\"section\":\"AccordionPanel\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"AccordionPanel\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"accordionOpen\",\"section\":\"AccordionToggleIcon\",\"data\":{\"name\":\"accordionOpen\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"manually assign the open state of the accordion\"}},{\"name\":\"elementClosed\",\"section\":\"AccordionToggleIcon\",\"data\":{\"name\":\"elementClosed\",\"type\":\"ReactElement\",\"default\":\"<VisaChevronRightTiny rtl />\",\"required\":\"false\",\"description\":\"The icon in closed state\"}},{\"name\":\"elementOpen\",\"section\":\"AccordionToggleIcon\",\"data\":{\"name\":\"elementOpen\",\"type\":\"ReactElement\",\"default\":\"<VisaChevronDownTiny />\",\"required\":\"false\",\"description\":\"The icon in the open state\"}},{\"name\":\"ref\",\"section\":\"AccordionToggleIcon\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"anchor-link-menu\",\"version\":\"0.0.1\",\"description\":\"Menu of links that navigate to sections within the current page.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default anchor link menus\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default anchor link menus\",\"url\":\"components/anchor-link-menu/default-anchor-link-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { AnchorLinkMenu, AnchorLinkMenuHeader, Link, Typography } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-anchor-link-menu';\\n\\nexport const DefaultAnchorLinkMenu = () => {\\n  return (\\n    <AnchorLinkMenu aria-labelledby={`${id}-header`}>\\n      <section>\\n        <AnchorLinkMenuHeader>\\n          <Typography id={`${id}-header`} tag=\\\"h2\\\" variant=\\\"overline\\\">\\n            Section title\\n          </Typography>\\n        </AnchorLinkMenuHeader>\\n        <ul>\\n          <li>\\n            <Link aria-current=\\\"true\\\" href=\\\"./anchor-link-menu\\\">\\n              L1 label 1\\n            </Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 2</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 3</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 4</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 5</Link>\\n          </li>\\n        </ul>\\n      </section>\\n    </AnchorLinkMenu>\\n  );\\n};\\n\"},\"name\":\"Default anchor link menu\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default anchor link menus\",\"url\":\"components/anchor-link-menu/no-title-anchor-link-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { AnchorLinkMenu, Link } from '@visa/nova-react';\\n\\nexport const NoTitleAnchorLinkMenu = () => {\\n  return (\\n    <AnchorLinkMenu aria-label=\\\"Section title\\\">\\n      <section>\\n        <ul>\\n          <li>\\n            <Link aria-current=\\\"true\\\" href=\\\"./anchor-link-menu\\\">\\n              L1 label 1\\n            </Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 2</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 3</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 4</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 5</Link>\\n          </li>\\n        </ul>\\n      </section>\\n    </AnchorLinkMenu>\\n  );\\n};\\n\"},\"name\":\"Anchor link menu without section title\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default anchor link menus\",\"url\":\"components/anchor-link-menu/nested-anchor-link-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { AnchorLinkMenu, AnchorLinkMenuHeader, Link, Typography } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nested-anchor-link-menu';\\n\\nexport const NestedAnchorLinkMenu = () => {\\n  return (\\n    <AnchorLinkMenu aria-labelledby={`${id}-header`}>\\n      <section>\\n        <AnchorLinkMenuHeader>\\n          <Typography id={`${id}-header`} tag=\\\"h2\\\" variant=\\\"overline\\\">\\n            Section title\\n          </Typography>\\n        </AnchorLinkMenuHeader>\\n        <ul>\\n          <li>\\n            <Link aria-current=\\\"true\\\" href=\\\"./anchor-link-menu\\\">\\n              L1 label 1\\n            </Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 2</Link>\\n            <ul>\\n              <li>\\n                <Link href=\\\"./anchor-link-menu\\\">L2 label 1</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./anchor-link-menu\\\">L2 label 2</Link>\\n              </li>\\n            </ul>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 3</Link>\\n          </li>\\n        </ul>\\n      </section>\\n    </AnchorLinkMenu>\\n  );\\n};\\n\"},\"name\":\"Anchor link menu with nested items\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default anchor link menus\",\"url\":\"components/anchor-link-menu/direction-rtl-anchor-link-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { AnchorLinkMenu, AnchorLinkMenuHeader, Link, Typography } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'rtl-anchor-link-menu';\\n\\nexport const DirectionRTLAnchorLinkMenu = () => {\\n  return (\\n    <AnchorLinkMenu aria-labelledby={`${id}-header`} dir=\\\"rtl\\\">\\n      <section>\\n        <AnchorLinkMenuHeader>\\n          <Typography id={`${id}-header`} tag=\\\"h2\\\" variant=\\\"overline\\\">\\n            Section title\\n          </Typography>\\n        </AnchorLinkMenuHeader>\\n        <ul>\\n          <li>\\n            <Link aria-current=\\\"true\\\" href=\\\"./anchor-link-menu\\\">\\n              L1 label 1\\n            </Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 2</Link>\\n            <ul>\\n              <li>\\n                <Link href=\\\"./anchor-link-menu\\\">L2 label 1</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./anchor-link-menu\\\">L2 label 2</Link>\\n              </li>\\n            </ul>\\n          </li>\\n          <li>\\n            <Link href=\\\"./anchor-link-menu\\\">L1 label 3</Link>\\n          </li>\\n        </ul>\\n      </section>\\n    </AnchorLinkMenu>\\n  );\\n};\\n\"},\"name\":\"Right to left anchor link menu\"}],\"propertySections\":[{\"order\":1,\"name\":\"AnchorLinkMenu\",\"selector\":\"<AnchorLinkMenu />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Menu of links that navigate to sections within the current page.\"},{\"order\":2,\"name\":\"AnchorLinkMenuHeader\",\"selector\":\"<AnchorLinkMenuHeader />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component containing the header of the anchor link menu.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"AnchorLinkMenu\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"AnchorLinkMenu\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"aside\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"AnchorLinkMenuHeader\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"AnchorLinkMenuHeader\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"avatar\",\"version\":\"0.0.1\",\"description\":\"Icons and/or text representing users or entities.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Small avatars\",\"description\":\"\",\"order\":1},{\"name\":\"Large avatars\",\"description\":\"\",\"order\":2},{\"name\":\"Custom avatars\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Small avatars\",\"url\":\"components/avatar/small-image-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar } from '@visa/nova-react';\\n\\n/// This is the base url for where your site is deployed. `import.meta.env.BASE_URL` is the environment variable used to import the base url for Vite. Change this import to match your build tool's base url.\\nconst BASE_URL = import.meta.env.BASE_URL;\\nconst user = 'Alex Miller';\\n\\nexport const SmallImageAvatar = () => {\\n  return <Avatar alt={user} small tag=\\\"img\\\" src={BASE_URL + '/alex-miller-stock.png'} />;\\n};\\n\"},\"name\":\"Small image avatar\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Small avatars\",\"url\":\"components/avatar/small-initials-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar } from '@visa/nova-react';\\n\\nconst user = 'Alex Miller';\\nconst userInitials = 'AM';\\n\\nexport const SmallInitialsAvatar = () => {\\n  return (\\n    <Avatar role=\\\"img\\\" aria-label={user} small>\\n      {userInitials}\\n    </Avatar>\\n  );\\n};\\n\"},\"name\":\"Small initials avatar\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Small avatars\",\"url\":\"components/avatar/small-horizontal-icon-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountLow, VisaChevronDownLow, VisaChevronUpLow } from '@visa/nova-icons-react';\\nimport { Avatar, Button, DropdownMenu, TabSuffix, Tab, UtilityFragment } from '@visa/nova-react';\\nimport { CSSProperties, useState } from 'react';\\nimport { offset, useClick, useFloating, useInteractions } from '@floating-ui/react';\\n\\nexport const SmallHorizontalIconAvatar = () => {\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n\\n  const onToggleAccountMenu = () => setAccountMenuOpen(!accountMenuOpen);\\n\\n  // TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\n  const id = 'horizontal-advanced-nav';\\n\\n  // For dropdown menu in the horizontal nav, we use floating UI to open it up\\n  const { context, floatingStyles, refs } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-start',\\n  });\\n  const { getReferenceProps, getFloatingProps } = useInteractions([useClick(context)]);\\n\\n  return (\\n    <div style={{ blockSize: '175px' }}>\\n      <Tab tag=\\\"div\\\">\\n        <Button\\n          aria-expanded={accountMenuOpen}\\n          aria-label=\\\"Alex Miller\\\"\\n          element={<Avatar tag=\\\"button\\\" />}\\n          buttonSize=\\\"large\\\"\\n          colorScheme=\\\"tertiary\\\"\\n          ref={refs.setReference}\\n          {...getReferenceProps({ onClick: onToggleAccountMenu })}\\n        >\\n          <VisaAccountLow />\\n          <TabSuffix element={accountMenuOpen ? <VisaChevronUpLow /> : <VisaChevronDownLow />} />\\n        </Button>\\n        {accountMenuOpen && (\\n          <UtilityFragment vFlex vFlexCol vPadding={4}>\\n            <DropdownMenu\\n              id={`${id}-account-menu`}\\n              ref={refs.setFloating}\\n              style={\\n                {\\n                  inlineSize: '180px',\\n                  maxInlineSize: '100%',\\n                  '--v-surface-padding': '8px',\\n                  ...floatingStyles,\\n                } as CSSProperties\\n              }\\n              {...getFloatingProps()}\\n            >\\n              <UtilityFragment vFlex vJustifyContent=\\\"start\\\" vPaddingHorizontal={8} vPaddingVertical={11}>\\n                <Button buttonSize=\\\"large\\\" colorScheme=\\\"tertiary\\\" tag=\\\"a\\\" href=\\\"./avatar\\\">\\n                  L2 label 1\\n                </Button>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"start\\\" vPaddingHorizontal={8} vPaddingVertical={11}>\\n                <Button buttonSize=\\\"large\\\" colorScheme=\\\"tertiary\\\" tag=\\\"a\\\" href=\\\"./avatar\\\">\\n                  L2 label 2\\n                </Button>\\n              </UtilityFragment>\\n            </DropdownMenu>\\n          </UtilityFragment>\\n        )}\\n      </Tab>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Small horizontal icon avatar\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Small avatars\",\"url\":\"components/avatar/small-vertical-icon-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport { Button, Nav, Tabs, Tab, TabSuffix } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const SmallVerticalIconAvatar = () => {\\n  const [accountIsOpen, setAccountIsOpen] = useState(false);\\n\\n  return (\\n    <Nav aria-label=\\\"Vertical nav with active page\\\" orientation=\\\"vertical\\\" tag=\\\"div\\\">\\n      <Tabs orientation=\\\"vertical\\\" tag=\\\"div\\\">\\n        <Tab tag=\\\"div\\\">\\n          <Button\\n            aria-expanded={accountIsOpen}\\n            aria-label=\\\"Alex Miller\\\"\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"tertiary\\\"\\n            onClick={() => setAccountIsOpen(!accountIsOpen)}\\n          >\\n            <VisaAccountTiny />\\n            <TabSuffix element={<VisaChevronDownTiny />} />\\n          </Button>\\n        </Tab>\\n        {accountIsOpen && (\\n          <div>\\n            <Tab role=\\\"none\\\">\\n              <Button\\n                aria-current=\\\"page\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./nav\\\">L2 label 1</a>}\\n                role=\\\"tab\\\"\\n              />\\n            </Tab>\\n            <Tab role=\\\"none\\\">\\n              <Button\\n                aria-selected=\\\"false\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./nav\\\">L2 label 2</a>}\\n                role=\\\"tab\\\"\\n              />\\n            </Tab>\\n          </div>\\n        )}\\n      </Tabs>\\n    </Nav>\\n  );\\n};\\n\"},\"name\":\"Small vertical icon avatar\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Large avatars\",\"url\":\"components/avatar/large-image-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar } from '@visa/nova-react';\\n\\n/// This is the base url for where your site is deployed. `import.meta.env.BASE_URL` is the environment variable used to import the base url for Vite. Change this import to match your build tool's base url.\\nconst BASE_URL = import.meta.env.BASE_URL;\\nconst user = 'Alex Miller';\\n\\nexport const LargeImageAvatar = () => {\\n  return <Avatar alt={user} tag=\\\"img\\\" src={BASE_URL + '/alex-miller-stock.png'} />;\\n};\\n\"},\"name\":\"Large image avatar\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Large avatars\",\"url\":\"components/avatar/large-initials-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar } from '@visa/nova-react';\\n\\nconst user = 'Alex Miller';\\nconst userInitials = 'AM';\\n\\nexport const LargeInitialsAvatar = () => {\\n  return <Avatar role=\\\"img\\\" aria-label={user}>{userInitials}</Avatar>;\\n};\\n\"},\"name\":\"Large initials avatar\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Large avatars\",\"url\":\"components/avatar/large-icon-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar } from '@visa/nova-react';\\nimport { VisaAccountLow } from '@visa/nova-icons-react';\\n\\nconst user = 'Alex Miller';\\n\\nexport const LargeIconAvatar = () => {\\n  return (\\n    <Avatar aria-label={user} role=\\\"img\\\">\\n      <VisaAccountLow />\\n    </Avatar>\\n  );\\n};\\n\"},\"name\":\"Large icon avatar\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Large avatars\",\"url\":\"components/avatar/fictitious-brand-avatar\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\nimport { Avatar } from '@visa/nova-react';\\n\\nexport const FictitiousBrandAvatar = () => {\\n  return (\\n    <Avatar\\n      role=\\\"img\\\"\\n      aria-label=\\\"Brand\\\"\\n      className=\\\"fictitious-brand\\\"\\n      style={\\n        {\\n          '--v-avatar-background': '#6ef2fb',\\n          '--v-avatar-foreground': 'var(--palette-default-text)',\\n          '--typography-body-2-font-weight': 800,\\n        } as CSSProperties\\n      }\\n    >\\n      B\\n    </Avatar>\\n  );\\n};\\n\"},\"name\":\"Large ficticious brand avatar\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom avatars\",\"url\":\"components/avatar/avatar-as-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar, Button, Badge } from '@visa/nova-react';\\nimport { VisaAccountLow } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'avatar-as-a-button';\\n\\nexport const AvatarAsButton = () => {\\n  return (\\n    <Button\\n      element={<Avatar tag=\\\"button\\\" />}\\n      aria-label=\\\"Notifications\\\"\\n      aria-describedby={`${id}-notifications-count`}\\n      buttonSize=\\\"large\\\"\\n      colorScheme=\\\"tertiary\\\"\\n    >\\n      <VisaAccountLow />\\n      <Badge id={`${id}-notifications-count`} tag=\\\"sup\\\" badgeVariant=\\\"number\\\">\\n        3\\n      </Badge>\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Avatar as button\"}],\"propertySections\":[{\"order\":1,\"name\":\"Avatar\",\"selector\":\"<Avatar />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Icons and/or text representing users or entities.\"},{\"order\":2,\"name\":\"TabSuffix\",\"selector\":\"<TabSuffix />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Utility class for positioning and styling elements at the end of tab components.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Avatar\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"small\",\"section\":\"Avatar\",\"data\":{\"name\":\"small\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Small Avatar\"}},{\"name\":\"tag\",\"section\":\"Avatar\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"span\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"element\",\"section\":\"TabSuffix\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with children)\"}},{\"name\":\"ref\",\"section\":\"TabSuffix\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"badge\",\"version\":\"0.0.1\",\"description\":\"Visual indicators communicating the status of a component.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Subtle badges\",\"description\":\"\",\"order\":1},{\"name\":\"Neutral badges\",\"description\":\"\",\"order\":2},{\"name\":\"Positive badges\",\"description\":\"\",\"order\":3},{\"name\":\"Warning badges\",\"description\":\"\",\"order\":4},{\"name\":\"Negative badges\",\"description\":\"\",\"order\":5},{\"name\":\"Number badges\",\"description\":\"\",\"order\":6}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle badges\",\"url\":\"components/badge/subtle-badge-default\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaHistoryTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const SubtleBadgeDefault = () => {\\n  return (\\n      <Badge badgeType=\\\"subtle\\\">\\n        <VisaHistoryTiny aria-label=\\\"history\\\" /> Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Default subtle badge\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle badges\",\"url\":\"components/badge/subtle-badge-without-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge} from '@visa/nova-react';\\n\\nexport const SubtleBadgeWithoutIcon = () => {\\n  return (\\n      <Badge badgeType=\\\"subtle\\\">\\n         Label\\n      </Badge>\\n        );\\n    };\"},\"name\":\"Subtle badge without icon\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle badges\",\"url\":\"components/badge/subtle-badge-with-indicator\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const SubtleBadgeWithIndicator = () => {\\n  return (\\n      <Badge badgeType=\\\"subtle\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Subtle badge with indicator\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle badges\",\"url\":\"components/badge/subtle-badge-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const SubtleBadgeWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"subtle\\\" clear={true}>\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Subtle badge without background\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Neutral badges\",\"url\":\"components/badge/neutral-badge-default\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaInformationTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const NeutralBadgeDefault = () => {\\n  return (\\n      <Badge badgeType=\\\"neutral\\\">\\n        <VisaInformationTiny aria-label=\\\"information\\\" /> Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Default neutral badge\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Neutral badges\",\"url\":\"components/badge/neutral-badge-without-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge} from '@visa/nova-react';\\n\\nexport const NeutralBadgeWithoutIcon = () => {\\nreturn (\\n    <Badge badgeType=\\\"neutral\\\" aria-label=\\\"information\\\">\\n        Label\\n    </Badge>\\n  );\\n};\"},\"name\":\"Neutral badge without icon\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Neutral badges\",\"url\":\"components/badge/neutral-badge-with-indicator\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const NeutralBadgeWithIndicator = () => {\\n  return (\\n      <Badge badgeType=\\\"neutral\\\" aria-label=\\\"information\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Neutral badge with indicator\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Neutral badges\",\"url\":\"components/badge/neutral-badge-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const NeutralBadgeWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"neutral\\\" clear={true} aria-label=\\\"information\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Neutral badge without background\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Neutral badges\",\"url\":\"components/badge/neutral-badge-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaInformationTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const NeutralBadgeIcon = () => {\\n  return (\\n      <Badge badgeType=\\\"neutral\\\" badgeVariant=\\\"icon\\\">\\n        <VisaInformationTiny aria-label=\\\"information\\\" /> \\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Neutral icon badge\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Neutral badges\",\"url\":\"components/badge/neutral-badge-icon-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaInformationTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const NeutralBadgeWithIconWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"neutral\\\" badgeVariant=\\\"icon\\\" clear={true}>\\n        <VisaInformationTiny aria-label=\\\"information\\\" /> \\n      </Badge>\\n  );\\n};\"},\"name\":\"Neutral badge icon without background\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Positive badges\",\"url\":\"components/badge/positive-badge-default\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaSuccessTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const PositiveBadgeDefault = () => {\\n  return (\\n      <Badge badgeType=\\\"stable\\\">\\n        <VisaSuccessTiny aria-label=\\\"success\\\" /> Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Default positive badge\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Positive badges\",\"url\":\"components/badge/positive-badge-without-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge} from '@visa/nova-react';\\n\\nexport const PositiveBadgeWithoutIcon = () => {\\nreturn (\\n    <Badge badgeType=\\\"stable\\\" aria-label=\\\"success\\\">\\n        Label\\n    </Badge>\\n  );\\n};\"},\"name\":\"Positive badge without icon\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Positive badges\",\"url\":\"components/badge/positive-badge-with-indicator\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const PositiveBadgeWithIndicator = () => {\\n  return (\\n      <Badge badgeType=\\\"stable\\\" aria-label=\\\"success\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Positive badge with indicator\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Positive badges\",\"url\":\"components/badge/positive-badge-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const PositiveBadgeWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"stable\\\" clear={true} aria-label=\\\"success\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Positive badge without background\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Positive badges\",\"url\":\"components/badge/positive-badge-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaCheckmarkTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const PositiveBadgeIcon = () => {\\n  return (\\n      <Badge badgeType=\\\"stable\\\" badgeVariant=\\\"icon\\\">\\n        <VisaCheckmarkTiny aria-label=\\\"success\\\" /> \\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Positive icon badge with background\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Positive badges\",\"url\":\"components/badge/positive-badge-icon-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaCheckmarkTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const PositiveBadgeWithIconWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"stable\\\" badgeVariant=\\\"icon\\\" clear={true}>\\n        <VisaCheckmarkTiny aria-label=\\\"success\\\" /> \\n      </Badge>\\n  );\\n};\"},\"name\":\"Positive icon badge without background\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning badges\",\"url\":\"components/badge/warning-badge-default\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaWarningTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const WarningBadgeDefault = () => {\\n  return (\\n      <Badge badgeType=\\\"warning\\\">\\n        <VisaWarningTiny aria-label=\\\"warning\\\" /> Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Default warning badge\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning badges\",\"url\":\"components/badge/warning-badge-without-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge} from '@visa/nova-react';\\n\\nexport const WarningBadgeWithoutIcon = () => {\\nreturn (\\n    <Badge badgeType=\\\"warning\\\" aria-label=\\\"warning\\\">\\n        Label\\n    </Badge>\\n  );\\n};\"},\"name\":\"Warning badge without icon\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning badges\",\"url\":\"components/badge/warning-badge-with-indicator\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const WarningBadgeWithIndicator = () => {\\n  return (\\n      <Badge badgeType=\\\"warning\\\" aria-label=\\\"warning\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Warning badge with indicator\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning badges\",\"url\":\"components/badge/warning-badge-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const WarningBadgeWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"warning\\\" clear={true} aria-label=\\\"warning\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Warning badge without background\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning badges\",\"url\":\"components/badge/warning-badge-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaWarningTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const WarningBadgeIcon = () => {\\n  return (\\n      <Badge badgeType=\\\"warning\\\" badgeVariant=\\\"icon\\\">\\n        <VisaWarningTiny aria-label=\\\"warning\\\" /> \\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Warning icon badge with background\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning badges\",\"url\":\"components/badge/warning-badge-icon-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaWarningTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const WarningBadgeWithIconWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"warning\\\" badgeVariant=\\\"icon\\\" clear={true}>\\n        <VisaWarningTiny aria-label=\\\"warning\\\" /> \\n      </Badge>\\n  );\\n};\"},\"name\":\"Warning icon badge without background\"},{\"description\":\"\",\"order\":23,\"libraryId\":null,\"componentId\":null,\"section\":\"Negative badges\",\"url\":\"components/badge/negative-badge-default\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const NegativeBadgeDefault = () => {\\n  return (\\n      <Badge badgeType=\\\"critical\\\">\\n        <VisaErrorTiny aria-label=\\\"error\\\" /> Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Default negative badge\"},{\"description\":\"\",\"order\":24,\"libraryId\":null,\"componentId\":null,\"section\":\"Negative badges\",\"url\":\"components/badge/negative-badge-without-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge} from '@visa/nova-react';\\n\\nexport const NegativeBadgeWithoutIcon = () => {\\nreturn (\\n    <Badge badgeType=\\\"critical\\\" aria-label=\\\"error\\\">\\n        Label\\n    </Badge>\\n  );\\n};\"},\"name\":\"Negative badge without icon\"},{\"description\":\"\",\"order\":25,\"libraryId\":null,\"componentId\":null,\"section\":\"Negative badges\",\"url\":\"components/badge/negative-badge-with-indicator\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const NegativeBadgeWithIndicator = () => {\\n  return (\\n      <Badge badgeType=\\\"critical\\\" aria-label=\\\"error\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Negative badge with indicator\"},{\"description\":\"\",\"order\":26,\"libraryId\":null,\"componentId\":null,\"section\":\"Negative badges\",\"url\":\"components/badge/negative-badge-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, BadgeEllipse } from '@visa/nova-react';\\n\\nexport const NegativeBadgeWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"critical\\\" clear={true} aria-label=\\\"error\\\">\\n        <BadgeEllipse />\\n        Label\\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Negative badge without background\"},{\"description\":\"\",\"order\":27,\"libraryId\":null,\"componentId\":null,\"section\":\"Negative badges\",\"url\":\"components/badge/negative-badge-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorAltTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const NegativeBadgeIcon = () => {\\n  return (\\n      <Badge badgeType=\\\"critical\\\" badgeVariant=\\\"icon\\\">\\n        <VisaErrorAltTiny aria-label=\\\"error\\\" /> \\n      </Badge>\\n  );\\n};\\n\"},\"name\":\"Negative icon badge with background\"},{\"description\":\"\",\"order\":28,\"libraryId\":null,\"componentId\":null,\"section\":\"Negative badges\",\"url\":\"components/badge/negative-badge-icon-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorAltTiny } from '@visa/nova-icons-react';\\nimport { Badge } from '@visa/nova-react';\\n\\nexport const NegativeBadgeWithIconWithoutBackground = () => {\\n  return (\\n      <Badge badgeType=\\\"critical\\\" badgeVariant=\\\"icon\\\" clear={true}>\\n        <VisaErrorAltTiny aria-label=\\\"error\\\" /> \\n      </Badge>\\n  );\\n};\"},\"name\":\"Negative icon badge without background\"},{\"description\":\"\",\"order\":29,\"libraryId\":null,\"componentId\":null,\"section\":\"Number badges\",\"url\":\"components/badge/badge-number-default\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge } from '@visa/nova-react';\\n\\nexport const BadgeNumberDefault = () => {\\n  return <Badge badgeType=\\\"critical\\\" badgeVariant=\\\"number\\\">3</Badge>;\\n};\\n\"},\"name\":\"Short number badge with background\"},{\"description\":\"\",\"order\":30,\"libraryId\":null,\"componentId\":null,\"section\":\"Number badges\",\"url\":\"components/badge/badge-number-without-background\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge } from '@visa/nova-react';\\n\\nexport const BadgeNumberWithoutBackground = () => {\\n  return <Badge badgeType=\\\"critical\\\" badgeVariant=\\\"number\\\" clear={true}>3</Badge>;\\n};\"},\"name\":\"Short number badge without background\"},{\"description\":\"\",\"order\":31,\"libraryId\":null,\"componentId\":null,\"section\":\"Number badges\",\"url\":\"components/badge/badge-number-long\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge } from '@visa/nova-react';\\n\\nexport const BadgeNumberLong = () => {\\n  return <Badge badgeType=\\\"critical\\\" badgeVariant=\\\"number\\\">12345</Badge>;\\n};\\n\"},\"name\":\"Long number badge\"}],\"propertySections\":[{\"order\":1,\"name\":\"Badge\",\"selector\":\"<Badge />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Visual indicators communicating the status of a component.\"}],\"properties\":[{\"name\":\"active\",\"section\":\"Badge\",\"data\":{\"name\":\"active\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Active style\"}},{\"name\":\"badgeType\",\"section\":\"Badge\",\"data\":{\"name\":\"badgeType\",\"type\":\"\\\"subtle\\\" , \\\"critical\\\" , \\\"neutral\\\" , \\\"stable\\\" , \\\"warning\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Type of Badge\"}},{\"name\":\"badgeVariant\",\"section\":\"Badge\",\"data\":{\"name\":\"badgeVariant\",\"type\":\"\\\"number\\\" , \\\"icon\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Variant of Badge\"}},{\"name\":\"clear\",\"section\":\"Badge\",\"data\":{\"name\":\"clear\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Clear background\"}},{\"name\":\"ref\",\"section\":\"Badge\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Badge\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"banner\",\"version\":\"0.0.1\",\"description\":\"Messages indicating the global status of an application or website.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Informational banners\",\"description\":\"\",\"order\":1},{\"name\":\"Success banners\",\"description\":\"\",\"order\":2},{\"name\":\"Warning banners\",\"description\":\"\",\"order\":3},{\"name\":\"Error banners\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational banners\",\"url\":\"components/banner/empty-information-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner } from '@visa/nova-react';\\n\\nexport const EmptyInformationBanner = () => {\\n  return <Banner></Banner>;\\n};\\n\"},\"name\":\"Empty informational banner\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational banners\",\"url\":\"components/banner/default-information-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const DefaultInformationBanner = () => {\\n  return (\\n    <Banner>\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Default informational banner\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational banners\",\"url\":\"components/banner/title-information-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const TitleInformationBanner = () => {\\n  return (\\n    <Banner>\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography variant=\\\"body-2-bold\\\">Informational title</Typography>\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Informational banner with title\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational banners\",\"url\":\"components/banner/link-information-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Link, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const LinkInformationBanner = () => {\\n  return (\\n    <Banner>\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Link href=\\\"./banner\\\">Destination label</Link>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Informational banner with link\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational banners\",\"url\":\"components/banner/button-information-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const ButtonInformationBanner = () => {\\n  return (\\n    <Banner>\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Informational banner with button\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational banners\",\"url\":\"components/banner/persistent-information-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const PersistentInformationBanner = () => {\\n  return (\\n    <Banner>\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Informational banner without close icon button\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Success banners\",\"url\":\"components/banner/empty-success-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner } from '@visa/nova-react';\\n\\nexport const EmptySuccessBanner = () => {\\n  return <Banner messageType=\\\"success\\\"></Banner>;\\n};\\n\"},\"name\":\"Empty success banner\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Success banners\",\"url\":\"components/banner/default-success-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const DefaultSuccessBanner = () => {\\n  return (\\n    <Banner messageType=\\\"success\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Default success banner\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Success banners\",\"url\":\"components/banner/title-success-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const TitleSuccessBanner = () => {\\n  return (\\n    <Banner messageType=\\\"success\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography variant=\\\"body-2-bold\\\">Success title</Typography>\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Success banner with title\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Success banners\",\"url\":\"components/banner/link-success-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Link, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const LinkSuccessBanner = () => {\\n  return (\\n    <Banner messageType=\\\"success\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Link href=\\\"./banner\\\">Destination label</Link>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Success banner with link\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Success banners\",\"url\":\"components/banner/button-success-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const ButtonSuccessBanner = () => {\\n  return (\\n    <Banner messageType=\\\"success\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Success banner with button\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Success banners\",\"url\":\"components/banner/persistent-success-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const PersistentSuccessBanner = () => {\\n  return (\\n    <Banner messageType=\\\"success\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Success banner without close icon button\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning banners\",\"url\":\"components/banner/empty-warning-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner } from '@visa/nova-react';\\n\\nexport const EmptyWarningBanner = () => {\\n  return <Banner messageType=\\\"warning\\\"></Banner>;\\n};\\n\"},\"name\":\"Empty warning banner\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning banners\",\"url\":\"components/banner/default-warning-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const DefaultWarningBanner = () => {\\n  return (\\n    <Banner messageType=\\\"warning\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Default warning banner\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning banners\",\"url\":\"components/banner/title-warning-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const TitleWarningBanner = () => {\\n  return (\\n    <Banner messageType=\\\"warning\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography variant=\\\"body-2-bold\\\">Warning title</Typography>\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Warning banner with title\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning banners\",\"url\":\"components/banner/link-warning-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Link, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const LinkWarningBanner = () => {\\n  return (\\n    <Banner messageType=\\\"warning\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Link href=\\\"./banner\\\">Destination label</Link>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Warning banner with link\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning banners\",\"url\":\"components/banner/button-warning-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const ButtonWarningBanner = () => {\\n  return (\\n    <Banner messageType=\\\"warning\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Warning banner with button\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning banners\",\"url\":\"components/banner/persistent-warning-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const PersistentWarningBanner = () => {\\n  return (\\n    <Banner messageType=\\\"warning\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Warning banner without close icon button\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Error banners\",\"url\":\"components/banner/empty-error-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner } from '@visa/nova-react';\\n\\nexport const EmptyErrorBanner = () => {\\n  return <Banner messageType=\\\"error\\\"></Banner>;\\n};\\n\"},\"name\":\"Empty error banner\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Error banners\",\"url\":\"components/banner/default-error-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const DefaultErrorBanner = () => {\\n  return (\\n    <Banner messageType=\\\"error\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Default error banner\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Error banners\",\"url\":\"components/banner/title-error-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const TitleErrorBanner = () => {\\n  return (\\n    <Banner messageType=\\\"error\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography variant=\\\"body-2-bold\\\">Error title</Typography>\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Error banner with title\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Error banners\",\"url\":\"components/banner/link-error-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Link, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const LinkErrorBanner = () => {\\n  return (\\n    <Banner messageType=\\\"error\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Link href=\\\"./banner\\\">Destination label</Link>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Error banner with link\"},{\"description\":\"\",\"order\":23,\"libraryId\":null,\"componentId\":null,\"section\":\"Error banners\",\"url\":\"components/banner/button-error-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Banner, BannerCloseButton, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const ButtonErrorBanner = () => {\\n  return (\\n    <Banner messageType=\\\"error\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the banner in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </BannerContent>\\n      <BannerCloseButton />\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Error banner with button\"},{\"description\":\"\",\"order\":24,\"libraryId\":null,\"componentId\":null,\"section\":\"Error banners\",\"url\":\"components/banner/persistent-error-banner\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Banner, BannerContent, BannerIcon, Typography } from '@visa/nova-react';\\n\\nexport const PersistentErrorBanner = () => {\\n  return (\\n    <Banner messageType=\\\"error\\\">\\n      <BannerIcon />\\n      <BannerContent className=\\\"v-pl-2 v-pb-2\\\">\\n        <Typography>This is required text that describes the banner in more detail.</Typography>\\n      </BannerContent>\\n    </Banner>\\n  );\\n};\\n\"},\"name\":\"Error banner without close icon button\"}],\"propertySections\":[{\"order\":1,\"name\":\"Banner\",\"selector\":\"<Banner />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Messages indicating the global status of an application or website.\"},{\"order\":2,\"name\":\"BannerCloseButton\",\"selector\":\"<BannerCloseButton />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Close button used in upper corner of banner.\"},{\"order\":3,\"name\":\"MessageContent\",\"selector\":\"<MessageContent />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for message content elements.\"},{\"order\":4,\"name\":\"MessageIcon\",\"selector\":\"<MessageIcon />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Icon to display within message content.\"}],\"properties\":[{\"name\":\"messageType\",\"section\":\"Banner\",\"data\":{\"name\":\"messageType\",\"type\":\"\\\"subtle\\\" , \\\"warning\\\" , \\\"error\\\" , \\\"success\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Message Type\"}},{\"name\":\"ref\",\"section\":\"Banner\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Banner\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"alternate\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"BannerCloseButton\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"ref\",\"section\":\"MessageContent\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"MessageContent\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"element\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element\"}},{\"name\":\"ref\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"breadcrumbs\",\"version\":\"0.0.1\",\"description\":\"Supplemental navigation indicating the user's location in a site or app.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Examples\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/breadcrumbs/default-breadcrumbs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Breadcrumbs, Link } from '@visa/nova-react';\\n\\nexport const DefaultBreadcrumbs = () => {\\n  return (\\n    <Breadcrumbs ariaLabel=\\\"Default breadcrumbs\\\">\\n      <ol>\\n        <li>\\n          <Link href=\\\"./\\\">L1 label</Link>\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L2 label</Link>\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L3 label</Link>\\n        </li>\\n        <li>\\n          <span aria-current=\\\"page\\\">L4 label</span>\\n        </li>\\n      </ol>\\n    </Breadcrumbs>\\n  );\\n};\\n\"},\"name\":\"Breadcrumbs with default separator\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/breadcrumbs/custom-separator-breadcrumbs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Breadcrumbs, Link } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const CustomSeparatorBreadcrumbs = () => {\\n  return (\\n    <Breadcrumbs\\n      ariaLabel=\\\"Custom separator breadcrumbs\\\"\\n      style={{ '--v-breadcrumbs-pseudo-separator': \\\"'+'\\\" } as CSSProperties}\\n    >\\n      <ol>\\n        <li>\\n          <Link href=\\\"./\\\">L1 label</Link>\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L2 label</Link>\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L3 label</Link>\\n        </li>\\n        <li>\\n          <span aria-current=\\\"page\\\">L4 label</span>\\n        </li>\\n      </ol>\\n    </Breadcrumbs>\\n  );\\n};\\n\"},\"name\":\"Breadcrumbs with custom separator\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/breadcrumbs/inline-separator-breadcrumbs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Breadcrumbs, Link } from '@visa/nova-react';\\n\\nexport const InlineSeparatorBreadcrumbs = () => {\\n  return (\\n    <Breadcrumbs ariaLabel=\\\"Inline separator breadcrumbs\\\" customSeparator>\\n      <ol>\\n        <li>\\n          <Link href=\\\"./\\\">L1 label</Link> <span aria-hidden=\\\"true\\\">|</span>\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L2 label</Link> <span aria-hidden=\\\"true\\\">|</span>\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L3 label</Link> <span aria-hidden=\\\"true\\\">|</span>\\n        </li>\\n        <li>\\n          <span aria-current=\\\"page\\\">L4 label</span>\\n        </li>\\n      </ol>\\n    </Breadcrumbs>\\n  );\\n};\\n\"},\"name\":\"Breadcrumbs with inline separator\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/breadcrumbs/inline-svg-separator-breadcrumbs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport { Breadcrumbs, Link } from '@visa/nova-react';\\n\\nexport const InlineSVGSeparatorBreadcrumbs = () => {\\n  return (\\n    <Breadcrumbs ariaLabel=\\\"Custom svg separator breadcrumbs\\\" customSeparator>\\n      <ol>\\n        <li>\\n          <Link href=\\\"./\\\">L1 label</Link> <VisaChevronRightTiny rtl />\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L2 label</Link> <VisaChevronRightTiny rtl />\\n        </li>\\n        <li>\\n          <Link href=\\\"./\\\">L3 label</Link> <VisaChevronRightTiny rtl />\\n        </li>\\n        <li>\\n          <span aria-current=\\\"page\\\">L4 label</span>\\n        </li>\\n      </ol>\\n    </Breadcrumbs>\\n  );\\n};\\n\"},\"name\":\"Breadcrumbs with SVG separator\"}],\"propertySections\":[{\"order\":1,\"name\":\"Breadcrumbs\",\"selector\":\"<Breadcrumbs />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Supplemental navigation indicating the user's location in a site or app.\"}],\"properties\":[{\"name\":\"customSeparator\",\"section\":\"Breadcrumbs\",\"data\":{\"name\":\"customSeparator\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Use Custom Separator\"}},{\"name\":\"ref\",\"section\":\"Breadcrumbs\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Breadcrumbs\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"nav\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"button\",\"version\":\"0.0.1\",\"description\":\"Interactive elements enabling users to take actions within an interface.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Primary text buttons\",\"description\":\"\",\"order\":1},{\"name\":\"Secondary text buttons\",\"description\":\"\",\"order\":2},{\"name\":\"Tertiary text buttons\",\"description\":\"\",\"order\":3},{\"name\":\"Destructive text buttons\",\"description\":\"\",\"order\":4},{\"name\":\"Primary icon buttons\",\"description\":\"\",\"order\":5},{\"name\":\"Secondary icon buttons\",\"description\":\"\",\"order\":6},{\"name\":\"UI icon buttons\",\"description\":\"\",\"order\":7},{\"name\":\"Stacked icon buttons\",\"description\":\"\",\"order\":8},{\"name\":\"Button coded as a link\",\"description\":\"\",\"order\":9}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary text buttons\",\"url\":\"components/button/default-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button } from '@visa/nova-react';\\n\\nexport const DefaultButton = () => {\\n  return <Button>Primary action</Button>;\\n};\\n\"},\"name\":\"Default primary text button\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary text buttons\",\"url\":\"components/button/alternate-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button } from '@visa/nova-react';\\n\\nexport const AlternateButton = () => {\\n  return <Button alternate>Primary action</Button>;\\n};\\n\"},\"name\":\"Alternate primary text button\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary text buttons\",\"url\":\"components/button/with-leading-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaFileUploadTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const WithLeadingIconButton = () => {\\n  return (\\n    <Button iconTwoColor>\\n      <VisaFileUploadTiny />\\n      Primary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Primary text button with leading icon\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary text buttons\",\"url\":\"components/button/with-trailing-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaFileUploadTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const WithTrailingIconButton = () => {\\n  return (\\n    <Button iconTwoColor>\\n      Primary action\\n      <VisaFileUploadTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Primary text button with trailing icon\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary text buttons\",\"url\":\"components/button/disabled-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaFileUploadTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const DisabledButton = () => {\\n  return (\\n    <Button disabled>\\n      <VisaFileUploadTiny />\\n      Primary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Disabled primary text button\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary text buttons\",\"url\":\"components/button/small-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaFileUploadTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SmallButton = () => {\\n  return (\\n    <Button buttonSize=\\\"small\\\" iconTwoColor>\\n      <VisaFileUploadTiny />\\n      Primary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Small primary text button\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary text buttons\",\"url\":\"components/button/large-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaFileUploadTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const LargeButton = () => {\\n  return (\\n    <Button buttonSize=\\\"large\\\" iconTwoColor>\\n      <VisaFileUploadTiny />\\n      Primary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Large primary text button\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary text buttons\",\"url\":\"components/button/secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button } from '@visa/nova-react';\\n\\nexport const SecondaryButton = () => {\\n  return <Button colorScheme=\\\"secondary\\\">Secondary action</Button>;\\n};\\n\"},\"name\":\"Default secondary text button\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary text buttons\",\"url\":\"components/button/alternate-secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button } from '@visa/nova-react';\\n\\nexport const AlternateSecondaryButton = () => {\\n  return (\\n    <Button alternate colorScheme=\\\"secondary\\\">\\n      Secondary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Alternate secondary text button\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary text buttons\",\"url\":\"components/button/with-leading-icon-secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaSaveTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const WithLeadingIconSecondaryButton = () => {\\n  return (\\n    <Button colorScheme=\\\"secondary\\\">\\n      <VisaSaveTiny />\\n      Secondary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Secondary text button with leading icon\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary text buttons\",\"url\":\"components/button/with-trailing-icon-secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaSaveTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const WithTrailingIconSecondaryButton = () => {\\n  return (\\n    <Button colorScheme=\\\"secondary\\\">\\n      Secondary action\\n      <VisaSaveTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Secondary text button with trailing icon\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary text buttons\",\"url\":\"components/button/disabled-secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaSaveTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const DisabledSecondaryButton = () => {\\n  return (\\n    <Button colorScheme=\\\"secondary\\\" disabled>\\n      <VisaSaveTiny />\\n      Secondary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Disabled secondary text button\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary text buttons\",\"url\":\"components/button/small-secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaSaveTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SmallSecondaryButton = () => {\\n  return (\\n    <Button buttonSize=\\\"small\\\" colorScheme=\\\"secondary\\\">\\n      <VisaSaveTiny />\\n      Secondary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Small secondary text button\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary text buttons\",\"url\":\"components/button/large-secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaSaveTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const LargeSecondaryButton = () => {\\n  return (\\n    <Button buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\">\\n      <VisaSaveTiny />\\n      Secondary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Large secondary text button\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Tertiary text buttons\",\"url\":\"components/button/tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button } from '@visa/nova-react';\\n\\nexport const TertiaryButton = () => {\\n  return <Button colorScheme=\\\"tertiary\\\">Tertiary action</Button>;\\n};\\n\"},\"name\":\"Default tertiary text button\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Tertiary text buttons\",\"url\":\"components/button/alternate-tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button } from '@visa/nova-react';\\n\\nexport const AlternateTertiaryButton = () => {\\n  return (\\n    <Button alternate colorScheme=\\\"tertiary\\\">\\n      Tertiary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Alternate tertiary text button\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Tertiary text buttons\",\"url\":\"components/button/with-leading-icon-tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaHistoryTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const WithLeadingIconTertiaryButton = () => {\\n  return (\\n    <Button colorScheme=\\\"tertiary\\\">\\n      <VisaHistoryTiny />\\n      Tertiary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Tertiary text button with leading icon\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Tertiary text buttons\",\"url\":\"components/button/with-trailing-icon-tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaHistoryTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const WithTrailingIconTertiaryButton = () => {\\n  return (\\n    <Button colorScheme=\\\"tertiary\\\">\\n      Tertiary action\\n      <VisaHistoryTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Tertiary text button with trailing icon\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Tertiary text buttons\",\"url\":\"components/button/disabled-tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaHistoryTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const DisabledTertiaryButton = () => {\\n  return (\\n    <Button colorScheme=\\\"tertiary\\\" disabled>\\n      <VisaHistoryTiny />\\n      Tertiary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Disabled tertiary text button\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Tertiary text buttons\",\"url\":\"components/button/small-tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaHistoryTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SmallTertiaryButton = () => {\\n  return (\\n    <Button buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\">\\n      <VisaHistoryTiny />\\n      Tertiary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Small tertiary text button\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Tertiary text buttons\",\"url\":\"components/button/large-tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaHistoryTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const LargeTertiaryButton = () => {\\n  return (\\n    <Button buttonSize=\\\"large\\\" colorScheme=\\\"tertiary\\\">\\n      <VisaHistoryTiny />\\n      Tertiary action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Large tertiary text button\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Destructive text buttons\",\"url\":\"components/button/destructive-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaDeleteTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const DestructiveButton = () => {\\n  return (\\n    <Button destructive>\\n      <VisaDeleteTiny />\\n      Destructive action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Primary destructive text button\"},{\"description\":\"\",\"order\":23,\"libraryId\":null,\"componentId\":null,\"section\":\"Destructive text buttons\",\"url\":\"components/button/destructive-secondary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaDeleteTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const DestructiveSecondaryButton = () => {\\n  return (\\n    <Button destructive colorScheme=\\\"secondary\\\">\\n      <VisaDeleteTiny />\\n      Destructive action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Secondary destructive text button\"},{\"description\":\"\",\"order\":24,\"libraryId\":null,\"componentId\":null,\"section\":\"Destructive text buttons\",\"url\":\"components/button/destructive-tertiary-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaDeleteTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const DestructiveTertiaryButton = () => {\\n  return (\\n    <Button colorScheme=\\\"tertiary\\\" destructive>\\n      <VisaDeleteTiny />\\n      Destructive action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Tertiary destructive text button\"},{\"description\":\"\",\"order\":25,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary icon buttons\",\"url\":\"components/button/icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAddTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const IconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" iconButton>\\n      <VisaAddTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Default primary icon button\"},{\"description\":\"\",\"order\":26,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary icon buttons\",\"url\":\"components/button/icon-alternate-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAddTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const IconAlternateButton = () => {\\n  return (\\n    <Button alternate aria-label=\\\"action\\\" iconButton>\\n      <VisaAddTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Alternate primary icon button\"},{\"description\":\"\",\"order\":27,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary icon buttons\",\"url\":\"components/button/with-label-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAddTiny } from '@visa/nova-icons-react';\\nimport { Button, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'icon-button';\\n\\nexport const WithLabelIconButton = () => {\\n  return (\\n    <Utility vFlex vFlexRow>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vFlexCol vGap={2}>\\n        <Button aria-labelledby={`${id}-label`} iconButton>\\n          <VisaAddTiny />\\n        </Button>\\n        <Typography id={`${id}-label`} tag=\\\"span\\\" variant=\\\"label-small\\\">\\n          Action\\n        </Typography>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Primary icon button with label\"},{\"description\":\"\",\"order\":28,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary icon buttons\",\"url\":\"components/button/disabled-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAddTiny } from '@visa/nova-icons-react';\\nimport { Button, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-icon-button';\\n\\nexport const DisabledIconButton = () => {\\n  return (\\n    <Utility vFlex vFlexRow>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vFlexCol vGap={2}>\\n        <Button aria-labelledby={`${id}-label`} disabled iconButton>\\n          <VisaAddTiny />\\n        </Button>\\n        <Typography\\n          id={`${id}-label`}\\n          style={{ color: 'var(--palette-default-disabled)' }}\\n          tag=\\\"span\\\"\\n          variant=\\\"label-small\\\"\\n        >\\n          Action\\n        </Typography>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled primary icon button\"},{\"description\":\"\",\"order\":29,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary icon buttons\",\"url\":\"components/button/small-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAddTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SmallIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" buttonSize=\\\"small\\\" iconButton iconTwoColor>\\n      <VisaAddTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Small primary icon button\"},{\"description\":\"\",\"order\":30,\"libraryId\":null,\"componentId\":null,\"section\":\"Primary icon buttons\",\"url\":\"components/button/large-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAddLow } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const LargeIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" buttonSize=\\\"large\\\" iconButton iconTwoColor>\\n      <VisaAddLow />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Large primary icon button\"},{\"description\":\"\",\"order\":31,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary icon buttons\",\"url\":\"components/button/secondary-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaConnectTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SecondaryIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" colorScheme=\\\"secondary\\\" iconButton>\\n      <VisaConnectTiny rtl />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Default secondary icon button\"},{\"description\":\"\",\"order\":32,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary icon buttons\",\"url\":\"components/button/secondary-alternate-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaConnectTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SecondaryAlternateIconButton = () => {\\n  return (\\n    <Button alternate aria-label=\\\"action\\\" colorScheme=\\\"secondary\\\" iconButton>\\n      <VisaConnectTiny rtl />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Alternate secondary icon button\"},{\"description\":\"\",\"order\":33,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary icon buttons\",\"url\":\"components/button/with-label-secondary-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaConnectTiny } from '@visa/nova-icons-react';\\nimport { Button, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'secondary-icon-button';\\n\\nexport const WithLabelSecondaryIconButton = () => {\\n  return (\\n    <Utility vFlex vFlexRow>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vFlexCol vGap={2}>\\n        <Button aria-labelledby={`${id}-label`} colorScheme=\\\"secondary\\\" iconButton>\\n          <VisaConnectTiny rtl />\\n        </Button>\\n        <Typography id={`${id}-label`} tag=\\\"span\\\" variant=\\\"label-small\\\">\\n          Action\\n        </Typography>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Secondary icon button with label\"},{\"description\":\"\",\"order\":34,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary icon buttons\",\"url\":\"components/button/disabled-secondary-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaConnectTiny } from '@visa/nova-icons-react';\\nimport { Button, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-secondary-icon-button';\\n\\nexport const DisabledSecondaryIconButton = () => {\\n  return (\\n    <Utility vFlex vFlexRow>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vFlexCol>\\n        <Button aria-labelledby={`${id}-label`} colorScheme=\\\"secondary\\\" disabled iconButton>\\n          <VisaConnectTiny rtl />\\n        </Button>\\n        <Typography\\n          id={`${id}-label`}\\n          style={{ color: 'var(--palette-default-disabled)' }}\\n          tag=\\\"span\\\"\\n          variant=\\\"label-small\\\"\\n        >\\n          Action\\n        </Typography>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled secondary icon button\"},{\"description\":\"\",\"order\":35,\"libraryId\":null,\"componentId\":null,\"section\":\"Secondary icon buttons\",\"url\":\"components/button/large-secondary-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaConnectLow } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const LargeSecondaryIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" buttonSize=\\\"large\\\" colorScheme=\\\"secondary\\\" iconButton>\\n      <VisaConnectLow rtl />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Large secondary icon button\"},{\"description\":\"\",\"order\":36,\"libraryId\":null,\"componentId\":null,\"section\":\"UI icon buttons\",\"url\":\"components/button/small-ui-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaNotificationsTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SmallUiIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n      <VisaNotificationsTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Small UI icon button\"},{\"description\":\"\",\"order\":37,\"libraryId\":null,\"componentId\":null,\"section\":\"UI icon buttons\",\"url\":\"components/button/ui-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaNotificationsTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const UiIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n      <VisaNotificationsTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Medium UI icon button\"},{\"description\":\"\",\"order\":38,\"libraryId\":null,\"componentId\":null,\"section\":\"UI icon buttons\",\"url\":\"components/button/large-ui-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaNotificationsLow } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const LargeUiIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" buttonSize=\\\"large\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n      <VisaNotificationsLow />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Large UI icon button\"},{\"description\":\"\",\"order\":39,\"libraryId\":null,\"componentId\":null,\"section\":\"UI icon buttons\",\"url\":\"components/button/subtle-ui-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaNotificationsTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const SubtleUiIconButton = () => {\\n  return (\\n    <Button aria-label=\\\"action\\\" colorScheme=\\\"tertiary\\\" iconButton subtle>\\n      <VisaNotificationsTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Subtle UI icon button\"},{\"description\":\"\",\"order\":40,\"libraryId\":null,\"componentId\":null,\"section\":\"UI icon buttons\",\"url\":\"components/button/with-badge-number-ui-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaNotificationsTiny } from '@visa/nova-icons-react';\\nimport { Badge, Button } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'with-badge-number-ui-icon-button';\\n\\nexport const WithBadgeNumberUiIconButton = () => {\\n  return (\\n    <Button aria-describedby={`${id}-badge`} buttonSize=\\\"large\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n      <VisaNotificationsTiny />\\n      <Badge aria-label=\\\"9 unread notifications\\\" badgeVariant=\\\"number\\\" id={`${id}-badge`} tag=\\\"sup\\\">\\n        9\\n      </Badge>\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"UI icon button with badge\"},{\"description\":\"\",\"order\":41,\"libraryId\":null,\"componentId\":null,\"section\":\"UI icon buttons\",\"url\":\"components/button/alternate-ui-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaNotificationsTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const AlternateUiIconButton = () => {\\n  return (\\n    <Button alternate aria-label=\\\"action\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n      <VisaNotificationsTiny />\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Alternate UI icon button\"},{\"description\":\"\",\"order\":42,\"libraryId\":null,\"componentId\":null,\"section\":\"Stacked icon buttons\",\"url\":\"components/button/stacked-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaGlossaryLow } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const StackedIconButton = () => {\\n  return (\\n    <Button colorScheme=\\\"tertiary\\\" stacked>\\n      <VisaGlossaryLow />\\n      Action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Default stacked icon button\"},{\"description\":\"\",\"order\":43,\"libraryId\":null,\"componentId\":null,\"section\":\"Stacked icon buttons\",\"url\":\"components/button/alternate-stacked-icon-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaGlossaryLow } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const AlternateStackedIconButton = () => {\\n  return (\\n    <Button alternate colorScheme=\\\"tertiary\\\" stacked>\\n      <VisaGlossaryLow />\\n      Action\\n    </Button>\\n  );\\n};\\n\"},\"name\":\"Alternate stacked icon button\"},{\"description\":\"\",\"order\":44,\"libraryId\":null,\"componentId\":null,\"section\":\"Button coded as a link\",\"url\":\"components/button/coded-as-link-button\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport { Button } from '@visa/nova-react';\\n\\nexport const CodedAsLinkButton = () => {\\n  return (\\n    <Button\\n      element={\\n        <a href=\\\"./button\\\">\\n          Primary action\\n          <VisaChevronRightTiny rtl />\\n        </a>\\n      }\\n    />\\n  );\\n};\\n\"},\"name\":\"Button coded as a link\"}],\"propertySections\":[{\"order\":1,\"name\":\"Button\",\"selector\":\"<Button />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Interactive elements enabling users to take actions within an interface.\"}],\"properties\":[{\"name\":\"alternate\",\"section\":\"Button\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"Button\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"Button\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"Button\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"Button\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"Button\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"Button\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"Button\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"Button\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"Button\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"Button\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"button\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}}]},{\"name\":\"checkbox\",\"version\":\"0.0.1\",\"description\":\"Interactive element enabling users to select one or more independent options from a group.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default checkboxes\",\"description\":\"\",\"order\":1},{\"name\":\"Checkbox groups\",\"description\":\"\",\"order\":2},{\"name\":\"Checkbox panels\",\"description\":\"\",\"order\":3},{\"name\":\"Checkbox panels group\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default checkboxes\",\"url\":\"components/checkbox/default-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'checkbox-default';\\n\\nexport const DefaultCheckbox = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Checkbox id={id} />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Checkbox with label\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default checkboxes\",\"url\":\"components/checkbox/standalone-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Utility } from '@visa/nova-react';\\n\\nexport const StandaloneCheckbox = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Checkbox aria-label=\\\"label\\\" />\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Checkbox without visible label\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default checkboxes\",\"url\":\"components/checkbox/inline-message-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, InputMessage, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'inline-message-checkbox';\\n\\nexport const InlineMessageCheckbox = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-message`}>\\n      <Utility vFlex vGap={2}>\\n        <Checkbox id={id} />\\n        <Utility vFlex vFlexCol vGap={2} vMarginVertical={10}>\\n          <Label htmlFor={id}>Label</Label>\\n          <InputMessage id={`${id}-message`}>\\n            This is optional text that describes the label in more detail.\\n          </InputMessage>\\n        </Utility>\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Checkbox with description\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default checkboxes\",\"url\":\"components/checkbox/checked-checkbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'checked-checkbox';\\n\\nexport const CheckedCheckbox = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Checkbox defaultChecked id={id} />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Checked checkbox\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default checkboxes\",\"url\":\"components/checkbox/validation-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { ChangeEvent, useRef, useState } from 'react';\\nimport { Button, Checkbox, InputMessage, Label, Utility, UtilityFragment } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'validation-checkbox';\\n\\nexport const ValidationCheckbox = () => {\\n  const checkboxRef = useRef<HTMLInputElement>(null);\\n  const [checked, setChecked] = useState(false);\\n  const [invalid, setInvalid] = useState(false);\\n\\n  const onCheckboxChange = (event: ChangeEvent<HTMLInputElement>) => {\\n    setChecked(event.target.checked);\\n  };\\n\\n  const onSubmit = () => {\\n    if (checked) return setInvalid(false);\\n    setInvalid(true);\\n    checkboxRef.current?.focus();\\n  };\\n\\n  return (\\n    <>\\n      <Utility tag=\\\"fieldset\\\" vFlex vFlexCol>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n          <Checkbox\\n            aria-describedby={`${id}-message`}\\n            aria-invalid={invalid}\\n            aria-required={true}\\n            checked={checked}\\n            id={id}\\n            onChange={onCheckboxChange}\\n            ref={checkboxRef}\\n            value=\\\"1\\\"\\n          />\\n          <Label htmlFor={id}>Label</Label>\\n        </Utility>\\n        {invalid && (\\n          <UtilityFragment vMarginTop={4}>\\n            <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\" variant=\\\"body-3\\\">\\n              <VisaErrorTiny />\\n              This is required text that describes the error in more detail.\\n            </InputMessage>\\n          </UtilityFragment>\\n        )}\\n      </Utility>\\n      <UtilityFragment vMarginTop={12}>\\n        <Button onClick={onSubmit}>Submit</Button>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Checkbox with error\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default checkboxes\",\"url\":\"components/checkbox/disabled-unchecked-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'checkbox-disabled';\\n\\nexport const DisabledUncheckedCheckbox = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Checkbox disabled id={id} />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled checkbox\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default checkboxes\",\"url\":\"components/checkbox/disabled-checked-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'checkbox-disabled-checked';\\n\\nexport const DisabledCheckedCheckbox = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Checkbox id={id} disabled checked />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled checked checkbox\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox groups\",\"url\":\"components/checkbox/group-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'checkbox-group';\\n\\nconst checkboxes = ['Label 1', 'Label 2', 'Label 3', 'Label 4'];\\n\\nexport const GroupCheckbox = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-legend`}>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Group label\\n      </Label>\\n      <Utility tag=\\\"ul\\\" vFlex vFlexCol>\\n        {checkboxes.map((checkbox, index) => (\\n          <Utility key={`${id}-option-${index}`} tag=\\\"li\\\" vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n            <Checkbox id={`${id}-option-${index}`} />\\n            <Label htmlFor={`${id}-option-${index}`}>{checkbox}</Label>\\n          </Utility>\\n        ))}\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Checkbox group\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox groups\",\"url\":\"components/checkbox/group-with-validation-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Button, Checkbox, InputMessage, Label, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { FormEvent, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'group-with-validation-checkbox';\\n\\ntype CheckboxStats = {\\n  checked: boolean;\\n  label: string;\\n  required: boolean;\\n  value: string;\\n};\\n\\nconst defaultCheckboxStats: CheckboxStats[] = [\\n  {\\n    checked: false,\\n    label: 'Label 1',\\n    required: true,\\n    value: 'label-1',\\n  },\\n  {\\n    checked: true,\\n    label: 'Label 2',\\n    required: true,\\n    value: 'label-2',\\n  },\\n  {\\n    checked: false,\\n    label: 'Label 3',\\n    required: true,\\n    value: 'label-3',\\n  },\\n  {\\n    checked: false,\\n    label: 'Label 4',\\n    required: true,\\n    value: 'label-4',\\n  },\\n];\\n\\nexport const GroupWithValidationCheckbox = () => {\\n  const checkboxRefs = useRef<(HTMLInputElement | null)[]>([]);\\n  const [checkboxStats, setCheckboxStats] = useState(defaultCheckboxStats);\\n  const [invalid, setInvalid] = useState(false);\\n\\n  const onCheckboxChange = (event: FormEvent<HTMLInputElement>, index: number) => {\\n    const { checked } = event.currentTarget;\\n    const newCheckboxStats = [...checkboxStats];\\n    newCheckboxStats[index].checked = checked;\\n    setCheckboxStats(newCheckboxStats);\\n  };\\n\\n  const onSubmit = () => {\\n    // Check if any of the checkbox are checked\\n    const isInvalid = !checkboxStats.some(checkbox => checkbox.checked);\\n    // Set invalid state\\n    setInvalid(isInvalid);\\n    // If invalid focus on the first checkbox\\n    if (isInvalid) checkboxRefs.current[0]?.focus();\\n  };\\n\\n  return (\\n    <>\\n      <fieldset aria-labelledby={`${id}-legend`}>\\n        <Label aria-describedby={`${id}-message`} id={`${id}-legend`} tag=\\\"legend\\\">\\n          Group label\\n        </Label>\\n        <Utility tag=\\\"ul\\\" vFlex vFlexCol>\\n          {checkboxStats.map((checkboxStat, index) => (\\n            <Utility key={index} tag=\\\"li\\\" vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n              <Checkbox\\n                aria-invalid={invalid}\\n                checked={checkboxStat.checked}\\n                id={`${id}-option-${index}`}\\n                onChange={event => onCheckboxChange(event, index)}\\n                ref={ref => {\\n                  checkboxRefs.current[index] = ref;\\n                }}\\n                value={checkboxStat.value}\\n              />\\n              <Label htmlFor={`${id}-option-${index}`}>{checkboxStat.label}</Label>\\n            </Utility>\\n          ))}\\n        </Utility>\\n\\n        <UtilityFragment vMarginTop={4}>\\n          <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\" variant=\\\"body-3\\\">\\n            {invalid && (\\n              <>\\n                <VisaErrorTiny />\\n                This is required text that describes the error in more detail.\\n              </>\\n            )}\\n          </InputMessage>\\n        </UtilityFragment>\\n      </fieldset>\\n      <UtilityFragment vMarginTop={12}>\\n        <Button onClick={onSubmit}>Submit</Button>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Checkbox group with error\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox groups\",\"url\":\"components/checkbox/indeterminate-group-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Utility } from '@visa/nova-react';\\nimport { CSSProperties, forwardRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'indeterminate-group-checkbox';\\n\\ntype Option = {\\n  checked?: boolean;\\n  children?: Option[];\\n  disabled?: boolean;\\n  label: string;\\n};\\n\\n// NOTE: This example only works with one level of nesting. A different data structure and way of state management would be required for deeper nesting.\\nconst defaultOptions: Option[] = [\\n  {\\n    label: 'L1 label 1',\\n    children: [\\n      {\\n        checked: true,\\n        label: 'L2 label 1',\\n      },\\n      {\\n        label: 'L2 label 2',\\n      },\\n      {\\n        label: 'L2 label 3',\\n      },\\n    ],\\n  },\\n];\\n\\ntype CheckboxGroupProps = {\\n  disabled?: boolean;\\n  invalid?: boolean;\\n  onCheckboxChange: (checked: boolean, parentIndex: number | undefined, childIndex: number) => void;\\n  options: Option[];\\n  parentId: string;\\n  parentIndex?: number;\\n};\\n\\nconst CheckboxGroup = forwardRef<HTMLInputElement, CheckboxGroupProps>(\\n  ({ disabled, invalid, onCheckboxChange, options, parentId, parentIndex }: CheckboxGroupProps, ref) =>\\n    options.map((option, index) => {\\n      const optionId = `${parentId}-option-${index}`;\\n      const someChildrenChecked = option.children?.some(child => child.checked);\\n      const someChildrenUnchecked = option.children?.some(child => !child.checked);\\n      const indeterminate = someChildrenChecked && someChildrenUnchecked;\\n      return (\\n        <Utility key={optionId} tag=\\\"li\\\" vFlex vFlexCol>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n            <Checkbox\\n              aria-invalid={invalid}\\n              checked={!indeterminate && (option.checked ?? false)}\\n              disabled={option.disabled || disabled}\\n              id={optionId}\\n              indeterminate={indeterminate}\\n              onChange={event => onCheckboxChange(event.currentTarget.checked, parentIndex, index)}\\n              ref={index === 0 ? ref : undefined}\\n            />\\n            <Label htmlFor={optionId}>{option.label}</Label>\\n          </Utility>\\n          {option?.children && (\\n            <Utility vFlex vFlexCol vMarginLeft={16} tag=\\\"ul\\\">\\n              <CheckboxGroup\\n                disabled={option.disabled || disabled}\\n                invalid={invalid}\\n                onCheckboxChange={onCheckboxChange}\\n                options={option.children}\\n                parentId={optionId}\\n                parentIndex={(parentIndex || 0) + index}\\n              />\\n            </Utility>\\n          )}\\n        </Utility>\\n      );\\n    })\\n);\\n\\nCheckboxGroup.displayName = 'CheckboxGroup';\\n\\nexport const IndeterminateGroupCheckbox = () => {\\n  const [options, setOptions] = useState(defaultOptions);\\n\\n  const onCheckboxChange = (checked: boolean, parentIndex: number | undefined, childIndex: number) => {\\n    // Initialize our new options array\\n    const newOptions = [...options];\\n\\n    const checkboxGroup = newOptions[parentIndex === undefined ? childIndex : parentIndex];\\n    const checkboxChild = checkboxGroup?.children && checkboxGroup?.children[childIndex];\\n    // If parentIndex is undefined then it is a parent checkbox change\\n    if (parentIndex === undefined) {\\n      checkboxGroup.checked = checked;\\n      checkboxGroup.children?.forEach(child => {\\n        child.checked = checked;\\n      });\\n    }\\n    // If children exist and they're all checked make sure the group is checked\\n    if (checkboxChild) {\\n      checkboxChild.checked = checked;\\n      const allChildrenChecked = checkboxGroup.children?.every(child => child?.checked) || false;\\n      checkboxGroup.checked = allChildrenChecked;\\n    }\\n\\n    // Update the state\\n    setOptions(newOptions);\\n  };\\n\\n  return (\\n    <fieldset aria-labelledby={`${id}-legend`} style={{ '--v-checkbox-group-gap': '8px' } as CSSProperties}>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Group label\\n      </Label>\\n      <Utility tag=\\\"ul\\\" vFlex vFlexCol>\\n        <CheckboxGroup onCheckboxChange={onCheckboxChange} options={options} parentId={id} />\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Indeterminate checkbox group\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox groups\",\"url\":\"components/checkbox/error-indeterminate-group-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Button, Checkbox, InputMessage, Label, Utility } from '@visa/nova-react';\\nimport { CSSProperties, forwardRef, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-indeterminate-group-checkbox';\\n\\ntype Option = {\\n  checked?: boolean;\\n  children?: Option[];\\n  disabled?: boolean;\\n  label: string;\\n};\\n\\n// NOTE: This example only works with one level of nesting. A different data structure and way of state management would be required for deeper nesting.\\nconst defaultOptions: Option[] = [\\n  {\\n    label: 'L1 label 1',\\n    children: [\\n      {\\n        checked: true,\\n        label: 'L2 label 1',\\n      },\\n      {\\n        label: 'L2 label 2',\\n      },\\n      {\\n        label: 'L2 label 3',\\n      },\\n    ],\\n  },\\n];\\n\\ntype CheckboxGroupProps = {\\n  disabled?: boolean;\\n  invalid?: boolean;\\n  onCheckboxChange: (checked: boolean, parentIndex: number | undefined, childIndex: number) => void;\\n  options: Option[];\\n  parentId: string;\\n  parentIndex?: number;\\n};\\n\\nconst CheckboxGroup = forwardRef<HTMLInputElement, CheckboxGroupProps>(\\n  ({ disabled, invalid, onCheckboxChange, options, parentId, parentIndex }: CheckboxGroupProps, ref) =>\\n    options.map((option, index) => {\\n      const optionId = `${parentId}-option-${index}`;\\n      const someChildrenChecked = option.children?.some(child => child.checked);\\n      const someChildrenUnchecked = option.children?.some(child => !child.checked);\\n      const indeterminate = someChildrenChecked && someChildrenUnchecked;\\n      return (\\n        <Utility key={optionId} tag=\\\"li\\\" vFlex vFlexCol>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n            <Checkbox\\n              aria-invalid={invalid}\\n              checked={!indeterminate && (option.checked ?? false)}\\n              disabled={option.disabled || disabled}\\n              id={optionId}\\n              indeterminate={indeterminate}\\n              onChange={event => onCheckboxChange(event.currentTarget.checked, parentIndex, index)}\\n              ref={index === 0 ? ref : undefined}\\n            />\\n            <Label htmlFor={optionId}>{option.label}</Label>\\n          </Utility>\\n          {option?.children && (\\n            <Utility vFlex vFlexCol vMarginLeft={16} tag=\\\"ul\\\">\\n              <CheckboxGroup\\n                disabled={option.disabled || disabled}\\n                invalid={invalid}\\n                onCheckboxChange={onCheckboxChange}\\n                options={option.children}\\n                parentId={optionId}\\n                parentIndex={(parentIndex || 0) + index}\\n              />\\n            </Utility>\\n          )}\\n        </Utility>\\n      );\\n    })\\n);\\n\\nCheckboxGroup.displayName = 'CheckboxGroup';\\n\\nexport const ErrorIndeterminateGroupCheckbox = () => {\\n  const [invalid, setInvalid] = useState(false);\\n  const [options, setOptions] = useState(defaultOptions);\\n  const firstFocusableCheckbox = useRef<HTMLInputElement | null>(null);\\n\\n  const onCheckboxChange = (checked: boolean, parentIndex: number | undefined, childIndex: number) => {\\n    // Initialize our new options array\\n    const newOptions = [...options];\\n\\n    const checkboxGroup = newOptions[parentIndex === undefined ? childIndex : parentIndex];\\n    const checkboxChild = checkboxGroup?.children && checkboxGroup?.children[childIndex];\\n    // If parentIndex is undefined then it is a parent checkbox change\\n    if (parentIndex === undefined) {\\n      checkboxGroup.checked = checked;\\n      checkboxGroup.children?.forEach(child => {\\n        child.checked = checked;\\n      });\\n    }\\n    // If children exist and they're all checked make sure the group is checked\\n    if (checkboxChild) {\\n      checkboxChild.checked = checked;\\n      const allChildrenChecked = checkboxGroup.children?.every(child => child?.checked) || false;\\n      checkboxGroup.checked = allChildrenChecked;\\n    }\\n\\n    // Update the state\\n    setOptions(newOptions);\\n  };\\n\\n  const onSubmit = () => {\\n    // Check if any of the checkboxes are not checked\\n    const isInvalid = options.some(option => !option.checked);\\n    // Set invalid state\\n    setInvalid(isInvalid);\\n    // If invalid focus on the first checkbox\\n    if (isInvalid) firstFocusableCheckbox.current?.focus();\\n  };\\n\\n  return (\\n    <>\\n      <fieldset aria-labelledby={`${id}-legend`} style={{ '--v-checkbox-group-gap': '8px' } as CSSProperties}>\\n        <Label aria-describedby={`${id}-message`} id={`${id}-legend`} tag=\\\"legend\\\">\\n          Group label\\n        </Label>\\n        <Utility tag=\\\"ul\\\" vFlex vFlexCol>\\n          <CheckboxGroup\\n            invalid={invalid}\\n            onCheckboxChange={onCheckboxChange}\\n            options={options}\\n            parentId={id}\\n            ref={firstFocusableCheckbox}\\n          />\\n        </Utility>\\n        <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\" variant=\\\"body-3\\\">\\n          {invalid && (\\n            <>\\n              <VisaErrorTiny />\\n              This is required text that describes the error in more detail.\\n            </>\\n          )}\\n        </InputMessage>\\n      </fieldset>\\n      <Button className=\\\"v-mt-12\\\" onClick={onSubmit}>\\n        Submit\\n      </Button>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Error indeterminate checkbox group\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox groups\",\"url\":\"components/checkbox/group-horizontal-checkbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'group-horizontal-checkbox';\\n\\nconst checkboxes = ['Label 1', 'Label 2', 'Label 3', 'Label 4'];\\n\\nexport const GroupHorizontalCheckbox = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-legend`}>\\n      <Label className=\\\"v-label\\\" id={`${id}-legend`} tag=\\\"legend\\\">\\n        Group label\\n      </Label>\\n      <Utility tag=\\\"ul\\\" vFlex vFlexRow vFlexWrap vGap={24}>\\n        {checkboxes.map((checkbox, index) => (\\n          <Utility key={`${id}-option-${index}`} tag=\\\"li\\\" vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n            <Checkbox id={`${id}-option-${index}`} />\\n            <Label htmlFor={`${id}-option-${index}`}>{checkbox}</Label>\\n          </Utility>\\n        ))}\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Horizontal checkbox group\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox panels\",\"url\":\"components/checkbox/with-description-panel-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, CheckboxPanel, InputMessage, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'with-description-panel-checkbox';\\n\\nexport const WithDescriptionPanelCheckbox = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-message`}>\\n      <CheckboxPanel htmlFor={id} className=\\\"v-align-items-start\\\">\\n        <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n          <Checkbox id={id} name={id} className=\\\"v-flex-shrink-0\\\" />\\n          <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n            Label\\n            <InputMessage id={`${id}-message`}>\\n              This is optional text that describes the label in more detail.\\n            </InputMessage>\\n          </Utility>\\n        </Utility>\\n      </CheckboxPanel>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Checkbox panel\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox panels\",\"url\":\"components/checkbox/without-description-panel-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, CheckboxPanel, Utility, UtilityFragment } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'without-description-panel-checkbox';\\n\\nexport const WithoutDescriptionPanelCheckbox = () => {\\n  return (\\n    <UtilityFragment vAlignItems=\\\"start\\\">\\n      <CheckboxPanel htmlFor={id}>\\n        <Utility style={{ inlineSize: '100%' }} vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n          <Checkbox className=\\\"v-flex-shrink-0\\\" id={id} name={id} />\\n          Label\\n        </Utility>\\n      </CheckboxPanel>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Checkbox panel without description\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox panels\",\"url\":\"components/checkbox/disabled-panel-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, CheckboxPanel, InputMessage, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'checkbox-panel-disabled';\\n\\nexport const DisabledPanelCheckbox = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-message`}>\\n      <CheckboxPanel className=\\\"v-align-items-start\\\" htmlFor={id}>\\n        <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n          <Checkbox className=\\\"v-flex-shrink-0\\\" disabled id={id} name={id} />\\n          <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n            Label\\n            <InputMessage id={`${id}-message`}>\\n              This is optional text that describes the label in more detail.\\n            </InputMessage>\\n          </Utility>\\n        </Utility>\\n      </CheckboxPanel>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Disabled checkbox panel\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox panels group\",\"url\":\"components/checkbox/group-panel-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, CheckboxPanel, InputMessage, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'group-panel-checkbox';\\n\\nconst checkboxes = [\\n  { label: 'Label 1', message: 'This is optional text that describes the label in more detail.' },\\n  { label: 'Label 2', message: 'This is optional text that describes the label in more detail.' },\\n  { label: 'Label 3', message: 'This is optional text that describes the label in more detail.' },\\n];\\n\\nexport const GroupPanelCheckbox = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-legend`}>\\n      <Typography id={`${id}-legend`} tag=\\\"legend\\\" variant=\\\"label\\\">\\n        Group Label\\n      </Typography>\\n      <Utility vFlex vFlexCol vGap={8}>\\n        {checkboxes.map((checkbox, index) => {\\n          const optionId = `${id}-option-${index}`;\\n          const messageId = `${optionId}-option-${index}`;\\n          return (\\n            <CheckboxPanel className=\\\"v-align-items-start\\\" key={optionId} htmlFor={optionId}>\\n              <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n                <Checkbox aria-describedby={messageId} className=\\\"v-flex-shrink-0\\\" id={optionId} name={optionId} />\\n                <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n                  {checkbox.label}\\n                  <InputMessage id={messageId}>{checkbox.message}</InputMessage>\\n                </Utility>\\n              </Utility>\\n            </CheckboxPanel>\\n          );\\n        })}\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Checkbox panel group\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Checkbox panels group\",\"url\":\"components/checkbox/error-group-panel-checkbox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { FormEvent, useRef, useState } from 'react';\\nimport { Button, Checkbox, CheckboxPanel, InputMessage, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-group-panel-checkbox';\\n\\ntype Option = {\\n  checked: boolean;\\n  label: string;\\n  value: string;\\n  message?: string;\\n};\\n\\nconst defaultOptions: Option[] = [\\n  {\\n    checked: false,\\n    label: 'Label 1',\\n    message: 'This is optional text that describes the label in more detail.',\\n    value: 'label-1',\\n  },\\n  {\\n    checked: false,\\n    label: 'Label 2',\\n    message: 'This is optional text that describes the label in more detail.',\\n    value: 'label-2',\\n  },\\n  {\\n    checked: false,\\n    label: 'Label 3',\\n    message: 'This is optional text that describes the label in more detail.',\\n    value: 'label-3',\\n  },\\n];\\n\\nexport const ErrorPanelGroupCheckbox = () => {\\n  const checkboxRefs = useRef<(HTMLInputElement | null)[]>([]);\\n  const [options, setOptions] = useState(defaultOptions);\\n  const [invalid, setInvalid] = useState(false);\\n\\n  const onCheckboxChange = (event: FormEvent<HTMLInputElement>, index: number) => {\\n    const { checked } = event.currentTarget;\\n    const newOptions = [...options];\\n    newOptions[index].checked = checked;\\n    setOptions(newOptions);\\n  };\\n\\n  const onSubmit = () => {\\n    // Check if any of the checkbox are checked\\n    const isInvalid = !options.some(checkbox => checkbox.checked);\\n    // Set invalid state\\n    setInvalid(isInvalid);\\n    // If invalid focus on the first checkbox\\n    if (isInvalid) checkboxRefs.current[0]?.focus();\\n  };\\n\\n  return (\\n    <>\\n      <fieldset aria-labelledby={`${id}-legend`}>\\n        <Typography aria-describedby={`${id}-message`} id={`${id}-legend`} tag=\\\"legend\\\" variant=\\\"label\\\">\\n          Group Label\\n        </Typography>\\n        <Utility vFlex vFlexCol vGap={8}>\\n          {options.map((option, index) => {\\n            const optionId = `${id}-option-${index}`;\\n            const messageId = `${optionId}-message`;\\n            return (\\n              <Utility element={<CheckboxPanel />} htmlFor={optionId} key={optionId} vAlignItems=\\\"start\\\">\\n                <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n                  <Checkbox\\n                    aria-describedby={messageId}\\n                    aria-invalid={invalid}\\n                    checked={option.checked}\\n                    className=\\\"v-flex-shrink-0\\\"\\n                    id={optionId}\\n                    onChange={event => onCheckboxChange(event, index)}\\n                    ref={ref => {\\n                      checkboxRefs.current[index] = ref;\\n                    }}\\n                    value={option.value}\\n                  />\\n                  <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n                    {option.label}\\n                    <InputMessage id={messageId}>{option.message}</InputMessage>\\n                  </Utility>\\n                </Utility>\\n              </Utility>\\n            );\\n          })}\\n        </Utility>\\n        <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\" variant=\\\"body-3\\\">\\n          {invalid && (\\n            <>\\n              <VisaErrorTiny />\\n              This is required text that describes the error in more detail.\\n            </>\\n          )}\\n        </InputMessage>\\n      </fieldset>\\n      <Button onClick={onSubmit}>Submit</Button>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Checkbox panel group with error\"}],\"propertySections\":[{\"order\":1,\"name\":\"Checkbox\",\"selector\":\"<Checkbox />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Interactive element enabling users to select one or more independent options from a group.\"},{\"order\":2,\"name\":\"CheckboxPanel\",\"selector\":\"<CheckboxPanel />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container to be used with checkbox component to add border and background color.\"}],\"properties\":[{\"name\":\"indeterminate\",\"section\":\"Checkbox\",\"data\":{\"name\":\"indeterminate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Whether a checkbox is indeterminate state, only allowable on \\\"input\\\" tag types. This should only be set to true if checked is false.\"}},{\"name\":\"ref\",\"section\":\"Checkbox\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Checkbox\",\"data\":{\"name\":\"tag\",\"type\":\"\\\"symbol\\\" , \\\"object\\\" , \\\"a\\\" , \\\"abbr\\\" , \\\"address\\\" , \\\"area\\\" , \\\"article\\\" , \\\"aside\\\" , \\\"audio\\\" , \\\"b\\\" , \\\"base\\\" , \\\"bdi\\\" , \\\"bdo\\\" , \\\"big\\\" , \\\"blockquote\\\" , \\\"body\\\" , \\\"br\\\" , \\\"button\\\" , \\\"canvas\\\" , ... 159 more ... , ComponentType\",\"default\":\"input\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"CheckboxPanel\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"CheckboxPanel\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"chip\",\"version\":\"0.0.1\",\"description\":\"Compact elements used to filter content or display user input.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Selection chips\",\"description\":\"\",\"order\":1},{\"name\":\"Removable chips\",\"description\":\"\",\"order\":2},{\"name\":\"Custom chips\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Selection chips\",\"url\":\"components/chip/default-selection-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Chip } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-selection-chip';\\n\\nexport const DefaultSelectionChip = () => {\\n  return (\\n    <Chip chipType=\\\"selection\\\" htmlFor={id} tag=\\\"label\\\">\\n      Label\\n      <Checkbox id={id} />\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Default selection chip\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Selection chips\",\"url\":\"components/chip/selected-selection-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Chip } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'selected-selection-chip';\\n\\nexport const SelectedSelectionChip = () => {\\n  return (\\n    <Chip chipType=\\\"selection\\\" htmlFor={id} tag=\\\"label\\\">\\n      Label\\n      <Checkbox defaultChecked id={id} />\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Selected selection chip\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Selection chips\",\"url\":\"components/chip/multi-line-selection-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Chip } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'multi-line-selection-chip';\\n\\nexport const MultiLineSelectionChip = () => {\\n  return (\\n    <Chip chipType=\\\"selection\\\" htmlFor={id} tag=\\\"label\\\">\\n      This is a chip label\\n      <br />\\n      that wraps on\\n      <br />\\n      multiple lines\\n      <Checkbox id={id} />\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Multi-line selection chip\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Selection chips\",\"url\":\"components/chip/disabled-selection-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Chip } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-selection-chip';\\n\\nexport const DisabledSelectionChip = () => {\\n  return (\\n    <Chip chipType=\\\"selection\\\" htmlFor={id} tag=\\\"label\\\">\\n      Label\\n      <Checkbox disabled id={id} />\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Disabled selection chip\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Selection chips\",\"url\":\"components/chip/checked-disabled-selection-chip\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Chip } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'checked-disabled-selection-chip';\\n\\nexport const CheckedDisabledSelectionChip = () => {\\n  return (\\n    <Chip chipType=\\\"selection\\\" htmlFor={id} tag=\\\"label\\\">\\n      Label\\n      <Checkbox defaultChecked disabled id={id} />\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Disabled selected selection chip\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Selection chips\",\"url\":\"components/chip/selection-group-chip\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Chip, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'selection-group-chip';\\n\\nconst chips = ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5', 'Label 6', 'Label 7'];\\n\\nexport const SelectionGroupChip = () => {\\n  return (\\n    <Utility vFlex vFlexWrap vGap={8} style={{ inlineSize: '50%' }}>\\n      {chips.map((chip, index) => (\\n        <Chip chipType=\\\"selection\\\" htmlFor={`${id}-${index}`} key={`${id}-${index}`} tag=\\\"label\\\">\\n          <span>{chip}</span>\\n          <Checkbox id={`${id}-${index}`} />\\n        </Chip>\\n      ))}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Selection chip group\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/default-removable-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Chip } from '@visa/nova-react';\\n\\nexport const DefaultRemovableChip = () => {\\n  return (\\n    <Chip>\\n      <span>Label</span>\\n      <Button aria-label=\\\"clear Label\\\" colorScheme=\\\"tertiary\\\" iconButton subtle>\\n        <VisaClearAltTiny />\\n      </Button>\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Default removable chip\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/removable-icon-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Chip } from '@visa/nova-react';\\n\\nexport const RemovableIconChip = () => {\\n  return (\\n    <Chip>\\n      <VisaAccountTiny />\\n      <span>Label</span>\\n      <Button aria-label=\\\"clear Label\\\" colorScheme=\\\"tertiary\\\" iconButton subtle>\\n        <VisaClearAltTiny />\\n      </Button>\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Removable chip with icon\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/removable-avatar-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Avatar, Button, Chip } from '@visa/nova-react';\\n\\n/// This is the base url for where your site is deployed. `import.meta.env.BASE_URL` is the environment variable used to import the base url for Vite. Change this import to match your build tool's base url.\\nconst BASE_URL = import.meta.env.BASE_URL;\\n\\nexport const RemovableAvatarChip = () => {\\n  return (\\n    <Chip>\\n      <Avatar aria-label=\\\"Alex Miller\\\" src={BASE_URL + '/alex-miller-stock.png'} tag=\\\"img\\\" />\\n      <span>Label</span>\\n      <Button aria-label=\\\"clear Label\\\" colorScheme=\\\"tertiary\\\" iconButton subtle>\\n        <VisaClearAltTiny />\\n      </Button>\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Removable chip with avatar\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/disabled-removable-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Chip } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'multi-line-selection-chip';\\n\\nexport const DisabledRemovableChip = () => {\\n  return (\\n    <Chip>\\n      <label className=\\\"v-label\\\" htmlFor={id}>Label</label> \\n      <Button aria-label=\\\"clear\\\" colorScheme=\\\"tertiary\\\" id={id} disabled iconButton subtle>\\n        <VisaClearAltTiny />\\n      </Button>\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Disabled removable chip\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/compact-removable-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Chip } from '@visa/nova-react';\\n\\nexport const CompactRemovableChip = () => {\\n  return (\\n    <Chip chipSize=\\\"compact\\\">\\n      <span>Label</span>\\n      <Button aria-label=\\\"clear Label\\\" colorScheme=\\\"tertiary\\\" iconButton subtle>\\n        <VisaClearAltTiny />\\n      </Button>\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Compact removable chip\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/compact-removable-icon-chip\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Chip } from '@visa/nova-react';\\n\\nexport const CompactRemovableIconChip = () => {\\n  return (\\n    <Chip chipSize=\\\"compact\\\">\\n      <VisaAccountTiny />\\n      <span>Label</span>\\n      <Button aria-label=\\\"clear Label\\\" colorScheme=\\\"tertiary\\\" iconButton subtle>\\n        <VisaClearAltTiny />\\n      </Button>\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Compact removable chip with icon\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/compact-removable-avatar-chip\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Avatar, Button, Chip } from '@visa/nova-react';\\n\\n/// This is the base url for where your site is deployed. `import.meta.env.BASE_URL` is the environment variable used to import the base url for Vite. Change this import to match your build tool's base url.\\nconst BASE_URL = import.meta.env.BASE_URL;\\n\\nexport const CompactRemovableAvatarChip = () => {\\n  return (\\n    <Chip chipSize=\\\"compact\\\">\\n      <Avatar aria-label=\\\"Alex Miller\\\" src={BASE_URL + '/alex-miller-stock.png'} tag=\\\"img\\\" />\\n      <span>Label</span>\\n      <Button aria-label=\\\"clear Label\\\" colorScheme=\\\"tertiary\\\" iconButton subtle>\\n        <VisaClearAltTiny />\\n      </Button>\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Compact removable chip with avatar\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/removable-group-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { useState } from 'react';\\nimport { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Chip, Utility } from '@visa/nova-react';\\n\\nexport const RemovableGroupChip = () => {\\n  const initialChips = ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5', 'Label 6', 'Label 7', 'Label 8'];\\n  const [chips, setChips] = useState(initialChips);\\n\\n  const handleRemove = (chipToRemove: string) => {\\n    setChips(chips => chips.filter(chip => chip !== chipToRemove));\\n  };\\n\\n  const resetChips = () => {\\n    setChips(initialChips);\\n  };\\n\\n  return (\\n    <>\\n      <Utility vFlex vFlexWrap vGap={8}>\\n        {chips.map((chip, index) => (\\n          <Chip key={index}>\\n            {chip}\\n            <Button iconButton colorScheme=\\\"tertiary\\\" subtle aria-label={`Clear ${chip}`} onClick={() => handleRemove(chip)}>\\n              <VisaClearAltTiny />\\n            </Button>\\n          </Chip>\\n        ))}\\n      </Utility>\\n      <Utility vMarginTop={12}>\\n        <Button onClick={resetChips}>Reset</Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Removable chip group\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Removable chips\",\"url\":\"components/chip/compact-removable-group-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { useState } from 'react';\\nimport { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Chip, Utility } from '@visa/nova-react';\\n\\nexport const CompactRemovableGroupChip = () => {\\n  const initialChips = ['Label 1', 'Label 2', 'Label 3', 'Label 4', 'Label 5', 'Label 6'];\\n  const [chips, setChips] = useState(initialChips);\\n\\n  const handleRemove = (chipToRemove: string) => {\\n    setChips(chips => chips.filter(chip => chip !== chipToRemove));\\n  };\\n\\n  const resetChips = () => {\\n    setChips(initialChips);\\n  };\\n\\n  return (\\n    <>\\n      <Utility vFlex vFlexWrap vGap={8}>\\n        {chips.map((chip, index) => (\\n          <Chip chipSize=\\\"compact\\\" key={index}>\\n            {chip}\\n            <Button iconButton colorScheme=\\\"tertiary\\\" subtle aria-label={`Clear ${chip}`} onClick={() => handleRemove(chip)}>\\n              <VisaClearAltTiny />\\n            </Button>\\n          </Chip>\\n        ))}\\n      </Utility>\\n      <Utility vMarginTop={12}>\\n        <Button onClick={resetChips}>Reset</Button>\\n      </Utility>\\n    </>\\n  );\\n};\"},\"name\":\"Compact removable chip group\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom chips\",\"url\":\"components/chip/static-chip\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Chip } from '@visa/nova-react';\\n\\nexport const StaticChip = () => {\\n  return (\\n    <Chip tag=\\\"label\\\" readOnly>\\n      Label\\n    </Chip>\\n  );\\n};\\n\"},\"name\":\"Static chip\"}],\"propertySections\":[{\"order\":1,\"name\":\"Chip\",\"selector\":\"<Chip />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Compact elements used to filter content or display user input.\"}],\"properties\":[{\"name\":\"chipSize\",\"section\":\"Chip\",\"data\":{\"name\":\"chipSize\",\"type\":\"\\\"compact\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Chip Size\"}},{\"name\":\"chipType\",\"section\":\"Chip\",\"data\":{\"name\":\"chipType\",\"type\":\"\\\"selection\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Chip Type\"}},{\"name\":\"ref\",\"section\":\"Chip\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Chip\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"color-selector\",\"version\":\"0.0.1\",\"description\":\"\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default color selectors\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default color selectors\",\"url\":\"components/color-selector/color-input\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  offset,\\n  safePolygon,\\n  useDismiss,\\n  useFloating,\\n  useFocus,\\n  useHover,\\n  useInteractions,\\n  useRole,\\n} from '@floating-ui/react';\\nimport { Input, Label, Button, Tooltip, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { VisaAccessibilityTiny } from '@visa/nova-icons-react';\\nimport { useState } from 'react';\\n\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'color-input';\\n\\nexport const ColorInput = () => {\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  const { x, y, strategy, refs, context } = useFloating({\\n    middleware: [offset(2)],\\n    open: isOpen,\\n    onOpenChange: setIsOpen,\\n    placement: 'right',\\n  });\\n\\n  const dismiss = useDismiss(context);\\n  const focus = useFocus(context);\\n  const hover = useHover(context, { handleClose: safePolygon(), move: false });\\n  const role = useRole(context, { role: 'tooltip' });\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, focus, hover, role]);\\n\\n  return (\\n    <Utility vFlex vAlignItems=\\\"center\\\" vGap={6}>\\n      <UtilityFragment vFlexGrow0 style={{ flexBasis: '5%' }}>\\n        <Input id={id} type=\\\"color\\\" />\\n      </UtilityFragment>\\n      <Label htmlFor={id}>Label</Label>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vFlexCol vGap={2}>\\n      <Button \\n        aria-labelledby={`${id}-label`}\\n        aria-label=\\\"Color selector accessibility information\\\"\\n        colorScheme=\\\"tertiary\\\"\\n        iconButton\\n        ref={refs.setReference} {...getReferenceProps()}>\\n          <VisaAccessibilityTiny rtl />\\n        </Button>\\n        {isOpen && (\\n        <Tooltip\\n          ref={refs.setFloating}\\n          style={{\\n            left: x,\\n            position: strategy,\\n            top: y,\\n            width: 'fit-content',\\n          }}\\n          {...getFloatingProps()}\\n        >\\n          For RGB, use values between 0-255. For HSL, use H values between 0-359, S and L values between 0-100%. For hex,\\n          use the format #RRGGBB and values between 0-9 or A-F.\\n        </Tooltip>\\n      )}\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default color selector\"}],\"propertySections\":[{\"order\":1,\"name\":\"input\",\"type\":\"related\",\"selector\":\"<Input />\",\"description\":\"\"}],\"properties\":[]},{\"name\":\"combobox\",\"version\":\"0.0.1\",\"description\":\"Dropdown menu enabling users to enter text or select items from a list.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default Comboboxes\",\"description\":\"\",\"order\":1},{\"name\":\"Combobox behaviors\",\"description\":\"\",\"order\":2}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/no-autocomplete-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const NoAutocompleteCombobox = () => {\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    highlightedIndex,\\n    inputValue,\\n    isOpen,\\n  } = useCombobox({\\n    items: items,\\n    itemToString,\\n    stateReducer,\\n  });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-1\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen, 'aria-owns': listboxId })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                <VisaChevronDownTiny />\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n              key={`no-autocomplete-example-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Default combobox\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/pre-selected-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const PreSelectedCombobox = () => {\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    highlightedIndex,\\n    inputValue,\\n    isOpen,\\n  } = useCombobox({\\n    initialInputValue: 'Option A',\\n    items: items,\\n    itemToString,\\n    stateReducer,\\n  });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-2\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen, 'aria-owns': listboxId })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                <VisaChevronDownTiny />\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n              key={`pre-selected-example-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox with selected option\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/inline-message-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const InlineMessageCombobox = () => {\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    highlightedIndex,\\n    inputValue,\\n    isOpen,\\n  } = useCombobox({\\n    items: items,\\n    itemToString,\\n    stateReducer,\\n  });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-describedby=\\\"combobox-inline-message\\\"\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-3\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen, 'aria-owns': listboxId })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                <VisaChevronDownTiny />\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n          {!isOpen && (\\n            <InputMessage id=\\\"combobox-inline-message\\\">\\n              This is optional text that describes the label in more detail.\\n            </InputMessage>\\n          )}\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n              key={`inline-message-example-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox with inline message\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/clear-button-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\nimport { FocusEvent, useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const ClearButtonCombobox = () => {\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    selectItem,\\n    highlightedIndex,\\n    isOpen,\\n    inputValue,\\n  } = useCombobox({\\n    initialInputValue: 'Option A',\\n    items,\\n    itemToString,\\n    stateReducer,\\n  });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  const [focused, setFocused] = useState(false);\\n\\n  const handleBlur = (event: FocusEvent<HTMLDivElement>) => {\\n    if (!event.currentTarget.contains(event.relatedTarget)) {\\n      setFocused(false);\\n    }\\n  };\\n\\n  const onClear = () => selectItem(null);\\n  const showClearButton = inputValue.length > 0 && focused;\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer\\n              onBlur={e => handleBlur(e)}\\n              onFocus={() => {\\n                setFocused(true);\\n              }}\\n            >\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-4\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen && items.length > 0, 'aria-owns': listboxId })}\\n              />\\n              {showClearButton && (\\n                <Button\\n                  aria-label=\\\"clear\\\"\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={onClear}\\n                  subtle\\n                >\\n                  <VisaClearAltTiny />\\n                </Button>\\n              )}\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n              key={`clear-button-combobox-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox with clear button\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/leading-icon-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaSearchLow } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const LeadingIconCombobox = () => {\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    highlightedIndex,\\n    inputValue,\\n    isOpen,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    stateReducer,\\n  });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <VisaSearchLow />\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-5\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen && items.length > 0, 'aria-owns': listboxId })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n              key={`clear-button-combobox-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox with leading icon\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/error-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaErrorTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const ErrorCombobox = () => {\\n  const [errorState, setErrorState] = useState(false);\\n\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    selectItem,\\n    highlightedIndex,\\n    inputValue,\\n    isOpen,\\n    selectedItem,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    stateReducer,\\n  });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Utility vFlexCol vGap={12}>\\n      <Combobox>\\n        <DropdownContainer className=\\\"v-flex v-flex-col v-gap-4\\\">\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <InputContainer className=\\\"v-flex-row\\\">\\n            <Input\\n              aria-describedby=\\\"input-error-message\\\"\\n              aria-haspopup=\\\"listbox\\\"\\n              aria-invalid={errorState ? 'true' : 'false'}\\n              name=\\\"text-input-field-6\\\"\\n              type=\\\"text\\\"\\n              {...getInputProps({\\n                'aria-expanded': isOpen && items.length > 0,\\n                'aria-owns': listboxId,\\n                onChange: () => selectItem(null),\\n              })}\\n            />\\n            <Button\\n              aria-label=\\\"expand\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              iconButton\\n              {...getToggleButtonProps()}\\n            >\\n              {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n            </Button>\\n          </InputContainer>\\n          {errorState && !isOpen && (\\n            <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id=\\\"input-error-message\\\" role=\\\"alert\\\">\\n              <VisaErrorTiny />\\n              This is required text that describes the error in more detail.\\n            </InputMessage>\\n          )}\\n        </DropdownContainer>\\n        <ListboxContainer>\\n          <Listbox id={listboxId} {...listboxProps}>\\n            {items.map((item, index) => (\\n              <ListboxItem\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                key={`error-combobox-${index}`}\\n                {...getItemProps({\\n                  'aria-selected': inputValue === item.value,\\n                  index,\\n                  item,\\n                })}\\n              >\\n                <UtilityFragment vFlexShrink0>\\n                  <Radio tag=\\\"span\\\" />\\n                </UtilityFragment>\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </ListboxContainer>\\n      </Combobox>\\n      <Utility vFlex vGap={12}>\\n        <Button onClick={() => (!inputValue && !selectedItem ? setErrorState(true) : setErrorState(false))}>\\n          Submit\\n        </Button>\\n        <Button\\n          colorScheme=\\\"secondary\\\"\\n          onClick={() => {\\n            setErrorState(false);\\n            selectItem(null);\\n          }}\\n        >\\n          Reset\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Combobox with error\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/read-only-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport { Button, Combobox, DropdownContainer, Input, InputContainer, Label, UtilityFragment } from '@visa/nova-react';\\nimport { useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const ReadOnlyCombobox = () => {\\n  const { getInputProps, getLabelProps, getToggleButtonProps } = useCombobox({\\n    items: items,\\n    itemToString,\\n    initialInputValue: 'Option A',\\n  });\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-owns=\\\"combobox-listbox-example-7\\\"\\n                name=\\\"text-input-field-7\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': false, readOnly: true })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                disabled\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                <VisaChevronDownTiny />\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Read-only combobox\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/disabled-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const DisabledCombobox = () => {\\n  const { getInputProps, getItemProps, getLabelProps, getMenuProps, getToggleButtonProps, inputValue, isOpen } =\\n    useCombobox({\\n      items: items,\\n      itemToString,\\n      initialInputValue: 'Option A',\\n    });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                disabled\\n                name=\\\"text-input-field-8\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen, 'aria-owns': listboxId })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                <VisaChevronDownTiny />\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              key={`disabled-example-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Disabled combobox\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/item-disabled-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const ItemDisabledCombobox = () => {\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    highlightedIndex,\\n    inputValue,\\n    isOpen,\\n  } = useCombobox({\\n    items: items,\\n    itemToString,\\n    stateReducer,\\n    isItemDisabled: item => item.value === 'Option C', // This is just to mock the third option to be disabled\\n  });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-9\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen, 'aria-owns': listboxId })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                <VisaChevronDownTiny />\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n              disabled={item.value === 'Option C'} // This is just to mock the third option to be disabled\\n              key={`item-disabled-example-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox with disabled option\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Comboboxes\",\"url\":\"components/combobox/no-icon-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\n\\ntype Item = { value: string };\\n\\nconst items: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const NoIconCombobox = () => {\\n  const { getInputProps, getItemProps, getLabelProps, getMenuProps, highlightedIndex, inputValue, isOpen } =\\n    useCombobox({\\n      items: items,\\n      itemToString,\\n      stateReducer,\\n    });\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-10\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({ 'aria-expanded': isOpen, 'aria-owns': listboxId })}\\n              />\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.map((item, index) => (\\n            <ListboxItem\\n              className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n              key={`no-icon-example-${index}`}\\n              {...getItemProps({\\n                'aria-selected': inputValue === item.value,\\n                index,\\n                item,\\n              })}\\n            >\\n              <UtilityFragment vFlexShrink0>\\n                <Radio tag=\\\"span\\\" />\\n              </UtilityFragment>\\n              {item.value}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox without dropdown chevron\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Combobox behaviors\",\"url\":\"components/combobox/autocomplete-with-manual-selection-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst defaultItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const filter = (item: Item, inputValue: string = '') =>\\n  item.value.toLowerCase().includes(inputValue!.toLowerCase());\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const AutocompleteWithManualSelectionCombobox = () => {\\n  const [items, setItems] = useState(defaultItems);\\n  const {\\n    getInputProps,\\n    getItemProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getToggleButtonProps,\\n    highlightedIndex,\\n    inputValue,\\n    isOpen,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    onInputValueChange: ({ inputValue }) => {\\n      setItems(defaultItems.filter(item => filter(item, inputValue)));\\n    },\\n    stateReducer,\\n  });\\n\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-12\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({\\n                  'aria-expanded': isOpen && items.length > 0,\\n                  'aria-owns': listboxId\\n                })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.length > 0 ? (\\n            items.map((item, index) => (\\n              <ListboxItem\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                key={`manual-autocomplete-combobox-${index}`}\\n                {...getItemProps({\\n                  'aria-selected': inputValue === item.value,\\n                  index,\\n                  item,\\n                })}\\n              >\\n                <UtilityFragment vFlexShrink0>\\n                  <Radio tag=\\\"span\\\" />\\n                </UtilityFragment>\\n                {item.value}\\n              </ListboxItem>\\n            ))\\n          ) : (\\n            <UtilityFragment vFlex vJustifyContent=\\\"center\\\" vPaddingVertical={8}>\\n              <li>No results found.</li>\\n            </UtilityFragment>\\n          )}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox with filterable menu and manual selection\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Combobox behaviors\",\"url\":\"components/combobox/autocomplete-with-automatic-selection-combobox\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Radio,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst defaultItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const filter = (item: Item, inputValue: string = '') =>\\n  item.value.toLowerCase().includes(inputValue.toLowerCase());\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const stateReducer = <TItemType,>(\\n  state: UseComboboxState<TItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<TItemType>\\n) =>\\n  // this prevents on mouse hover, the item in the list is automatic selected\\n  type === useCombobox.stateChangeTypes.ItemMouseMove || type === useCombobox.stateChangeTypes.MenuMouseLeave\\n    ? {\\n        ...changes, // default Downshift new state changes on item selection.\\n        highlightedIndex: state.highlightedIndex,\\n      }\\n    : changes;\\n\\nexport const AutocompleteWithAutomaticSelectionCombobox = () => {\\n  const [items, setItems] = useState(defaultItems);\\n  const {\\n    isOpen,\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getInputProps,\\n    getMenuProps,\\n    getItemProps,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items: items,\\n    itemToString,\\n    onInputValueChange: ({ inputValue }) => {\\n      setItems(defaultItems.filter(item => filter(item, inputValue)));\\n      if (inputValue) setHighlightedIndex(0);\\n    },\\n    stateReducer,\\n  });\\n\\n  const { id: listboxId, ...listboxProps } = getMenuProps();\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label</Label>\\n          <UtilityFragment vFlexRow>\\n            <InputContainer>\\n              <Input\\n                aria-haspopup=\\\"listbox\\\"\\n                name=\\\"text-input-field-11\\\"\\n                type=\\\"text\\\"\\n                {...getInputProps({\\n                  'aria-autocomplete': 'list',\\n                  'aria-expanded': isOpen && items.length > 0,\\n                  'aria-owns': listboxId,\\n                })}\\n              />\\n              <Button\\n                aria-label=\\\"expand\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <Listbox id={listboxId} {...listboxProps}>\\n          {items.length > 0 ? (\\n            items.map((item, index) => (\\n              <ListboxItem\\n                key={`auto-autocomplete-combobox-${index}`}\\n                {...getItemProps({\\n                  index,\\n                  item,\\n                })}\\n              >\\n                <UtilityFragment vFlexShrink0>\\n                  <Radio tag=\\\"span\\\" />\\n                </UtilityFragment>\\n                {item.value}\\n              </ListboxItem>\\n            ))\\n          ) : (\\n            <UtilityFragment vFlex vJustifyContent=\\\"center\\\" vPaddingVertical={8}>\\n              <li>No results found.</li>\\n            </UtilityFragment>\\n          )}\\n        </Listbox>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Combobox with filterable menu and automatic selection\"}],\"propertySections\":[{\"order\":1,\"name\":\"Combobox\",\"selector\":\"<Combobox />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Dropdown menu enabling users to enter text or select items from a list.\"},{\"order\":2,\"name\":\"DropdownMenu\",\"selector\":\"<DropdownMenu />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Interactive element enabling users to select a single option from a list.\"},{\"order\":3,\"name\":\"dropdown-menu\",\"type\":\"related\",\"selector\":\"<DropdownMenu />\",\"description\":\"\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Combobox\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Combobox\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of the component\"}},{\"name\":\"ref\",\"section\":\"DropdownMenu\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"DropdownMenu\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Scroll\"}}]},{\"name\":\"content-card\",\"version\":\"0.0.1\",\"description\":\"Compact displays summarizing or directing users to more information.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default content cards\",\"description\":\"\",\"order\":1},{\"name\":\"Dashboard content cards\",\"description\":\"\",\"order\":2}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/default-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  ContentCard,\\n  ContentCardBody,\\n  ContentCardSubtitle,\\n  ContentCardTitle,\\n  Link,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nexport const DefaultContentCard = () => {\\n  return (\\n    <ContentCard>\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\\n        <ContentCardTitle variant=\\\"headline-4\\\">Headline</ContentCardTitle>\\n        <ContentCardSubtitle variant=\\\"subtitle-3\\\">Subtitle</ContentCardSubtitle>\\n        <Typography className=\\\"v-pt-4\\\">\\n          This is optional text that describes the headline and subtitle in more detail.\\n        </Typography>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={16} vPaddingTop={12}>\\n          <Button>Primary action</Button>\\n          <Link href=\\\"./content-card\\\" noUnderline>\\n            Destination label <VisaChevronRightTiny rtl />\\n          </Link>\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Default content card\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/with-buttons-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny, VisaFileUploadTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  ContentCard,\\n  ContentCardBody,\\n  ContentCardSubtitle,\\n  ContentCardTitle,\\n  Link,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nexport const WithButtonsContentCard = () => {\\n  return (\\n    <ContentCard>\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vFlexRow vJustifyContent=\\\"between\\\">\\n          <ContentCardTitle variant=\\\"headline-4\\\">Headline</ContentCardTitle>\\n          <Button aria-label=\\\"Export [Headline]\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaFileUploadTiny />\\n          </Button>\\n        </Utility>\\n        <ContentCardSubtitle variant=\\\"subtitle-3\\\">Subtitle</ContentCardSubtitle>\\n        <Typography className=\\\"v-pt-4\\\">\\n          This is optional text that describes the headline and subtitle in more detail.\\n        </Typography>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={16} vPaddingTop={12}>\\n          <Button>Primary action</Button>\\n          <Link href=\\\"./content-card\\\" noUnderline>\\n            Destination label <VisaChevronRightTiny rtl />\\n          </Link>\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Content card with UI buttons\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/clickable-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport {\\n  ContentCard,\\n  ContentCardBody,\\n  ContentCardSubtitle,\\n  ContentCardTitle,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nexport const ClickableContentCard = () => {\\n  return (\\n    <ContentCard clickable tag=\\\"button\\\">\\n      <Utility element={<ContentCardBody tag=\\\"span\\\" />} vAlignItems=\\\"start\\\" vFlex vFlexCol vGap={4}>\\n        <ContentCardTitle variant=\\\"headline-4\\\" tag=\\\"span\\\">\\n          Headline\\n          <VisaChevronRightTiny rtl className=\\\"v-icon-move\\\" />\\n        </ContentCardTitle>\\n        <ContentCardSubtitle variant=\\\"subtitle-3\\\" tag=\\\"span\\\">\\n          Subtitle\\n        </ContentCardSubtitle>\\n        <Utility element={<Typography tag=\\\"span\\\" />} vPaddingTop={4}>\\n          This is optional text that describes the headline in more detail.\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Clickable content card\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/clickable-disabled-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaSecurityLockTiny } from '@visa/nova-icons-react';\\nimport {\\n  ContentCard,\\n  ContentCardBody,\\n  ContentCardSubtitle,\\n  ContentCardTitle,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nexport const ClickableDisabledContentCard = () => {\\n  return (\\n    <ContentCard aria-disabled=\\\"true\\\" clickable tag=\\\"button\\\" disabled>\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vGap={12}>\\n          <ContentCardTitle variant=\\\"headline-4\\\" tag=\\\"span\\\">\\n            Headline\\n          </ContentCardTitle>\\n          <VisaSecurityLockTiny />\\n        </Utility>\\n        <ContentCardSubtitle variant=\\\"subtitle-3\\\" tag=\\\"span\\\">\\n          Subtitle\\n        </ContentCardSubtitle>\\n        <Typography className=\\\"v-pt-4\\\" tag=\\\"span\\\">\\n          This is optional text that describes the headline in more detail.\\n        </Typography>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Disabled clickable content card\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/compact-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport { ContentCard, ContentCardBody, ContentCardSubtitle, ContentCardTitle, Link, Utility } from '@visa/nova-react';\\n\\nexport const CompactContentCard = () => {\\n  return (\\n    <ContentCard borderBlockEnd>\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={10}>\\n        <ContentCardTitle variant=\\\"headline-4\\\">Headline</ContentCardTitle>\\n        <ContentCardSubtitle className=\\\"v-pt-4\\\" variant=\\\"body-2\\\">\\n          This is optional text that describes the headline and subtitle in more detail.\\n        </ContentCardSubtitle>\\n        <Utility vPaddingTop={12}>\\n          <Link href=\\\"./content-card\\\" noUnderline>\\n            Destination label <VisaChevronRightTiny rtl />\\n          </Link>\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Compact content card\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/category-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountLow, VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  ContentCard,\\n  ContentCardBody,\\n  ContentCardSubtitle,\\n  ContentCardTitle,\\n  Link,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\nexport const CategoryContentCard = () => {\\n  return (\\n    <ContentCard>\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vGap={6} vPaddingBottom={8}>\\n          <VisaAccountLow />\\n          <Typography style={{ color: 'var(--palette-default-active)' }} variant=\\\"overline\\\" tag=\\\"h3\\\">\\n            Category\\n          </Typography>\\n        </Utility>\\n        <ContentCardTitle variant=\\\"headline-4\\\" tag=\\\"h4\\\">\\n          Headline\\n        </ContentCardTitle>\\n        <ContentCardSubtitle variant=\\\"subtitle-3\\\" tag=\\\"h5\\\">\\n          Subtitle\\n        </ContentCardSubtitle>\\n        <Typography className=\\\"v-pt-4\\\">\\n          This is optional text that describes the headline and subtitle in more detail.\\n        </Typography>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vGap={16} vPaddingTop={12}>\\n          <Button>Primary action</Button>\\n          <Link href=\\\"./content-card\\\" noUnderline>\\n            Destination label <VisaChevronRightTiny rtl />\\n          </Link>\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Content card with category\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/icon-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny, VisaSecurityLockHigh } from '@visa/nova-icons-react';\\nimport { ContentCard, ContentCardBody, ContentCardTitle, Divider, Link, Typography, Utility } from '@visa/nova-react';\\n\\nexport const IconContentCard = () => {\\n  return (\\n    <ContentCard>\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\\n        <Utility element={<VisaSecurityLockHigh />} vPaddingBottom={12} />\\n        <ContentCardTitle variant=\\\"headline-4\\\">Headline</ContentCardTitle>\\n        <Divider />\\n        <Typography className=\\\"v-pt-4\\\">\\n          This is optional text that describes the headline and subtitle in more detail.\\n        </Typography>\\n        <Utility vPaddingTop={12}>\\n          <Link href=\\\"./content-card\\\" noUnderline>\\n            Destination label <VisaChevronRightTiny rtl />\\n          </Link>\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Content card with icon\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Default content cards\",\"url\":\"components/content-card/image-header-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  ContentCard,\\n  ContentCardBody,\\n  ContentCardImage,\\n  ContentCardSubtitle,\\n  ContentCardTitle,\\n  Link,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n/// This is the base url for where your site is deployed. `import.meta.env.BASE_URL` is the environment variable used to import the base url for Vite. Change this import to match your build tool's base url.\\nconst BASE_URL = import.meta.env.BASE_URL;\\n\\nexport const ImageHeaderContentCard = () => {\\n  return (\\n    <ContentCard style={{inlineSize: '50vw'}}>\\n      <ContentCardImage\\n        // If your image is NOT decorative, be sure to write alt text describing the image\\n        alt=\\\"\\\"\\n        // Make sure the src path is correct for your image\\n        src={BASE_URL + '/content-card-image.png'}\\n        style={{ blockSize: 'auto', inlineSize: '100%', objectFit: 'contain', overflow: 'hidden' }}\\n        tag=\\\"img\\\"\\n      />\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\\n        <ContentCardTitle variant=\\\"headline-4\\\">Headline</ContentCardTitle>\\n        <ContentCardSubtitle variant=\\\"subtitle-3\\\">Subtitle</ContentCardSubtitle>\\n        <Typography className=\\\"v-pt-4\\\">\\n          This is optional text that describes the headline and subtitle in more detail.\\n        </Typography>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={16} vPaddingTop={12}>\\n          <Button>Primary action</Button>\\n          <Link href=\\\"./content-card\\\" noUnderline>\\n            Destination label <VisaChevronRightTiny rtl />\\n          </Link>\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Content card with image\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Dashboard content cards\",\"url\":\"components/content-card/compact-dashboard-content-card\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaArrowUpTiny } from '@visa/nova-icons-react';\\nimport { ContentCard, ContentCardBody, ContentCardTitle, Typography, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'compact-dashboard-content-card';\\n\\nexport const CompactDashboardContentCard = () => {\\n  return (\\n    <ContentCard>\\n      <Utility element={<ContentCardBody />} vFlex vFlexCol vGap={4}>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vFlexRow vJustifyContent=\\\"between\\\">\\n          <ContentCardTitle variant=\\\"headline-4\\\">Headline</ContentCardTitle>\\n        </Utility>\\n        <Typography className=\\\"v-pt-4\\\">\\n          This is optional text that describes the headline and subtitle in more detail.\\n        </Typography>\\n        <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={16} vPaddingTop={12}>\\n          <Typography style={{ color: 'var(--palette-messaging-text-positive)' } as CSSProperties} variant=\\\"display-2\\\">\\n            0,000\\n          </Typography>\\n          <Utility vAlignContent=\\\"end\\\" vAlignItems=\\\"center\\\" vFlex vFlexCol vGap={4} vMarginTop={8}>\\n            <VisaArrowUpTiny\\n              aria-hidden=\\\"false\\\"\\n              title=\\\"Increasing value\\\"\\n              titleId={`${id}-trend-title`}\\n              aria-labelledby={`${id}-trend-title ${id}-trend-label`}\\n            />\\n            <Typography id={`${id}-trend-label`} aria-hidden=\\\"true\\\">\\n              Label\\n            </Typography>\\n          </Utility>\\n        </Utility>\\n      </Utility>\\n    </ContentCard>\\n  );\\n};\\n\"},\"name\":\"Compact dashboard content card\"}],\"propertySections\":[{\"order\":1,\"name\":\"ContentCard\",\"selector\":\"<ContentCard />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Compact displays summarizing or directing users to more information.\"},{\"order\":2,\"name\":\"ContentCardBody\",\"selector\":\"<ContentCardBody />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Element containing the body elements of the content card.\"},{\"order\":3,\"name\":\"ContentCardImage\",\"selector\":\"<ContentCardImage />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Hero image for content card.\"},{\"order\":4,\"name\":\"ContentCardSubtitle\",\"selector\":\"<ContentCardSubtitle />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Subtitle component for content card. Extends typography component.\"},{\"order\":5,\"name\":\"ContentCardTitle\",\"selector\":\"<ContentCardTitle />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Title component for content card. Extends typography component.\"}],\"properties\":[{\"name\":\"borderBlockEnd\",\"section\":\"ContentCard\",\"data\":{\"name\":\"borderBlockEnd\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Show bottom border on content card\"}},{\"name\":\"clickable\",\"section\":\"ContentCard\",\"data\":{\"name\":\"clickable\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Card Clickable\"}},{\"name\":\"ref\",\"section\":\"ContentCard\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ContentCard\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"ContentCardBody\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ContentCardBody\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"ContentCardImage\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ContentCardImage\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"colorScheme\",\"section\":\"ContentCardSubtitle\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"default\\\" , \\\"subtle\\\" , \\\"active\\\" , \\\"on-active\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color variant\"}},{\"name\":\"ref\",\"section\":\"ContentCardSubtitle\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ContentCardSubtitle\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"h4\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"colorScheme\",\"section\":\"ContentCardTitle\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"default\\\" , \\\"subtle\\\" , \\\"active\\\" , \\\"on-active\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color variant\"}},{\"name\":\"ref\",\"section\":\"ContentCardTitle\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ContentCardTitle\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"h3\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"date-and-time-selectors\",\"version\":\"0.0.1\",\"description\":\"\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Date selectors\",\"description\":\"\",\"order\":1},{\"name\":\"Date Range Selectors\",\"description\":\"\",\"order\":2},{\"name\":\"Time selectors\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Date selectors\",\"url\":\"components/date-and-time-selectors/default-date-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-date-selector';\\n\\nexport const DefaultDateSelector = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input id={id} required type=\\\"date\\\" />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default date selector\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Date selectors\",\"url\":\"components/date-and-time-selectors/read-only-date-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'read-only-date-selector';\\n\\nexport const ReadOnlyDateSelector = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input id={id} required type=\\\"date\\\" readOnly />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\"},\"name\":\"Read-only date selector\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Date selectors\",\"url\":\"components/date-and-time-selectors/disabled-date-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-date-selector';\\n\\nexport const DisabledDateSelector = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input id={id} required type=\\\"date\\\" disabled />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\"},\"name\":\"Disabled date selector\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Date selectors\",\"url\":\"components/date-and-time-selectors/date-selector-with-error\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { useState } from 'react';\\nimport { Button, Input, InputContainer, InputMessage, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'date-selector-with-error';\\n\\nexport const DateSelectorWithError = () => {\\n  const [errorState, setErrorState] = useState(false);\\n\\n  return (\\n    <>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer>\\n          <Input id={id} required type=\\\"date\\\" aria-invalid={errorState} />\\n        </InputContainer>\\n        {errorState && (\\n          <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\">\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail.\\n          </InputMessage>\\n        )}\\n      </Utility>\\n      <Utility vFlex vGap={12} vMarginTop={16}>\\n        <Button id={`${id}-submit-button`} onClick={() => setErrorState(true)}>\\n          Submit\\n        </Button>\\n        <Button id={`${id}-reset-button`} colorScheme=\\\"secondary\\\" onClick={() => setErrorState(false)}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Date selector with error\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Date selectors\",\"url\":\"components/date-and-time-selectors/min-max-date-input\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'min-max-date';\\n\\nexport const MinMaxDateInput = () => {\\n  return (\\n    <Utility vFlex vFlexWrap vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input id={id} max=\\\"1999-06-29\\\" min=\\\"1999-01-27\\\" required type=\\\"date\\\" />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Date selector with disabled dates\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Date Range Selectors\",\"url\":\"components/date-and-time-selectors/default-date-range-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { FormEvent, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-date-range-selector';\\n\\nexport const DefaultDateRangeSelector = () => {\\n  const [endDate, setEndDate] = useState('');\\n  const [startDate, setStartDate] = useState('');\\n\\n  const onDateChange = (event: FormEvent<HTMLInputElement>, isStartDate: boolean) => {\\n    const { value } = event.currentTarget;\\n    isStartDate ? setStartDate(value) : setEndDate(value);\\n  };\\n\\n  return (\\n    <Utility vFlex vFlexWrap vGap=\\\"12\\\">\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-start-date`}>Start Date Label (required)</Label>\\n        <InputContainer>\\n          <Input\\n            id={`${id}-start-date`}\\n            max={endDate ? endDate : undefined}\\n            onChange={event => onDateChange(event, true)}\\n            required\\n            type=\\\"date\\\"\\n          />\\n        </InputContainer>\\n      </Utility>\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-end-date`}>End Date Label (required)</Label>\\n        <InputContainer>\\n          <Input\\n            id={`${id}-end-date`}\\n            min={startDate ? startDate : undefined}\\n            onChange={event => onDateChange(event, false)}\\n            required\\n            type=\\\"date\\\"\\n          />\\n        </InputContainer>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default date range selector\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Date Range Selectors\",\"url\":\"components/date-and-time-selectors/stacked-date-range-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { FormEvent, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'stacked-date-range-selector';\\n\\nexport const StackedDateRangeSelector = () => {\\n  const [endDate, setEndDate] = useState('');\\n  const [startDate, setStartDate] = useState('');\\n\\n  const onDateChange = (event: FormEvent<HTMLInputElement>, isStartDate: boolean) => {\\n    const { value } = event.currentTarget;\\n    isStartDate ? setStartDate(value) : setEndDate(value);\\n  };\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap=\\\"12\\\">\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-start-date`}>Start Date Label (required)</Label>\\n        <InputContainer>\\n          <Input\\n            id={`${id}-start-date`}\\n            max={endDate ? endDate : undefined}\\n            onChange={event => onDateChange(event, true)}\\n            required\\n            type=\\\"date\\\"\\n          />\\n        </InputContainer>\\n      </Utility>\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-end-date`}>End Date Label (required)</Label>\\n        <InputContainer>\\n          <Input\\n            id={`${id}-end-date`}\\n            min={startDate ? startDate : undefined}\\n            onChange={event => onDateChange(event, false)}\\n            required\\n            type=\\\"date\\\"\\n          />\\n        </InputContainer>\\n      </Utility>\\n    </Utility>\\n  );\\n};\"},\"name\":\"Stacked date range selector\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Time selectors\",\"url\":\"components/date-and-time-selectors/default-time-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-time-selector';\\n\\nexport const DefaultTimeSelector = () => {\\n  return (\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-time`}>Label (required)</Label>\\n        <InputContainer>\\n          <Input id={`${id}-time`} required type=\\\"time\\\" />\\n        </InputContainer>\\n      </Utility>\\n  );\\n};\\n\"},\"name\":\"Default time selector\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Time selectors\",\"url\":\"components/date-and-time-selectors/read-only-time-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'read-only-time-selector';\\n\\nexport const ReadOnlyTimeSelector = () => {\\n  return (\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-time`}>Label (required)</Label>\\n        <InputContainer>\\n          <Input id={`${id}-time`} required type=\\\"time\\\" readOnly/>\\n        </InputContainer>\\n      </Utility>\\n  );\\n};\\n\"},\"name\":\"Read-only time selector\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Time selectors\",\"url\":\"components/date-and-time-selectors/disabled-time-selector\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-time-selector';\\n\\nexport const DisabledTimeSelector = () => {\\n  return (\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-time`}>Label (required)</Label>\\n        <InputContainer>\\n          <Input id={`${id}-time`} required type=\\\"time\\\" disabled/>\\n        </InputContainer>\\n      </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled time selector\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Time selectors\",\"url\":\"components/date-and-time-selectors/time-selector-with-error\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { useState } from 'react';\\nimport { Button, Input, InputContainer, InputMessage, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'time-selector-with-error';\\n\\nexport const TimeSelectorWithError = () => {\\n  const [errorState, setErrorState] = useState(false);\\n\\n  return (\\n    <>\\n      <Utility vFlex vGap=\\\"4\\\" vFlexCol vFlexGrow>\\n        <Label htmlFor={`${id}-time`}>Label (required)</Label>\\n        <InputContainer>\\n          <Input id={`${id}-time`} required type=\\\"time\\\" aria-invalid={errorState} />\\n        </InputContainer>\\n        {errorState && (\\n          <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\">\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail.\\n          </InputMessage>\\n        )}\\n      </Utility>\\n      <Utility vFlex vGap={12} vMarginTop={16}>\\n        <Button id={`${id}-submit-button`} onClick={() => setErrorState(true)}>\\n          Submit\\n        </Button>\\n        <Button id={`${id}-reset-button`} colorScheme=\\\"secondary\\\" onClick={() => setErrorState(false)}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Time selector with error\"}],\"propertySections\":[{\"order\":1,\"name\":\"input\",\"type\":\"related\",\"selector\":\"<Input />\",\"description\":\"\"}],\"properties\":[]},{\"name\":\"dialog\",\"version\":\"0.0.1\",\"description\":\"Pop-up windows that overlay page content to facilitate user interactions or show important information.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default Dialogs\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Dialogs\",\"url\":\"components/dialog/default-dialog\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'dialog';\\n\\nexport const DefaultDialog = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open default dialog</Button>\\n      <Dialog\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        id={id}\\n        ref={ref}\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${id}-title`}>Default title</DialogHeader>\\n          <Typography id={`${id}-description`}>\\n            This is required text that describes the dialog title in more detail.\\n          </Typography>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={8} vPaddingTop={16}>\\n            <Button>Primary action</Button>\\n            <Button colorScheme=\\\"secondary\\\">Secondary action</Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => ref.current?.close()} />\\n      </Dialog>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Default dialog\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Dialogs\",\"url\":\"components/dialog/error-dialog\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  DialogIcon,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-dialog';\\n\\nexport const ErrorDialog = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open error dialog</Button>\\n      <Dialog\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        id={id}\\n        messageType=\\\"error\\\"\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n        ref={ref}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${id}-title`}>\\n            <DialogIcon />\\n            Error title\\n          </DialogHeader>\\n          <Typography id={`${id}-description`}>\\n            This is required text that describes the dialog title in more detail.\\n          </Typography>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={8} vPaddingTop={16}>\\n            <Button>Primary action</Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => ref.current?.close()} />\\n      </Dialog>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Error dialog\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Dialogs\",\"url\":\"components/dialog/success-dialog\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  DialogIcon,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'success-dialog';\\n\\nexport const SuccessDialog = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open success dialog</Button>\\n      <Dialog\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        ref={ref}\\n        id={id}\\n        messageType=\\\"success\\\"\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${id}-title`}>\\n            <DialogIcon />\\n            Success title\\n          </DialogHeader>\\n          <Typography id={`${id}-description`}>\\n            This is required text that describes the dialog title in more detail.\\n          </Typography>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={8} vPaddingTop={16}>\\n            <Button>Primary action</Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => ref.current?.close()} />\\n      </Dialog>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Success dialog\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Dialogs\",\"url\":\"components/dialog/warning-dialog\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  DialogIcon,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'warning-dialog';\\n\\nexport const WarningDialog = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open warning dialog</Button>\\n      <Dialog\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        ref={ref}\\n        id={id}\\n        messageType=\\\"warning\\\"\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${id}-title`}>\\n            <DialogIcon />\\n            Warning title\\n          </DialogHeader>\\n          <Typography id={`${id}-description`}>\\n            This is required text that describes the dialog title in more detail.\\n          </Typography>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={8} vPaddingTop={16}>\\n            <Button>Primary action</Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => ref.current?.close()} />\\n      </Dialog>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Warning dialog\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Dialogs\",\"url\":\"components/dialog/close-button-dialog\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  Dialog,\\n  DialogContent,\\n  DialogHeader,\\n  DialogIcon,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'no-close-dialog';\\n\\nexport const CloseButtonDialog = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open dialog without close icon</Button>\\n      <Dialog\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        ref={ref}\\n        id={id}\\n        messageType=\\\"error\\\"\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${id}-title`}>\\n            <DialogIcon />\\n            Error title\\n          </DialogHeader>\\n          <Typography id={`${id}-description`}>\\n            This is required text that describes the dialog title in more detail.\\n          </Typography>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={8} vJustifyContent=\\\"end\\\" vPaddingTop={16}>\\n            <Button onClick={() => ref.current?.close()}>Close</Button>\\n          </Utility>\\n        </DialogContent>\\n      </Dialog>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Dialog without close icon button\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default Dialogs\",\"url\":\"components/dialog/touring-tips-dialog\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'touring-tips-dialog';\\n\\nexport const TouringTipsDialog = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  const onCloseDialog = () => ref.current?.close();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open touring tips dialog</Button>\\n      <Dialog\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        ref={ref}\\n        id={id}\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${id}-title`}>Touring tips title</DialogHeader>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexRow vGap={8} vPaddingBottom={8}>\\n            <svg width=\\\"36\\\" height=\\\"36\\\" viewBox=\\\"0 0 36 36\\\" fill=\\\"none\\\">\\n              <rect width=\\\"36\\\" height=\\\"36\\\" rx=\\\"18\\\" fill=\\\"#B3D7FF\\\" fillOpacity=\\\"0.35\\\" />\\n              <path\\n                d=\\\"M17.238 13.856C16.8327 13.856 16.3953 13.936 15.926 14.096C15.4567 14.256 15.03 14.496 14.646 14.816H14.502L14.614 13.136C15.0087 12.88 15.478 12.6827 16.022 12.544C16.566 12.4053 17.0727 12.336 17.542 12.336C18.7473 12.336 19.6913 12.5867 20.374 13.088C21.0673 13.5787 21.414 14.4427 21.414 15.68C21.414 16.256 21.3233 16.784 21.142 17.264C20.9713 17.7333 20.742 18.16 20.454 18.544C20.1767 18.928 19.8833 19.28 19.574 19.6C19.382 19.8133 19.126 20.0747 18.806 20.384C18.486 20.6827 18.1287 21.008 17.734 21.36C17.3393 21.712 16.9393 22.0533 16.534 22.384H21.67L21.526 24H14.406V22.576C15.0247 22.0213 15.5527 21.5467 15.99 21.152C16.438 20.7573 16.8327 20.3947 17.174 20.064C17.5153 19.7333 17.83 19.4027 18.118 19.072C18.502 18.6347 18.8167 18.1493 19.062 17.616C19.318 17.072 19.446 16.5013 19.446 15.904C19.446 15.1467 19.2593 14.6187 18.886 14.32C18.5127 14.0107 17.9633 13.856 17.238 13.856Z\\\"\\n                fill=\\\"black\\\"\\n              />\\n            </svg>\\n            <Typography variant=\\\"body-2-bold\\\">Touring tips instructions</Typography>\\n          </Utility>\\n          <Typography id={`${id}-description`}>\\n            This is required text that describes the dialog title in more detail.\\n          </Typography>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={8} vJustifyContent=\\\"between\\\" vPaddingTop={16}>\\n            <Typography>2 of 4</Typography>\\n            <Utility vFlex vFlexWrap vGap={8} vJustifyContent=\\\"between\\\">\\n              <Button colorScheme=\\\"secondary\\\" onClick={onCloseDialog}>\\n                Previous\\n              </Button>\\n              <Button onClick={onCloseDialog}>Next</Button>\\n            </Utility>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={onCloseDialog} />\\n      </Dialog>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Touring tips dialog\"}],\"propertySections\":[{\"order\":1,\"name\":\"Dialog\",\"selector\":\"<Dialog />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Pop-up windows that overlay page content to facilitate user interactions or show important information.\"},{\"order\":2,\"name\":\"DialogCloseButton\",\"selector\":\"<DialogCloseButton />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Button that appears in dialog pop-up windows to close them.\"},{\"order\":3,\"name\":\"DialogHeader\",\"selector\":\"<DialogHeader />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for the heading area of a dialog pop-up window.\"},{\"order\":4,\"name\":\"MessageContent\",\"selector\":\"<MessageContent />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for message content elements.\"},{\"order\":5,\"name\":\"MessageIcon\",\"selector\":\"<MessageIcon />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Icon to display within message content.\"},{\"order\":6,\"name\":\"useFocusTrap\",\"selector\":null,\"libraryId\":null,\"componentId\":null,\"type\":\"hooks\",\"description\":\"This hook is used to trap focus inside a container.\"}],\"properties\":[{\"name\":\"messageType\",\"section\":\"Dialog\",\"data\":{\"name\":\"messageType\",\"type\":\"\\\"subtle\\\" , \\\"warning\\\" , \\\"error\\\" , \\\"success\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Message Type\"}},{\"name\":\"ref\",\"section\":\"Dialog\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Dialog\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"dialog\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"alternate\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"DialogCloseButton\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"colorScheme\",\"section\":\"DialogHeader\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"default\\\" , \\\"subtle\\\" , \\\"active\\\" , \\\"on-active\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color variant\"}},{\"name\":\"ref\",\"section\":\"DialogHeader\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"DialogHeader\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"h2\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"MessageContent\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"MessageContent\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"element\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element\"}},{\"name\":\"ref\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"divider\",\"version\":\"0.0.1\",\"description\":\"Visual element used to separate and group information on a page.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Examples\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/divider/default-divider\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Divider } from '@visa/nova-react';\\n\\nexport const DefaultDivider = () => {\\n  return <Divider />;\\n};\\n\"},\"name\":\"Default divider\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/divider/section-divider\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Divider } from '@visa/nova-react';\\n\\nexport const SectionDivider = () => {\\n  return <Divider dividerType=\\\"section\\\" />;\\n};\\n\"},\"name\":\"Section divider\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/divider/decorative-divider\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Divider } from '@visa/nova-react';\\n\\nexport const DecorativeDivider = () => {\\n  return <Divider dividerType=\\\"decorative\\\" />;\\n};\\n\"},\"name\":\"Decorative divider\"}],\"propertySections\":[{\"order\":1,\"name\":\"Divider\",\"selector\":\"<Divider />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Visual element used to separate and group information on a page.\"}],\"properties\":[{\"name\":\"dividerType\",\"section\":\"Divider\",\"data\":{\"name\":\"dividerType\",\"type\":\"\\\"section\\\" , \\\"decorative\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Divider Type\"}},{\"name\":\"ref\",\"section\":\"Divider\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"dropdown-menu\",\"version\":\"0.0.1\",\"description\":\"Interactive element enabling users to select a single option from a list.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Text button dropdown menus\",\"description\":\"\",\"order\":1},{\"name\":\"Icon button dropdown menus\",\"description\":\"\",\"order\":2},{\"name\":\"Custom dropdown menus\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Text button dropdown menus\",\"url\":\"components/dropdown-menu/default-dropdown-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { useClick, useFloating, useInteractions } from '@floating-ui/react';\\nimport { VisaChevronDownTiny, VisaChevronUpTiny } from '@visa/nova-icons-react';\\nimport { useState } from 'react';\\nimport { Button, DropdownButton, DropdownMenu, Listbox, UtilityFragment } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'dropdown-menu-default';\\n\\nexport const DefaultDropdownMenu = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const { context, floatingStyles, refs } = useFloating({\\n    open,\\n    onOpenChange: setOpen,\\n    placement: 'bottom-start',\\n  });\\n\\n  const onClick = useClick(context);\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([onClick]);\\n\\n  return (\\n    // This div is not required, it's used to show the whole dropdown menu in the example\\n    <div style={{ blockSize: 250 }}>\\n      <DropdownButton\\n        aria-controls={id}\\n        aria-expanded={open}\\n        id={`${id}-button`}\\n        ref={refs.setReference}\\n        {...getReferenceProps()}\\n      >\\n        Action\\n        {open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n      </DropdownButton>\\n      {open && (\\n        <DropdownMenu\\n          id={id}\\n          aria-hidden={!open}\\n          ref={refs.setFloating}\\n          style={{ inlineSize: '180px', ...floatingStyles }}\\n          {...getFloatingProps()}\\n        >\\n          <UtilityFragment vHide={!open}>\\n            <Listbox>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    Label 1\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    Label 3\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    Label 3\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\">\\n                    Label 4\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n            </Listbox>\\n          </UtilityFragment>\\n        </DropdownMenu>\\n      )}\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Default text button dropdown menu\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon button dropdown menus\",\"url\":\"components/dropdown-menu/icon-dropdown-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { useClick, useFloating, useInteractions } from '@floating-ui/react';\\nimport { VisaOptionHorizontalHigh } from '@visa/nova-icons-react';\\nimport { useState } from 'react';\\nimport { Button, DropdownButton, DropdownMenu, Listbox, UtilityFragment } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'dropdown-menu-icon';\\n\\nexport const IconDropdownMenu = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const { context, floatingStyles, refs } = useFloating({\\n    open,\\n    onOpenChange: setOpen,\\n    placement: 'bottom-start',\\n  });\\n\\n  const onClick = useClick(context);\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([onClick]);\\n\\n  return (\\n    // This div is not required, it's used to show the whole dropdown menu in the example\\n    <div style={{ blockSize: 250 }}>\\n      <DropdownButton\\n        aria-controls={id}\\n        aria-expanded={open}\\n        aria-label=\\\"see more options\\\"\\n        iconButton\\n        id={`${id}-button`}\\n        ref={refs.setReference}\\n        {...getReferenceProps()}\\n      >\\n        <VisaOptionHorizontalHigh />\\n      </DropdownButton>\\n      {open && (\\n        <DropdownMenu\\n          id={id}\\n          aria-hidden={!open}\\n          ref={refs.setFloating}\\n          style={{ inlineSize: '180px', ...floatingStyles }}\\n          {...getFloatingProps()}\\n        >\\n          <UtilityFragment vHide={!open}>\\n            <Listbox>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    Label 1\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    Label 2\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    Label 2\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    Label 4\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n            </Listbox>\\n          </UtilityFragment>\\n        </DropdownMenu>\\n      )}\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Default icon button dropdown menu\"},{\"description\":\"Custom dropdown menu with tabs.\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom dropdown menus\",\"url\":\"components/dropdown-menu/dropdown-menu-with-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { useClick, useFloating, useInteractions } from '@floating-ui/react';\\nimport { VisaOptionHorizontalHigh } from '@visa/nova-icons-react';\\nimport { Button, DropdownButton, DropdownMenu, Tab, Tabs, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'dropdown-menu-with-tabs';\\n\\nexport const DropdownMenuWithTabs = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const { context, floatingStyles, refs } = useFloating({\\n    open,\\n    onOpenChange: setOpen,\\n    placement: 'bottom-start',\\n  });\\n\\n  const onClick = useClick(context);\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([onClick]);\\n\\n  return (\\n    // This div is not required, it's used to show the whole dropdown menu in the example\\n    <div style={{ blockSize: 250 }}>\\n      <DropdownButton\\n        aria-controls={id}\\n        aria-expanded={open}\\n        aria-label=\\\"see more options\\\"\\n        iconButton\\n        id={`${id}-button`}\\n        ref={refs.setReference}\\n        {...getReferenceProps()}\\n      >\\n        <VisaOptionHorizontalHigh />\\n      </DropdownButton>\\n      {open && (\\n        <DropdownMenu\\n          id={id}\\n          ref={refs.setFloating}\\n          style={{ inlineSize: 'max-content', ...floatingStyles }}\\n          {...getFloatingProps()}\\n        >\\n          <UtilityFragment vGap={4} vPaddingVertical={7} vPaddingRight={8} vHide={!open}>\\n            <Tabs orientation=\\\"vertical\\\" role=\\\"tablist\\\">\\n              <Tab role=\\\"none\\\">\\n                <Button aria-selected=\\\"false\\\" colorScheme=\\\"tertiary\\\" role=\\\"tab\\\">\\n                  Label 1\\n                </Button>\\n              </Tab>\\n              <Tab role=\\\"none\\\">\\n                <Button aria-selected=\\\"true\\\" colorScheme=\\\"tertiary\\\" role=\\\"tab\\\">\\n                  Label 2\\n                </Button>\\n              </Tab>\\n              <Tab role=\\\"none\\\">\\n                <Button aria-selected=\\\"false\\\" colorScheme=\\\"tertiary\\\" role=\\\"tab\\\">\\n                  Label 3\\n                </Button>\\n              </Tab>\\n              <Tab role=\\\"none\\\">\\n                <Button aria-selected=\\\"false\\\" colorScheme=\\\"tertiary\\\" role=\\\"tab\\\">\\n                  Label 4\\n                </Button>\\n              </Tab>\\n            </Tabs>\\n          </UtilityFragment>\\n        </DropdownMenu>\\n      )}\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Dropdown menu with tabs\"},{\"description\":\"Custom dropdown menu with leading icons and destructive action.\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom dropdown menus\",\"url\":\"components/dropdown-menu/dropdown-menu-with-leading-icons\",\"tags\":[],\"snippets\":{\"tsx\":\"import { useClick, useFloating, useInteractions } from '@floating-ui/react';\\nimport {\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaDeleteTiny,\\n  VisaExportTiny,\\n  VisaFileDownloadTiny,\\n} from '@visa/nova-icons-react';\\nimport { Button, DropdownButton, DropdownMenu, Listbox, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'dropdown-menu-with-leading-icons';\\n\\nexport const DropdownMenuWithLeadingIcons = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const { context, floatingStyles, refs } = useFloating({\\n    open,\\n    onOpenChange: setOpen,\\n    placement: 'bottom-start',\\n  });\\n\\n  const onClick = useClick(context);\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([onClick]);\\n\\n  return (\\n    // This div is not required, it's used to show the whole dropdown menu in the example\\n    <div style={{ blockSize: 250 }}>\\n      <DropdownButton\\n        aria-controls={id}\\n        aria-expanded={open}\\n        id={`${id}-button`}\\n        ref={refs.setReference}\\n        {...getReferenceProps()}\\n      >\\n        Action\\n        {open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n      </DropdownButton>\\n      {open && (\\n        <DropdownMenu\\n          id={id}\\n          aria-hidden={!open}\\n          ref={refs.setFloating}\\n          style={{ inlineSize: '180px', ...floatingStyles }}\\n          {...getFloatingProps()}\\n        >\\n          <UtilityFragment vHide={!open}>\\n            <Listbox>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    <VisaExportTiny /> Label 1\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    <VisaFileDownloadTiny /> Label 3\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" subtle>\\n                    <VisaFileDownloadTiny /> Label 3\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n              <li>\\n                <UtilityFragment\\n                  vFlex\\n                  vFlexRow\\n                  vAlignItems=\\\"start\\\"\\n                  vGap={6}\\n                  vPaddingHorizontal={8}\\n                  vPaddingVertical={11}\\n                >\\n                  <Button className=\\\"v-listbox-item\\\" colorScheme=\\\"tertiary\\\" destructive>\\n                    <VisaDeleteTiny /> Label 4\\n                  </Button>\\n                </UtilityFragment>\\n              </li>\\n            </Listbox>\\n          </UtilityFragment>\\n        </DropdownMenu>\\n      )}\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Dropdown menu with leading icons and destructive action\"}],\"propertySections\":[{\"order\":1,\"name\":\"DropdownMenu\",\"selector\":\"<DropdownMenu />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Interactive element enabling users to select a single option from a list.\"},{\"order\":2,\"name\":\"DropdownButton\",\"selector\":\"<DropdownButton />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Button used to hide or show the dropdown menu.\"},{\"order\":3,\"name\":\"DropdownContainer\",\"selector\":\"<DropdownContainer />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container that styles the dropdown menu.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"DropdownMenu\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"DropdownMenu\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Scroll\"}},{\"name\":\"alternate\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"DropdownButton\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"ref\",\"section\":\"DropdownContainer\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"DropdownContainer\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of the component\"}}]},{\"name\":\"flag\",\"version\":\"0.0.1\",\"description\":\"Messages that provide low-priority updates about a process or event\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Informational flags\",\"description\":\"\",\"order\":1},{\"name\":\"Success flags\",\"description\":\"\",\"order\":2},{\"name\":\"Warning flags\",\"description\":\"\",\"order\":3},{\"name\":\"Error flags\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational flags\",\"url\":\"components/flag/empty-information-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag } from '@visa/nova-react';\\n\\nexport const EmptyInformationFlag = () => {\\n  return <Flag />;\\n};\\n\"},\"name\":\"Empty informational flag\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational flags\",\"url\":\"components/flag/default-information-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, ScreenReader } from '@visa/nova-react';\\n\\nexport const DefaultInformationFlag = () => {\\n  return (\\n    <Flag>\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n      <ScreenReader>information</ScreenReader>This is required text that describes the flag in more detail.</FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Default informational flag\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational flags\",\"url\":\"components/flag/title-information-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const TitleInformationFlag = () => {\\n  return (\\n    <Flag>\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>information</ScreenReader>\\n        <Typography variant=\\\"body-2-bold\\\">Informational title</Typography>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Informational flag with title\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational flags\",\"url\":\"components/flag/link-information-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Link, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const LinkInformationFlag = () => {\\n  return (\\n    <Flag>\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>information</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Link href=\\\"./flag\\\">Destination label</Link>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Informational flag with link\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational flags\",\"url\":\"components/flag/button-information-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const ButtonInformationFlag = () => {\\n  return (\\n    <Flag>\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>information</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Informational flag with button\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational flags\",\"url\":\"components/flag/persistent-information-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const PersistentInformationFlag = () => {\\n  return (\\n    <Flag>\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>information</ScreenReader>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Informational flag without close icon button\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Success flags\",\"url\":\"components/flag/empty-success-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag } from '@visa/nova-react';\\n\\nexport const EmptySuccessFlag = () => {\\n  return <Flag messageType=\\\"success\\\" />;\\n};\\n\"},\"name\":\"Empty success flag\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Success flags\",\"url\":\"components/flag/default-success-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, ScreenReader } from '@visa/nova-react';\\n\\nexport const DefaultSuccessFlag = () => {\\n  return (\\n    <Flag messageType=\\\"success\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>success</ScreenReader>This is required text that describes the flag in more detail.\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Default success flag\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Success flags\",\"url\":\"components/flag/title-success-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const TitleSuccessFlag = () => {\\n  return (\\n    <Flag messageType=\\\"success\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>success</ScreenReader>\\n        <Typography variant=\\\"body-2-bold\\\">Success title</Typography>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Success flag with title\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Success flags\",\"url\":\"components/flag/link-success-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Link, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const LinkSuccessFlag = () => {\\n  return (\\n    <Flag messageType=\\\"success\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>success</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Link href=\\\"./flag\\\">Destination label</Link>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Success flag with link\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Success flags\",\"url\":\"components/flag/button-success-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const ButtonSuccessFlag = () => {\\n  return (\\n    <Flag messageType=\\\"success\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>success</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Success flag with button\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Success flags\",\"url\":\"components/flag/persistent-success-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const PersistentSuccessFlag = () => {\\n  return (\\n    <Flag messageType=\\\"success\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>success</ScreenReader>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Success flag without close icon button\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning flags\",\"url\":\"components/flag/empty-warning-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag } from '@visa/nova-react';\\n\\nexport const EmptyWarningFlag = () => {\\n  return <Flag messageType=\\\"warning\\\" />;\\n};\\n\"},\"name\":\"Empty warning flag\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning flags\",\"url\":\"components/flag/default-warning-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, ScreenReader } from '@visa/nova-react';\\n\\nexport const DefaultWarningFlag = () => {\\n  return (\\n    <Flag messageType=\\\"warning\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>warning</ScreenReader>This is required text that describes the flag in more detail.</FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Default warning flag\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning flags\",\"url\":\"components/flag/title-warning-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const TitleWarningFlag = () => {\\n  return (\\n    <Flag messageType=\\\"warning\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>warning</ScreenReader>\\n        <Typography variant=\\\"body-2-bold\\\">Warning title</Typography>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Warning flag with title\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning flags\",\"url\":\"components/flag/link-warning-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Link, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const LinkWarningFlag = () => {\\n  return (\\n    <Flag messageType=\\\"warning\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>warning</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Link href=\\\"./flag\\\">Destination label</Link>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Warning flag with link\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning flags\",\"url\":\"components/flag/button-warning-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const ButtonWarningFlag = () => {\\n  return (\\n    <Flag messageType=\\\"warning\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>warning</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Warning flag with button\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning flags\",\"url\":\"components/flag/persistent-warning-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const PersistentWarningFlag = () => {\\n  return (\\n    <Flag messageType=\\\"warning\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>warning</ScreenReader>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Warning flag without close icon button\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Error flags\",\"url\":\"components/flag/empty-error-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag } from '@visa/nova-react';\\n\\nexport const EmptyErrorFlag = () => {\\n  return <Flag messageType=\\\"error\\\" />;\\n};\\n\"},\"name\":\"Empty error flag\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Error flags\",\"url\":\"components/flag/default-error-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, ScreenReader } from '@visa/nova-react';\\n\\nexport const DefaultErrorFlag = () => {\\n  return (\\n    <Flag messageType=\\\"error\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>error</ScreenReader>\\n        This is required text that describes the flag in more detail.</FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Default error flag\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Error flags\",\"url\":\"components/flag/title-error-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const TitleErrorFlag = () => {\\n  return (\\n    <Flag messageType=\\\"error\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>error</ScreenReader>\\n        <Typography variant=\\\"body-2-bold\\\">Error title</Typography>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Error flag with title\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Error flags\",\"url\":\"components/flag/link-error-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagCloseButton, FlagContent, FlagIcon, Link, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const LinkErrorFlag = () => {\\n  return (\\n    <Flag messageType=\\\"error\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>error</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Link href=\\\"./flag\\\">Destination label</Link>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Error flag with link\"},{\"description\":\"\",\"order\":23,\"libraryId\":null,\"componentId\":null,\"section\":\"Error flags\",\"url\":\"components/flag/button-error-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, Flag, FlagCloseButton, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const ButtonErrorFlag = () => {\\n  return (\\n    <Flag messageType=\\\"error\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>error</ScreenReader>\\n        <Typography className=\\\"v-mb-8\\\">This is required text that describes the flag in more detail.</Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </FlagContent>\\n      <FlagCloseButton />\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Error flag with button\"},{\"description\":\"\",\"order\":24,\"libraryId\":null,\"componentId\":null,\"section\":\"Error flags\",\"url\":\"components/flag/persistent-error-flag\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Flag, FlagContent, FlagIcon, Typography, ScreenReader } from '@visa/nova-react';\\n\\nexport const PersistentErrorFlag = () => {\\n  return (\\n    <Flag messageType=\\\"error\\\">\\n      <FlagIcon />\\n      <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n        <ScreenReader>error</ScreenReader>\\n        <Typography>This is required text that describes the flag in more detail.</Typography>\\n      </FlagContent>\\n    </Flag>\\n  );\\n};\\n\"},\"name\":\"Error flag without close icon button\"}],\"propertySections\":[{\"order\":1,\"name\":\"Flag\",\"selector\":\"<Flag />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Messages that provide low-priority updates about a process or event\"},{\"order\":2,\"name\":\"FlagCloseButton\",\"selector\":\"<FlagCloseButton />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Close button to dismiss a flag message.\"},{\"order\":3,\"name\":\"MessageContent\",\"selector\":\"<MessageContent />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for message content elements.\"},{\"order\":4,\"name\":\"MessageIcon\",\"selector\":\"<MessageIcon />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Icon to display within message content.\"}],\"properties\":[{\"name\":\"messageType\",\"section\":\"Flag\",\"data\":{\"name\":\"messageType\",\"type\":\"\\\"subtle\\\" , \\\"warning\\\" , \\\"error\\\" , \\\"success\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Message Type\"}},{\"name\":\"ref\",\"section\":\"Flag\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Flag\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"alternate\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"FlagCloseButton\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"ref\",\"section\":\"MessageContent\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"MessageContent\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"element\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element\"}},{\"name\":\"ref\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"footer\",\"version\":\"0.0.1\",\"description\":\"Content anchored at the bottom of a page to provide important information or links.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Examples\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/footer/default-footer\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"// If you are using Vite to run your application, please follow the instruction on the top of the page.\\nimport { Footer, Link, Utility, VisaLogo } from '@visa/nova-react';\\n\\nexport const DefaultFooter = () => {\\n  return (\\n    <Footer className=\\\"v-gap-15\\\">\\n      <Utility vFlex vMarginRight={1}>\\n        <VisaLogo aria-label=\\\"Visa\\\" />\\n      </Utility>\\n      <Utility vFlex vFlexWrap vFlexGrow vJustifyContent=\\\"between\\\" vGap={42}>\\n        {`Copyright \u00a9 ${new Date().getFullYear()} Visa Inc. All Rights Reserved`}\\n        <Utility tag=\\\"ul\\\" vFlex vFlexWrap vGap={16}>\\n          <li>\\n            <Link href=\\\"/footer\\\">Contact us</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"/footer\\\">Privacy</Link>\\n          </li>\\n          <li>\\n            <Link href=\\\"/footer\\\">Legal/terms and conditions</Link>\\n          </li>\\n        </Utility>\\n      </Utility>\\n    </Footer>\\n  );\\n};\\n\"},\"name\":\"Default footer\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/footer/navigational-footer\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"// If you are using Vite to run your application, please follow the instruction on the top of the page.\\nimport { Footer, Link, Typography, Utility, UtilityFragment, VisaLogo } from '@visa/nova-react';\\n\\nexport const NavigationalFooter = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vGap={24} vPadding={24}>\\n      <Footer>\\n        <Utility vFlex vFlexCol vFlexGrow vFlexShrink0 vGap={24} style={{ flexBasis: 'calc(30% - 32px)' }}>\\n          <VisaLogo aria-label=\\\"Visa\\\" />\\n          <p>\\n            The information furnished here is confidential and to be used solely for the support of clients' Visa\\n            programs. This information shall not be duplicated, published, or disclosed, in whole or in part, without\\n            the prior written permission of Visa.\\n          </p>\\n          <Typography colorScheme=\\\"subtle\\\">Copyright &copy; YYYY-YYYY Visa. All rights reserved.</Typography>\\n        </Utility>\\n        <Utility vFlex vFlexGrow vFlexWrap vGap={24}>\\n          <Utility vFlex vFlexCol vFlexGrow vGap={24} style={{ flexBasis: 'calc(15% - 32px)' }}>\\n            <Typography tag=\\\"h2\\\" variant=\\\"body-2-bold\\\">\\n              Visa Inc.\\n            </Typography>\\n            <Utility tag=\\\"ul\\\" vFlex vFlexCol vGap={16}>\\n              <li>\\n                <Link href=\\\"./footer\\\">Privacy</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">Terms of use</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">About Visa</Link>\\n              </li>\\n            </Utility>\\n          </Utility>\\n          <Utility vFlex vFlexCol vFlexGrow vGap={24} style={{ flexBasis: 'calc(15% - 32px)' }}>\\n            <Typography tag=\\\"h2\\\" variant=\\\"body-2-bold\\\">\\n              Support\\n            </Typography>\\n            <Utility tag=\\\"ul\\\" vFlex vFlexCol vGap={16}>\\n              <li>\\n                <Link href=\\\"./footer\\\">FAQs</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">Feedback/Contact Us</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">Online help</Link>\\n              </li>\\n            </Utility>\\n          </Utility>\\n          <Utility vFlex vFlexCol vFlexGrow vGap={24} style={{ flexBasis: 'calc(15% - 32px)' }}>\\n            <Typography tag=\\\"h2\\\" variant=\\\"body-2-bold\\\">\\n              Update profile\\n            </Typography>\\n            <Utility tag=\\\"ul\\\" vFlex vFlexCol vGap={16}>\\n              <li>\\n                <Link href=\\\"./footer\\\">My information</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">My security</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">My services</Link>\\n              </li>\\n            </Utility>\\n          </Utility>\\n          <Utility vFlex vFlexCol vFlexGrow vGap={24} style={{ flexBasis: 'calc(15% - 32px)' }}>\\n            <Typography tag=\\\"h2\\\" variant=\\\"body-2-bold\\\">\\n              Site index\\n            </Typography>\\n            <Utility tag=\\\"ul\\\" vFlex vFlexCol vGap={16}>\\n              <li>\\n                <Link href=\\\"./footer\\\">Alphabetized index</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">Site map</Link>\\n              </li>\\n              <li>\\n                <Link href=\\\"./footer\\\">Topic index</Link>\\n              </li>\\n            </Utility>\\n          </Utility>\\n        </Utility>\\n      </Footer>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Navigational footer\"}],\"propertySections\":[{\"order\":1,\"name\":\"Footer\",\"selector\":\"<Footer />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Content anchored at the bottom of a page to provide important information or links.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Footer\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Footer\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"footer\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"horizontal-navigation\",\"version\":\"0.0.1\",\"description\":\"Menu or panel at the top of page content that links to important pages or features.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default horizontal navigations\",\"description\":\"\",\"order\":1},{\"name\":\"Horizontal navigations with persistent search\",\"description\":\"\",\"order\":2}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default horizontal navigations\",\"url\":\"components/horizontal-navigation/default-horizontal-nav\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  offset,\\n  FloatingFocusManager,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseLow,\\n  VisaCloseTiny,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nconst label3SubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-label-3-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-label-3-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const DefaultHorizontalNav = () => {\\n  const searchInputRef = useRef<HTMLInputElement | null>();\\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\\n  const [expandSearch, setExpandSearch] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const [label3Open, setLabel3Open] = useState(false);\\n  const searchInitiallyActivated = useRef(false);\\n\\n  useEffect(() => {\\n    if (expandSearch && searchInitiallyActivated.current) {\\n      searchInputRef.current?.focus();\\n    }\\n    if (!expandSearch && searchInitiallyActivated.current) {\\n      searchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n  \\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  // floating-ui setup for the label3 tab dropdown\\n  const {\\n    context: label3FloatingContext,\\n    floatingStyles: label3FloatingStyles,\\n    refs: label3FloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(8)],\\n    open: label3Open,\\n    onOpenChange: setLabel3Open,\\n    placement: 'bottom-start',\\n    whileElementsMounted: autoUpdate,\\n  });\\n\\n  const clickLabel3Ref = useClick(label3FloatingContext);\\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\\n    clickLabel3Ref,\\n    dismissLabel3Menu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-label=\\\"open menu\\\"\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                        tag=\\\"sup\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"end\\\" vFlexGrow vMarginLeft=\\\"auto\\\" vContainerHide=\\\"mobile\\\">\\n                <nav aria-label=\\\"Label for horizontal default example\\\">\\n                  <UtilityFragment vGap={4}>\\n                    <Tabs>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <DropdownButton\\n                          aria-expanded={label3Open}\\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\\n                          id={`${id}-label-dropdown-button`}\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          ref={label3FloatingRefs.setReference}\\n                          {...getLabel3ReferenceProps()}\\n                        >\\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </DropdownButton>\\n\\n                        {label3Open && (\\n                          <FloatingFocusManager\\n                            context={label3FloatingContext}\\n                            modal={false}\\n                            initialFocus={-1}\\n                            restoreFocus={true}\\n                          >\\n                            <DropdownMenu\\n                              id={`${id}-label-dropdown-menu`}\\n                              aria-hidden={!label3Open}\\n                              style={\\n                                {\\n                                  inlineSize: '180px',\\n                                  position: 'absolute',\\n                                  ...label3FloatingStyles,\\n                                  zIndex: 1,\\n                                } as CSSProperties\\n                              }\\n                              ref={label3FloatingRefs.setFloating}\\n                              {...getLabel3FloatingProps()}\\n                            >\\n                              <Listbox>\\n                                {label3SubItems.map(label3SubItem => (\\n                                  <li key={label3SubItem.id}>\\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                      <ListboxItem href={label3SubItem.href} tag=\\\"a\\\">\\n                                        {label3SubItem.tabLabel}\\n                                      </ListboxItem>\\n                                    </UtilityFragment>\\n                                  </li>\\n                                ))}\\n                              </Listbox>\\n                            </DropdownMenu>\\n                          </FloatingFocusManager>\\n                        )}\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </nav>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <Button\\n                  aria-label=\\\"search site\\\"\\n                  buttonSize=\\\"large\\\"\\n                  ref={searchButtonRef}\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\\n\\n                >\\n                  <VisaSearchLow />\\n                </Button>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\" tag=\\\"sup\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={searchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          aria-label=\\\"Label for horizontal default example\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                aria-expanded={mobileLabel3MenuOpen}\\n                aria-controls={mobileLabel3MenuOpen ? `${id}-account-sub-menu` : 'undefined'}\\n                id={`${id}-mobile-menu-label-dropdown-button`}\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\\n              >\\n                L1 Label 3\\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n\\n              {mobileLabel3MenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {label3SubItems.map(label3SubItem => (\\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge badgeVariant=\\\"number\\\" style={{ position: 'relative' }} tag=\\\"sup\\\">\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Default horizontal navigation\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default horizontal navigations\",\"url\":\"components/horizontal-navigation/active-element-horizontal-nav\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseLow,\\n  VisaCloseTiny,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'active-element-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nconst label3SubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-label-3-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-label-3-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const ActiveElementHorizontalNav = () => {\\n  const searchInputRef = useRef<HTMLInputElement | null>();\\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\\n  const [expandSearch, setExpandSearch] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const [label3Open, setLabel3Open] = useState(false);\\n  const searchInitiallyActivated = useRef(false);\\n\\n  useEffect(() => {\\n    if (expandSearch && searchInitiallyActivated.current) {\\n      searchInputRef.current?.focus();\\n    }\\n    if (!expandSearch && searchInitiallyActivated.current) {\\n      searchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  // floating-ui setup for the label3 tab dropdown\\n  const {\\n    context: label3FloatingContext,\\n    floatingStyles: label3FloatingStyles,\\n    refs: label3FloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: label3Open,\\n    onOpenChange: setLabel3Open,\\n    placement: 'bottom-start',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickLabel3Ref = useClick(label3FloatingContext);\\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\\n    clickLabel3Ref,\\n    dismissLabel3Menu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                        tag=\\\"sup\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"end\\\" vFlexGrow vMarginLeft=\\\"auto\\\" vContainerHide=\\\"mobile\\\">\\n                <nav aria-label=\\\"Label for horizontal example with active element\\\">\\n                  <UtilityFragment vGap={4}>\\n                    <Tabs>\\n                      <Tab>\\n                        <Button\\n                          aria-current=\\\"page\\\"\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <DropdownButton\\n                          aria-expanded={label3Open}\\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\\n                          id={`${id}-label-dropdown-button`}\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          ref={label3FloatingRefs.setReference}\\n                          {...getLabel3ReferenceProps()}\\n                        >\\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </DropdownButton>\\n                        {label3Open && (\\n                          <FloatingFocusManager\\n                            context={label3FloatingContext}\\n                            modal={false}\\n                            initialFocus={-1}\\n                            restoreFocus={true}\\n                          >\\n                            <DropdownMenu\\n                              id={`${id}-label-dropdown-menu`}\\n                              aria-hidden={!label3Open}\\n                              style={\\n                                {\\n                                  inlineSize: '180px',\\n                                  position: 'absolute',\\n                                  ...label3FloatingStyles,\\n                                  zIndex: 1,\\n                                } as CSSProperties\\n                              }\\n                              ref={label3FloatingRefs.setFloating}\\n                              {...getLabel3FloatingProps()}\\n                            >\\n                              <Listbox>\\n                                {label3SubItems.map(label3SubItem => (\\n                                  <li key={label3SubItem.id}>\\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                      <ListboxItem href={label3SubItem.href} tag=\\\"a\\\">\\n                                        {label3SubItem.tabLabel}\\n                                      </ListboxItem>\\n                                    </UtilityFragment>\\n                                  </li>\\n                                ))}\\n                              </Listbox>\\n                            </DropdownMenu>\\n                          </FloatingFocusManager>\\n                        )}\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </nav>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <Button\\n                  aria-label=\\\"search site\\\"\\n                  buttonSize=\\\"large\\\"\\n                  ref={searchButtonRef}\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\\n                >\\n                  <VisaSearchLow />\\n                </Button>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\" tag=\\\"sup\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={searchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          aria-label=\\\"Label for horizontal example with active element\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileLabel3MenuOpen}\\n                aria-controls={mobileLabel3MenuOpen ? `${id}-account-sub-menu` : 'undefined'}\\n                id={`${id}-mobile-menu-label-dropdown-button`}\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\\n              >\\n                L1 Label 3\\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n\\n              {mobileLabel3MenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {label3SubItems.map(label3SubItem => (\\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge badgeVariant=\\\"number\\\" style={{ position: 'relative' }} tag=\\\"sup\\\">\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Horizontal navigation with active element\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default horizontal navigations\",\"url\":\"components/horizontal-navigation/horizontal-with-icons\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\n\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseLow,\\n  VisaCloseTiny,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n  VisaSecurityTiny,\\n  VisaSettingsTiny,\\n  VisaStatisticsTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nconst label3SubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-label-3-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-label-3-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const DefaultHorizontalNav = () => {\\n  const searchInputRef = useRef<HTMLInputElement | null>();\\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\\n  const [expandSearch, setExpandSearch] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const [label3Open, setLabel3Open] = useState(false);\\n  const searchInitiallyActivated = useRef(false);\\n\\n  useEffect(() => {\\n    if (expandSearch && searchInitiallyActivated.current) {\\n      searchInputRef.current?.focus();\\n    }\\n    if (!expandSearch && searchInitiallyActivated.current) {\\n      searchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  // floating-ui setup for the label3 tab dropdown\\n  const {\\n    context: label3FloatingContext,\\n    floatingStyles: label3FloatingStyles,\\n    refs: label3FloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: label3Open,\\n    onOpenChange: setLabel3Open,\\n    placement: 'bottom-start',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickLabel3Ref = useClick(label3FloatingContext);\\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\\n    clickLabel3Ref,\\n    dismissLabel3Menu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                        tag=\\\"sup\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"end\\\" vFlexGrow vMarginLeft=\\\"auto\\\" vContainerHide=\\\"mobile\\\">\\n                <nav aria-label=\\\"Label for horizontal example with icons\\\">\\n                  <UtilityFragment vGap={4}>\\n                    <Tabs>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">{<VisaStatisticsTiny />}L1 label 1</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">{<VisaSettingsTiny />}L1 label 2</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <DropdownButton\\n                          aria-expanded={label3Open}\\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\\n                          id={`${id}-label-dropdown-button`}\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          ref={label3FloatingRefs.setReference}\\n                          {...getLabel3ReferenceProps()}\\n                        >\\n                          <VisaSecurityTiny />\\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </DropdownButton>\\n\\n                        {label3Open && (\\n                          <FloatingFocusManager\\n                            context={label3FloatingContext}\\n                            modal={false}\\n                            initialFocus={-1}\\n                            restoreFocus={true}\\n                          >\\n                            <DropdownMenu\\n                              id={`${id}-label-dropdown-menu`}\\n                              aria-hidden={!label3Open}\\n                              style={\\n                                {\\n                                  inlineSize: '180px',\\n                                  position: 'absolute',\\n                                  ...label3FloatingStyles,\\n                                  zIndex: 1,\\n                                } as CSSProperties\\n                              }\\n                              ref={label3FloatingRefs.setFloating}\\n                              {...getLabel3FloatingProps()}\\n                            >\\n                              <Listbox>\\n                                {label3SubItems.map(label3SubItem => (\\n                                  <li key={label3SubItem.id}>\\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                      <ListboxItem href={label3SubItem.href} tag=\\\"a\\\">\\n                                        {label3SubItem.tabLabel}\\n                                      </ListboxItem>\\n                                    </UtilityFragment>\\n                                  </li>\\n                                ))}\\n                              </Listbox>\\n                            </DropdownMenu>\\n                          </FloatingFocusManager>\\n                        )}\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </nav>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <Button\\n                  aria-label=\\\"search site\\\"\\n                  buttonSize=\\\"large\\\"\\n                  ref={searchButtonRef}\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\\n                >\\n                  <VisaSearchLow />\\n                </Button>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    aria-label=\\\"notifications\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\" tag=\\\"sup\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={searchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          aria-label=\\\"Label for horizontal example with icons\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                aria-expanded={mobileLabel3MenuOpen}\\n                aria-controls={mobileLabel3MenuOpen ? `${id}-account-sub-menu` : 'undefined'}\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\\n              >\\n                L1 Label 3\\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n\\n              {mobileLabel3MenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {label3SubItems.map(label3SubItem => (\\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge badgeVariant=\\\"number\\\" style={{ position: 'relative' }} tag=\\\"sup\\\">\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Horizontal navigation with icons\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default horizontal navigations\",\"url\":\"components/horizontal-navigation/alternate-horizontal-nav\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseLow,\\n  VisaCloseTiny,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nconst label3SubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-label-3-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-label-3-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const AlternateHorizontalNav = () => {\\n  const searchInputRef = useRef<HTMLInputElement | null>();\\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\\n  const [expandSearch, setExpandSearch] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const [label3Open, setLabel3Open] = useState(false);\\n  const searchInitiallyActivated = useRef(false);\\n\\n  useEffect(() => {\\n    if (expandSearch && searchInitiallyActivated.current) {\\n      searchInputRef.current?.focus();\\n    }\\n    if (!expandSearch && searchInitiallyActivated.current) {\\n      searchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  // floating-ui setup for the label3 tab dropdown\\n  const {\\n    context: label3FloatingContext,\\n    floatingStyles: label3FloatingStyles,\\n    refs: label3FloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: label3Open,\\n    onOpenChange: setLabel3Open,\\n    placement: 'bottom-start',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickLabel3Ref = useClick(label3FloatingContext);\\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\\n    clickLabel3Ref,\\n    dismissLabel3Menu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link alternate skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} alternate orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                        tag=\\\"sup\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"end\\\" vFlexGrow vMarginLeft=\\\"auto\\\" vContainerHide=\\\"mobile\\\">\\n                <nav aria-label=\\\"Label for alternate horizontal example\\\">\\n                  <UtilityFragment vGap={4}>\\n                    <Tabs>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <DropdownButton\\n                          aria-expanded={label3Open}\\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\\n                          id={`${id}-label-dropdown-button`}\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          ref={label3FloatingRefs.setReference}\\n                          {...getLabel3ReferenceProps()}\\n                        >\\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </DropdownButton>\\n\\n                        {label3Open && (\\n                          <FloatingFocusManager\\n                            context={label3FloatingContext}\\n                            modal={false}\\n                            initialFocus={-1}\\n                            restoreFocus={true}\\n                          >\\n                            <DropdownMenu\\n                              id={`${id}-label-dropdown-menu`}\\n                              aria-hidden={!label3Open}\\n                              style={\\n                                {\\n                                  inlineSize: '180px',\\n                                  position: 'absolute',\\n                                  ...label3FloatingStyles,\\n                                  zIndex: 1,\\n                                } as CSSProperties\\n                              }\\n                              ref={label3FloatingRefs.setFloating}\\n                              {...getLabel3FloatingProps()}\\n                            >\\n                              <Listbox>\\n                                {label3SubItems.map(label3SubItem => (\\n                                  <li key={label3SubItem.id}>\\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                      <ListboxItem href={label3SubItem.href} tag=\\\"a\\\">\\n                                        {label3SubItem.tabLabel}\\n                                      </ListboxItem>\\n                                    </UtilityFragment>\\n                                  </li>\\n                                ))}\\n                              </Listbox>\\n                            </DropdownMenu>\\n                          </FloatingFocusManager>\\n                        )}\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </nav>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <Button\\n                  aria-label=\\\"search site\\\"\\n                  ref={searchButtonRef}\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\\n                >\\n                  <VisaSearchLow />\\n                </Button>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\" tag=\\\"sup\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={searchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          alternate\\n          aria-label=\\\"Label for alternate horizontal example\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                aria-expanded={mobileLabel3MenuOpen}\\n                aria-controls={mobileLabel3MenuOpen ? `${id}-account-sub-menu` : 'undefined'}\\n                id={`${id}-mobile-menu-label-dropdown-button`}\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\\n              >\\n                L1 Label 3\\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n\\n              {mobileLabel3MenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {label3SubItems.map(label3SubItem => (\\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge\\n                  badgeVariant=\\\"number\\\"\\n                  style={\\n                    {\\n                      position: 'relative',\\n                    } as CSSProperties\\n                  }\\n                  tag=\\\"sup\\\"\\n                >\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Alternate horizontal navigation\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default horizontal navigations\",\"url\":\"components/horizontal-navigation/alternate-active-element-horizontal-nav\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseLow,\\n  VisaCloseTiny,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-active-element-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nconst label3SubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-label-3-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-label-3-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const AlternateActiveElementHorizontalNav = () => {\\n  const searchInputRef = useRef<HTMLInputElement | null>();\\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\\n  const [expandSearch, setExpandSearch] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const [label3Open, setLabel3Open] = useState(false);\\n  const searchInitiallyActivated = useRef(false);\\n\\n  useEffect(() => {\\n    if (expandSearch && searchInitiallyActivated.current) {\\n      searchInputRef.current?.focus();\\n    }\\n    if (!expandSearch && searchInitiallyActivated.current) {\\n      searchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  // floating-ui setup for the label3 tab dropdown\\n  const {\\n    context: label3FloatingContext,\\n    floatingStyles: label3FloatingStyles,\\n    refs: label3FloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: label3Open,\\n    onOpenChange: setLabel3Open,\\n    placement: 'bottom-start',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickLabel3Ref = useClick(label3FloatingContext);\\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\\n    clickLabel3Ref,\\n    dismissLabel3Menu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link alternate skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} alternate orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                        tag=\\\"sup\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"end\\\" vFlexGrow vMarginLeft=\\\"auto\\\" vContainerHide=\\\"mobile\\\">\\n                <nav aria-label=\\\"Label for alternate horizontal example with active element\\\">\\n                  <UtilityFragment vGap={4}>\\n                    <Tabs>\\n                      <Tab>\\n                        <Button\\n                          aria-current=\\\"page\\\"\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <DropdownButton\\n                          aria-expanded={label3Open}\\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\\n                          id={`${id}-label-dropdown-button`}\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          ref={label3FloatingRefs.setReference}\\n                          {...getLabel3ReferenceProps()}\\n                        >\\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </DropdownButton>\\n\\n                        {label3Open && (\\n                          <FloatingFocusManager\\n                            context={label3FloatingContext}\\n                            modal={false}\\n                            initialFocus={-1}\\n                            restoreFocus={true}\\n                          >\\n                            <DropdownMenu\\n                              id={`${id}-label-dropdown-menu`}\\n                              aria-hidden={!label3Open}\\n                              style={\\n                                {\\n                                  inlineSize: '180px',\\n                                  position: 'absolute',\\n                                  ...label3FloatingStyles,\\n                                  zIndex: 1,\\n                                } as CSSProperties\\n                              }\\n                              ref={label3FloatingRefs.setFloating}\\n                              {...getLabel3FloatingProps()}\\n                            >\\n                              <Listbox>\\n                                {label3SubItems.map(label3SubItem => (\\n                                  <li key={label3SubItem.id}>\\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                      <ListboxItem href={label3SubItem.href} tag=\\\"a\\\">\\n                                        {label3SubItem.tabLabel}\\n                                      </ListboxItem>\\n                                    </UtilityFragment>\\n                                  </li>\\n                                ))}\\n                              </Listbox>\\n                            </DropdownMenu>\\n                          </FloatingFocusManager>\\n                        )}\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </nav>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <Button\\n                  aria-label=\\\"search site\\\"\\n                  buttonSize=\\\"large\\\"\\n                  ref={searchButtonRef}\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\\n                >\\n                  <VisaSearchLow />\\n                </Button>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\" tag=\\\"sup\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={searchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          alternate\\n          aria-label=\\\"Label for alternate horizontal example with active element\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                aria-expanded={mobileLabel3MenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                id={`${id}-mobile-menu-label-dropdown-button`}\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\\n              >\\n                L1 Label 3\\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileLabel3MenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {label3SubItems.map(label3SubItem => (\\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 3</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge badgeVariant=\\\"number\\\" style={{ position: 'relative' }} tag=\\\"sup\\\">\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Alternate horizontal navigation with active element\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default horizontal navigations\",\"url\":\"components/horizontal-navigation/alternate-horizontal-with-icons\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\n\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseLow,\\n  VisaCloseTiny,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n  VisaSecurityTiny,\\n  VisaSettingsTiny,\\n  VisaStatisticsTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-horizontal-nav-with-icons';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nconst label3SubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-label-3-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-label-3-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const AlternateHorizontalNavWithIcons = () => {\\n  const searchInputRef = useRef<HTMLInputElement | null>();\\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\\n  const [expandSearch, setExpandSearch] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const [label3Open, setLabel3Open] = useState(false);\\n  const searchInitiallyActivated = useRef(false);\\n\\n  useEffect(() => {\\n    if (expandSearch && searchInitiallyActivated.current) {\\n      searchInputRef.current?.focus();\\n    }\\n    if (!expandSearch && searchInitiallyActivated.current) {\\n      searchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  // floating-ui setup for the label3 tab dropdown\\n  const {\\n    context: label3FloatingContext,\\n    floatingStyles: label3FloatingStyles,\\n    refs: label3FloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: label3Open,\\n    onOpenChange: setLabel3Open,\\n    placement: 'bottom-start',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickLabel3Ref = useClick(label3FloatingContext);\\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\\n    clickLabel3Ref,\\n    dismissLabel3Menu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link alternate skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} alternate orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                        tag=\\\"sup\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"end\\\" vFlexGrow vMarginLeft=\\\"auto\\\" vContainerHide=\\\"mobile\\\">\\n                <nav aria-label=\\\"Label for alternate horizontal example with icons\\\">\\n                  <UtilityFragment vGap={4}>\\n                    <Tabs>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">{<VisaStatisticsTiny />}L1 label 1</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">{<VisaSettingsTiny />}L1 label 2</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <DropdownButton\\n                          aria-expanded={label3Open}\\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\\n                          id={`${id}-label-dropdown-button`}\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          ref={label3FloatingRefs.setReference}\\n                          {...getLabel3ReferenceProps()}\\n                        >\\n                          <VisaSecurityTiny />\\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </DropdownButton>\\n\\n                        {label3Open && (\\n                          <FloatingFocusManager\\n                            context={label3FloatingContext}\\n                            modal={false}\\n                            initialFocus={-1}\\n                            restoreFocus={true}\\n                          >\\n                            <DropdownMenu\\n                              id={`${id}-label-dropdown-menu`}\\n                              aria-hidden={!label3Open}\\n                              style={\\n                                {\\n                                  inlineSize: '180px',\\n                                  position: 'absolute',\\n                                  ...label3FloatingStyles,\\n                                  zIndex: 1,\\n                                } as CSSProperties\\n                              }\\n                              ref={label3FloatingRefs.setFloating}\\n                              {...getLabel3FloatingProps()}\\n                            >\\n                              <Listbox>\\n                                {label3SubItems.map(label3SubItem => (\\n                                  <li key={label3SubItem.id}>\\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                      <ListboxItem href={label3SubItem.href} tag=\\\"a\\\">\\n                                        {label3SubItem.tabLabel}\\n                                      </ListboxItem>\\n                                    </UtilityFragment>\\n                                  </li>\\n                                ))}\\n                              </Listbox>\\n                            </DropdownMenu>\\n                          </FloatingFocusManager>\\n                        )}\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </nav>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <Button\\n                  aria-label=\\\"search site\\\"\\n                  buttonSize=\\\"large\\\"\\n                  ref={searchButtonRef}\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\\n                >\\n                  <VisaSearchLow />\\n                </Button>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\" tag=\\\"sup\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={searchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          alternate\\n          aria-label=\\\"Label for alternate horizontal example with icons\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                aria-expanded={mobileLabel3MenuOpen}\\n                aria-controls={mobileLabel3MenuOpen ? `${id}-account-sub-menu` : 'undefined'}\\n                id={`${id}-mobile-menu-label-dropdown-button`}\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\\n              >\\n                L1 Label 3\\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n\\n              {mobileLabel3MenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {label3SubItems.map(label3SubItem => (\\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge\\n                  badgeVariant=\\\"number\\\"\\n                  tag=\\\"sup\\\"\\n                  style={\\n                    {\\n                      position: 'relative',\\n                    } as CSSProperties\\n                  }\\n                >\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Alternate horizontal navigation with icons\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default horizontal navigations\",\"url\":\"components/horizontal-navigation/stacked-horizontal-nav\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseLow,\\n  VisaCloseTiny,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'stacked-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const StackedHorizontalNav = () => {\\n  const searchInputRef = useRef<HTMLInputElement | null>();\\n  const searchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [expandSearch, setExpandSearch] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const searchInitiallyActivated = useRef(false);\\n\\n  useEffect(() => {\\n    if (expandSearch && searchInitiallyActivated.current) {\\n      searchInputRef.current?.focus();\\n    }\\n    if (!expandSearch && searchInitiallyActivated.current) {\\n      searchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <Button\\n                  aria-label=\\\"search site\\\"\\n                  buttonSize=\\\"large\\\"\\n                  ref={searchButtonRef}\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => { setExpandSearch(true); searchInitiallyActivated.current = true; }}\\n                >\\n                  <VisaSearchLow />\\n                </Button>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={searchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <Nav\\n        aria-label=\\\"Label for horizontal example with stacked menu\\\"\\n        className=\\\"v-ml-auto v-mobile-container-hide\\\"\\n        style={\\n          {\\n            '--v-surface-background': 'var(--palette-default-surface-2)',\\n            '--v-tabs-active-line-padding': 'var(--size-responsive-10)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Tabs className=\\\"v-gap-8\\\">\\n          <Tab>\\n            <Button\\n              buttonSize=\\\"large\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n            />\\n          </Tab>\\n          <Tab>\\n            <Button\\n              buttonSize=\\\"large\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n            />\\n          </Tab>\\n          <Tab>\\n            <Button\\n              buttonSize=\\\"large\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              element={<a href=\\\"./horizontal-navigation\\\">L1 label 3</a>}\\n            />\\n          </Tab>\\n        </Tabs>\\n      </Nav>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          aria-label=\\\"Label for horizontal example with stacked menu\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 3</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge badgeVariant=\\\"number\\\" style={{ position: 'relative' }}>\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Stacked horizontal navigation\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Horizontal navigations with persistent search\",\"url\":\"components/horizontal-navigation/search-persistent-horizontal-nav\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseTiny,\\n  VisaCloseLow,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useEffect, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'search-persistent-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nconst label3SubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-label-3-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-label-3-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const SearchPersistentHorizontalNav = () => {\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileLabel3MenuOpen, setMobileLabel3MenuOpen] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n  const [label3Open, setLabel3Open] = useState(false);\\n\\n  const mobileSearchInputRef = useRef<HTMLInputElement | null>();\\n  const mobileSearchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [expandSearch, setExpandSearch] = useState(false);\\n\\n  useEffect(() => {\\n    if (expandSearch) {\\n      mobileSearchInputRef.current?.focus();\\n    }\\n    if (!expandSearch) {\\n      mobileSearchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  // floating-ui setup for the label3 tab dropdown\\n  const {\\n    context: label3FloatingContext,\\n    floatingStyles: label3FloatingStyles,\\n    refs: label3FloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: label3Open,\\n    onOpenChange: setLabel3Open,\\n    placement: 'bottom-start',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickLabel3Ref = useClick(label3FloatingContext);\\n  const dismissLabel3Menu = useDismiss(label3FloatingContext);\\n  const { getReferenceProps: getLabel3ReferenceProps, getFloatingProps: getLabel3FloatingProps } = useInteractions([\\n    clickLabel3Ref,\\n    dismissLabel3Menu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                        tag=\\\"sup\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vJustifyContent=\\\"end\\\" vFlexGrow vMarginLeft=\\\"auto\\\" vContainerHide=\\\"mobile\\\">\\n                <nav aria-label=\\\"Label for horizontal example with persistent search\\\">\\n                  <UtilityFragment vGap={4}>\\n                    <Tabs>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n                        />\\n                      </Tab>\\n                      <Tab>\\n                        <DropdownButton\\n                          aria-expanded={label3Open}\\n                          aria-controls={label3Open ? `${id}-label-dropdown-menu` : undefined}\\n                          id={`${id}-label-dropdown-button`}\\n                          buttonSize=\\\"large\\\"\\n                          colorScheme=\\\"tertiary\\\"\\n                          ref={label3FloatingRefs.setReference}\\n                          {...getLabel3ReferenceProps()}\\n                        >\\n                          L1 label 3<TabSuffix element={label3Open ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </DropdownButton>\\n\\n                        {label3Open && (\\n                          <FloatingFocusManager\\n                            context={label3FloatingContext}\\n                            modal={false}\\n                            initialFocus={-1}\\n                            restoreFocus={true}\\n                          >\\n                            <DropdownMenu\\n                              id={`${id}-label-dropdown-menu`}\\n                              aria-hidden={!label3Open}\\n                              style={\\n                                {\\n                                  inlineSize: '180px',\\n                                  position: 'absolute',\\n                                  ...label3FloatingStyles,\\n                                  zIndex: 1,\\n                                } as CSSProperties\\n                              }\\n                              ref={label3FloatingRefs.setFloating}\\n                              {...getLabel3FloatingProps()}\\n                            >\\n                              <Listbox>\\n                                {label3SubItems.map(label3SubItem => (\\n                                  <li key={label3SubItem.id}>\\n                                    <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                      <ListboxItem href={label3SubItem.href} tag=\\\"a\\\">\\n                                        {label3SubItem.tabLabel}\\n                                      </ListboxItem>\\n                                    </UtilityFragment>\\n                                  </li>\\n                                ))}\\n                              </Listbox>\\n                            </DropdownMenu>\\n                          </FloatingFocusManager>\\n                        )}\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </nav>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <UtilityFragment vFlexRow vContainerHide=\\\"mobile\\\">\\n                  <InputContainer>\\n                    <VisaSearchLow />\\n                    <Input\\n                      id={`${id}-search-field`}\\n                      name={`${id}-search-field`}\\n                      required\\n                      type=\\\"search\\\"\\n                      aria-label=\\\"Search\\\"\\n                      placeholder=\\\"Search\\\"\\n                    />\\n                  </InputContainer>\\n                </UtilityFragment>\\n                <UtilityFragment vFlexRow vContainerHide=\\\"desktop\\\">\\n                  <Button\\n                    aria-label=\\\"search site\\\"\\n                    buttonSize=\\\"large\\\"\\n                    ref={mobileSearchButtonRef}\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                    onClick={() => {\\n                      setExpandSearch(true);\\n                    }}\\n                  >\\n                    <VisaSearchLow />\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\" tag=\\\"sup\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\" vPaddingBottom={0}>\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={mobileSearchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          aria-label=\\\"Label for horizontal example with persistent search\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                aria-expanded={mobileLabel3MenuOpen}\\n                aria-controls={mobileLabel3MenuOpen ? `${id}-account-sub-menu` : 'undefined'}\\n                id={`${id}-mobile-menu-label-dropdown-button`}\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileLabel3MenuOpen(!mobileLabel3MenuOpen)}\\n              >\\n                L1 Label 3\\n                <TabSuffix element={mobileLabel3MenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n\\n              {mobileLabel3MenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {label3SubItems.map(label3SubItem => (\\n                    <Tab key={label3SubItem.id} id={label3SubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={label3SubItem.href}>{label3SubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge badgeVariant=\\\"number\\\" style={{ position: 'relative' }} tag=\\\"sup\\\">\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Default horizontal navigation with persistent search\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Horizontal navigations with persistent search\",\"url\":\"components/horizontal-navigation/stacked-search-persistent-horizontal-nav\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  autoUpdate,\\n  FloatingFocusManager,\\n  offset,\\n  useClick,\\n  useFloating,\\n  useInteractions,\\n  useDismiss,\\n} from '@floating-ui/react';\\nimport {\\n  VisaAccountLow,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseTiny,\\n  VisaCloseLow,\\n  VisaMenuLow,\\n  VisaNotificationsLow,\\n  VisaSearchLow,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Avatar,\\n  Badge,\\n  Button,\\n  Divider,\\n  DropdownButton,\\n  DropdownMenu,\\n  Input,\\n  InputContainer,\\n  Link,\\n  Listbox,\\n  ListboxItem,\\n  Nav,\\n  NavAppName,\\n  Surface,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useEffect, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'stacked-search-persistent-horizontal-nav';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './horizontal-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './horizontal-navigation',\\n  },\\n];\\n\\nexport const StackedSearchPersistentHorizontalNav = () => {\\n  const [accountMenuOpen, setAccountMenuOpen] = useState(false);\\n  const [mobileAccountMenuOpen, setMobileAccountMenuOpen] = useState(false);\\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\\n\\n  const mobileSearchInputRef = useRef<HTMLInputElement | null>();\\n  const mobileSearchButtonRef = useRef<HTMLButtonElement | null>();\\n\\n  const [expandSearch, setExpandSearch] = useState(false);\\n\\n  useEffect(() => {\\n    if (expandSearch) {\\n      mobileSearchInputRef.current?.focus();\\n    }\\n    if (!expandSearch) {\\n      mobileSearchButtonRef.current?.focus();\\n    }\\n  }, [expandSearch]);\\n\\n  // For dropdown menus in the horizontal nav, we use floating UI for\\n  // -opening\\n  // -positioning\\n  // -dismissing\\n\\n  // floating-ui setup for the account dropdown\\n  const {\\n    context: accountFloatingContext,\\n    floatingStyles: accountFloatingStyles,\\n    refs: accountFloatingRefs,\\n  } = useFloating({\\n    middleware: [offset(2)],\\n    open: accountMenuOpen,\\n    onOpenChange: setAccountMenuOpen,\\n    placement: 'bottom-end',\\n    whileElementsMounted: autoUpdate,\\n  });\\n  const clickAccountRef = useClick(accountFloatingContext);\\n  const dismissAccountMenu = useDismiss(accountFloatingContext);\\n  const { getReferenceProps: getAccountReferenceProps, getFloatingProps: getAccountFloatingProps } = useInteractions([\\n    clickAccountRef,\\n    dismissAccountMenu,\\n  ]);\\n\\n  const onToggleMobileMenu = () => {\\n    setMobileMenuOpen(!mobileMenuOpen);\\n  };\\n\\n  return (\\n    <div>\\n      <Link skipLink href=\\\"#content\\\">\\n        Skip to content\\n      </Link>\\n      <UtilityFragment vJustifyContent=\\\"between\\\">\\n        <Nav id={id} orientation=\\\"horizontal\\\" tag=\\\"header\\\">\\n          {!expandSearch ? (\\n            <>\\n              <UtilityFragment vContainerHide=\\\"desktop\\\">\\n                <DropdownButton\\n                  aria-controls={`${id}-mobile-menu`}\\n                  aria-expanded={mobileMenuOpen ? 'true' : 'false'}\\n                  aria-describedby={`${id}-mobile-menu-notifications-badge`}\\n                  aria-label=\\\"open menu\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  id={`${id}-mobile-menu-button`}\\n                  onClick={onToggleMobileMenu}\\n                >\\n                  {mobileMenuOpen ? (\\n                    <VisaCloseTiny />\\n                  ) : (\\n                    <>\\n                      <VisaMenuLow />\\n                      <Badge\\n                        id={`${id}-mobile-menu-notifications-badge`}\\n                        aria-label=\\\"3 notifications\\\"\\n                        badgeVariant=\\\"number\\\"\\n                      >\\n                        3\\n                      </Badge>\\n                    </>\\n                  )}\\n                </DropdownButton>\\n              </UtilityFragment>\\n              <UtilityFragment vFlex vGap={16}>\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"./horizontal-navigation\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Utility\\n                      vContainerHide=\\\"xs\\\"\\n                      element={<Typography variant=\\\"headline-3\\\">Application Name</Typography>}\\n                    />\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <Utility vFlex vGap={8} vMarginLeft={8}>\\n                <UtilityFragment vFlexRow vContainerHide=\\\"xs\\\">\\n                  <InputContainer>\\n                    <VisaSearchLow />\\n                    <Input\\n                      id={`${id}-search-field`}\\n                      name={`${id}-search-field`}\\n                      required\\n                      type=\\\"search\\\"\\n                      aria-label=\\\"Search\\\"\\n                      placeholder=\\\"Search\\\"\\n                    />\\n                  </InputContainer>\\n                </UtilityFragment>\\n                <UtilityFragment vFlexRow vContainerHide=\\\"desktop\\\">\\n                  <Button\\n                    aria-label=\\\"search site\\\"\\n                    buttonSize=\\\"large\\\"\\n                    ref={mobileSearchButtonRef}\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                    onClick={() => {\\n                      setExpandSearch(true);\\n                    }}\\n                  >\\n                    <VisaSearchLow />\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\">\\n                  <Button\\n                    aria-label=\\\"notifications\\\"\\n                    aria-describedby={`${id}-notifications-badge`}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    iconButton\\n                  >\\n                    <VisaNotificationsLow />\\n                    <Badge id={`${id}-notifications-badge`} badgeVariant=\\\"number\\\">\\n                      3\\n                    </Badge>\\n                  </Button>\\n                </UtilityFragment>\\n                <UtilityFragment vContainerHide=\\\"mobile\\\" vPaddingBottom={0}>\\n                  <Tab tag=\\\"div\\\">\\n                    <DropdownButton\\n                      aria-expanded={accountMenuOpen}\\n                      aria-controls={accountMenuOpen ? `${id}-account-menu` : undefined}\\n                      aria-label=\\\"Alex Miller\\\"\\n                      buttonSize=\\\"large\\\"\\n                      colorScheme=\\\"tertiary\\\"\\n                      element={<Avatar tag=\\\"button\\\" />}\\n                      ref={accountFloatingRefs.setReference}\\n                      {...getAccountReferenceProps()}\\n                    >\\n                      <VisaAccountLow />\\n                      <TabSuffix element={accountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </DropdownButton>\\n                    {accountMenuOpen && (\\n                      <FloatingFocusManager\\n                        context={accountFloatingContext}\\n                        modal={false}\\n                        initialFocus={-1}\\n                        restoreFocus={true}\\n                      >\\n                        <DropdownMenu\\n                          id={`${id}-account-menu`}\\n                          aria-hidden={!accountMenuOpen}\\n                          style={\\n                            {\\n                              inlineSize: '180px',\\n                              position: 'absolute',\\n                              ...accountFloatingStyles,\\n                              zIndex: 1,\\n                            } as CSSProperties\\n                          }\\n                          ref={accountFloatingRefs.setFloating}\\n                          {...getAccountFloatingProps()}\\n                        >\\n                          <Listbox>\\n                            {accountSubItems.map(accountSubItem => (\\n                              <UtilityFragment key={accountSubItem.id}>\\n                                <li>\\n                                  <UtilityFragment vPaddingVertical={4} vPaddingHorizontal={8}>\\n                                    <ListboxItem href={accountSubItem.href} tag=\\\"a\\\">\\n                                      {accountSubItem.tabLabel}\\n                                    </ListboxItem>\\n                                  </UtilityFragment>\\n                                </li>\\n                              </UtilityFragment>\\n                            ))}\\n                          </Listbox>\\n                        </DropdownMenu>\\n                      </FloatingFocusManager>\\n                    )}\\n                  </Tab>\\n                </UtilityFragment>\\n              </Utility>\\n            </>\\n          ) : (\\n            <UtilityFragment vFlex>\\n              <Surface\\n                style={\\n                  {\\n                    '--v-surface-background': 'var(--palette-default-surface-3)',\\n                    '--v-surface-border-radius': 'var(--size-rounded-medium)',\\n                    '--v-surface-padding-inline': 'var(--size-scalable-8)',\\n                  } as CSSProperties\\n                }\\n              >\\n                <InputContainer>\\n                  <VisaSearchLow />\\n                  <Input\\n                    id={`${id}-search-field`}\\n                    name={`${id}-search-field`}\\n                    ref={mobileSearchInputRef}\\n                    required\\n                    type=\\\"search\\\"\\n                    aria-label=\\\"Search\\\"\\n                    placeholder=\\\"Search\\\"\\n                  />\\n                </InputContainer>\\n                <Button\\n                  aria-label=\\\"close search\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  onClick={() => setExpandSearch(false)}\\n                >\\n                  <VisaCloseLow />\\n                </Button>\\n              </Surface>\\n            </UtilityFragment>\\n          )}\\n        </Nav>\\n      </UtilityFragment>\\n\\n      <Nav\\n        aria-label=\\\"Label for horizontal example with stacked menu and persistent search\\\"\\n        className=\\\"v-ml-auto v-mobile-container-hide\\\"\\n        style={\\n          {\\n            '--v-surface-background': 'var(--palette-default-surface-2)',\\n            '--v-tabs-active-line-padding': 'var(--size-responsive-10)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Tabs className=\\\"v-gap-8\\\">\\n          <Tab>\\n            <Button\\n              buttonSize=\\\"large\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n            />\\n          </Tab>\\n          <Tab>\\n            <Button\\n              buttonSize=\\\"large\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n            />\\n          </Tab>\\n          <Tab>\\n            <Button\\n              buttonSize=\\\"large\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              element={<a href=\\\"./horizontal-navigation\\\">L1 label 3</a>}\\n            />\\n          </Tab>\\n        </Tabs>\\n      </Nav>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\" vHide={!mobileMenuOpen}>\\n        <Nav\\n          aria-label=\\\"Label for horizontal example with stacked menu and persistent search\\\"\\n          aria-hidden={!mobileMenuOpen}\\n          id={`${id}-mobile-menu`}\\n          orientation=\\\"vertical\\\"\\n        >\\n          <Tabs orientation=\\\"vertical\\\">\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 1</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 2</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                element={<a href=\\\"./horizontal-navigation\\\">L1 label 3</a>}\\n              />\\n            </Tab>\\n            <Tab>\\n              <Button\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                style={{ wordBreak: 'break-word', blockSize: 'max-content' } as CSSProperties}\\n              >\\n                Notifications\\n                <Badge badgeVariant=\\\"number\\\" style={{ position: 'relative' }}>\\n                  3\\n                </Badge>\\n              </Button>\\n            </Tab>\\n            <Divider dividerType=\\\"decorative\\\"></Divider>\\n            <Tab tag=\\\"div\\\">\\n              <Button\\n                aria-expanded={mobileAccountMenuOpen}\\n                aria-controls={`${id}-account-sub-menu`}\\n                aria-label=\\\"Alex Miller\\\"\\n                buttonSize=\\\"large\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => setMobileAccountMenuOpen(!mobileAccountMenuOpen)}\\n              >\\n                <VisaAccountLow />\\n                Alex Miller\\n                <TabSuffix element={mobileAccountMenuOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n              </Button>\\n              {mobileAccountMenuOpen && (\\n                <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`}>\\n                  {accountSubItems.map(accountSubItem => (\\n                    <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                      />\\n                    </Tab>\\n                  ))}\\n                </Tabs>\\n              )}\\n            </Tab>\\n          </Tabs>\\n        </Nav>\\n      </UtilityFragment>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Stacked horizontal navigation with persistent search\"}],\"propertySections\":[{\"order\":1,\"name\":\"Nav\",\"selector\":\"<Nav />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Menu or panel at the top or next to page content that links to important pages or features.\"},{\"order\":2,\"name\":\"tabs\",\"type\":\"related\",\"selector\":\"<Tabs />\",\"description\":\"\"}],\"properties\":[{\"name\":\"alternate\",\"section\":\"Nav\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate\"}},{\"name\":\"drawer\",\"section\":\"Nav\",\"data\":{\"name\":\"drawer\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Drawer\"}},{\"name\":\"ref\",\"section\":\"Nav\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Nav\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"nav\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"icon\",\"version\":\"0.0.1\",\"description\":\"Meant for use with sprites only. Uses dom href linking of sprite elements expected to already be in the DOM to render the icon.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Icon styles\",\"description\":\"\",\"order\":1},{\"name\":\"Icon sizes\",\"description\":\"\",\"order\":2},{\"name\":\"Icon customizations\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon styles\",\"url\":\"components/icon/default-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaGlobalLow } from '@visa/nova-icons-react';\\n\\nexport const DefaultIcon = () => {\\n  return <VisaGlobalLow aria-hidden=\\\"false\\\" aria-label=\\\"global\\\" />;\\n};\\n\"},\"name\":\"Default\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon styles\",\"url\":\"components/icon/visa-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaInformationLow } from '@visa/nova-icons-react';\\n\\nexport const VisaIcon = () => {\\n  return <VisaInformationLow aria-hidden=\\\"false\\\" aria-label=\\\"info\\\" />;\\n};\\n\"},\"name\":\"Visa\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon styles\",\"url\":\"components/icon/generic-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { GenericInformationLow } from '@visa/nova-icons-react';\\n\\nexport const GenericIcon = () => {\\n  return <GenericInformationLow aria-hidden=\\\"false\\\" aria-label=\\\"info\\\" />;\\n};\\n\"},\"name\":\"Generic\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon sizes\",\"url\":\"components/icon/tiny-resolution\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaInformationTiny } from '@visa/nova-icons-react';\\n\\nexport const TinyResolution = () => {\\n  return <VisaInformationTiny aria-hidden=\\\"false\\\" aria-label=\\\"info\\\" />;\\n};\\n\"},\"name\":\"Tiny resolution\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon sizes\",\"url\":\"components/icon/low-resolution\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaInformationLow } from '@visa/nova-icons-react';\\n\\nexport const LowResolution = () => {\\n  return <VisaInformationLow aria-hidden=\\\"false\\\" aria-label=\\\"info\\\" />;\\n};\\n\"},\"name\":\"Low resolution\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon sizes\",\"url\":\"components/icon/high-resolution\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaInformationHigh } from '@visa/nova-icons-react';\\n\\nexport const HighResolution = () => {\\n  return <VisaInformationHigh aria-hidden=\\\"false\\\" aria-label=\\\"info\\\" />;\\n};\\n\"},\"name\":\"High resolution\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon customizations\",\"url\":\"components/icon/rtl-icon\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { VisaChevronRightLow } from '@visa/nova-icons-react';\\n\\nexport const RtlIcons = () => {\\n  return <VisaChevronRightLow rtl />;\\n};\\n\"},\"name\":\"Icon with right-to-left support\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Icon customizations\",\"url\":\"components/icon/custom-color-icon\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaHomeHigh } from '@visa/nova-icons-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const CustomColorIcon = () => {\\n  return <VisaHomeHigh style={{ '--v-icon-primary': 'teal', '--v-icon-secondary': 'orange' } as CSSProperties} />;\\n};\\n\"},\"name\":\"Icon with custom colors\"}],\"propertySections\":[{\"order\":1,\"name\":\"Icon\",\"selector\":\"<Icon />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Meant for use with sprites only. Uses dom href linking of sprite elements expected to already be in the DOM to render the icon.\"}],\"properties\":[{\"name\":\"ariaBaseId\",\"section\":\"Icon\",\"data\":{\"name\":\"ariaBaseId\",\"type\":\"string , number\",\"default\":\"\",\"required\":\"false\",\"description\":\"Aria Base ID\"}},{\"name\":\"brand\",\"section\":\"Icon\",\"data\":{\"name\":\"brand\",\"type\":\"\\\"generic\\\" , \\\"visa\\\"\",\"default\":\"generic\",\"required\":\"false\",\"description\":\"Icon Branding\"}},{\"name\":\"description\",\"section\":\"Icon\",\"data\":{\"name\":\"description\",\"type\":\"string\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"iconName\",\"section\":\"Icon\",\"data\":{\"name\":\"iconName\",\"type\":\"string\",\"default\":\"help\",\"required\":\"false\",\"description\":\"Name of Icon\"}},{\"name\":\"resolution\",\"section\":\"Icon\",\"data\":{\"name\":\"resolution\",\"type\":\"\\\"high\\\" , \\\"low\\\" , \\\"tiny\\\"\",\"default\":\"low\",\"required\":\"false\",\"description\":\"Resolution of Icon\"}},{\"name\":\"rtl\",\"section\":\"Icon\",\"data\":{\"name\":\"rtl\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Flips icon horizontally when document direction is set to right to left\"}},{\"name\":\"title\",\"section\":\"Icon\",\"data\":{\"name\":\"title\",\"type\":\"string\",\"default\":\"\",\"required\":\"false\",\"description\":\"Title for Standalone SVG's\"}}]},{\"name\":\"input\",\"version\":\"0.0.1\",\"description\":\"Text fields that enable users to enter free-form content.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Single-line inputs\",\"description\":\"\",\"order\":1},{\"name\":\"Multi-line inputs\",\"description\":\"\",\"order\":2},{\"name\":\"Custom inputs\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/default-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-default';\\n\\nexport const DefaultInput = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input aria-required=\\\"true\\\" id={id} type=\\\"text\\\" />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default input\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/initial-value-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-initial-value';\\n\\nexport const InitialValueInput = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input aria-required=\\\"true\\\" defaultValue=\\\"Initial value\\\" id={id} type=\\\"text\\\" />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with initial value\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/inline-message-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Input, InputContainer, InputMessage, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-inline-message';\\n\\nexport const InlineMessageInput = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input aria-describedby={`${id}-message`} aria-required=\\\"true\\\" id={id} type=\\\"text\\\" />\\n      </InputContainer>\\n      <InputMessage id={`${id}-message`}>This is optional text that describes the label in more detail.</InputMessage>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with inline message\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/clear-button-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport { Button, Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { FocusEvent, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-clear-button';\\n\\nexport const ClearButtonInput = () => {\\n  const [showClearButton, setShowClearButton] = useState(false);\\n  const [inputValue, setInputValue] = useState('');\\n\\n  const inputRef = useRef<HTMLInputElement>(null);\\n\\n  const handleBlur = (event: FocusEvent<HTMLDivElement>) => {\\n    if (!event.currentTarget.contains(event.relatedTarget)) {\\n      setShowClearButton(false);\\n    }\\n  };\\n\\n  const handleClear = () => {\\n    setInputValue('');\\n    // Put focus back into the input\\n    if (inputRef.current) {\\n      inputRef.current.focus();\\n    }\\n  };\\n\\n  useEffect(() => {\\n    if (inputValue !== '') setShowClearButton(true);\\n    else setShowClearButton(false);\\n  }, [inputValue]);\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer\\n        onBlur={e => handleBlur(e)}\\n        onFocus={() => {\\n          if (inputValue !== '') setShowClearButton(true);\\n        }}\\n      >\\n        <Input\\n          ref={inputRef}\\n          aria-required=\\\"true\\\"\\n          id={id}\\n          onChange={e => setInputValue(e.currentTarget.value)}\\n          type=\\\"text\\\"\\n          value={inputValue}\\n        />\\n        {showClearButton && (\\n          <Button aria-label=\\\"Clear\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton onClick={handleClear} subtle>\\n            <VisaClearAltTiny />\\n          </Button>\\n        )}\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with clear text button\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/read-only-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-readonly';\\n\\nexport const ReadOnlyInput = () => {\\n  const [readonly, setReadonly] = useState(true);\\n\\n  return (\\n    <>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer>\\n          <Input aria-required=\\\"true\\\" defaultValue=\\\"Read-only example text.\\\" id={id} readOnly={readonly} type=\\\"text\\\" />\\n        </InputContainer>\\n      </Utility>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vGap={2} vMarginTop={24}>\\n        <Checkbox checked={readonly} id={`${id}-checkbox`} onChange={() => setReadonly(!readonly)} />\\n        <Label htmlFor={`${id}-checkbox`}>Mark input as read-only</Label>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Read-only input\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/disabled-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Checkbox, Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-input';\\n\\nexport const DisabledInput = () => {\\n  const [disabled, setDisabled] = useState(true);\\n\\n  return (\\n    <>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer>\\n          <Input aria-required=\\\"true\\\" disabled={disabled} id={id} type=\\\"text\\\" />\\n        </InputContainer>\\n      </Utility>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vGap={2} vMarginTop={24}>\\n        <Checkbox checked={disabled} id={`${id}-checkbox`} onChange={() => setDisabled(!disabled)} />\\n        <Label htmlFor={`${id}-checkbox`}>Mark input as disabled</Label>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Disabled input\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/error-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { ChangeEvent, useRef, useState } from 'react';\\nimport { Button, Input, InputContainer, InputMessage, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-error';\\n\\nconst DEFAULT_INPUT_STATE = {\\n  value: '',\\n  error: false,\\n};\\n\\nexport const ErrorInput = () => {\\n  const [inputState, setInputState] = useState(DEFAULT_INPUT_STATE);\\n\\n  const inputRef = useRef<HTMLInputElement>(null);\\n\\n  const handleSubmit = () => {\\n    // Customize this for your own validation needs\\n    setInputState(prevInputState => ({\\n      ...prevInputState,\\n      error: true,\\n    }));\\n\\n    // Focus on the input with error\\n    if (inputRef.current) {\\n      inputRef.current.focus();\\n    }\\n  };\\n\\n  const handleReset = () => {\\n    setInputState(DEFAULT_INPUT_STATE);\\n  };\\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    setInputState({\\n      value: e.target.value,\\n      error: false,\\n    });\\n  };\\n\\n  return (\\n    <>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer>\\n          <Input\\n            aria-describedby={`${id}-message`}\\n            aria-invalid={inputState.error}\\n            aria-required=\\\"true\\\"\\n            ref={inputRef}\\n            id={id}\\n            type=\\\"text\\\"\\n            value={inputState.value}\\n            onChange={handleInputChange}\\n          />\\n        </InputContainer>\\n        {inputState.error && (\\n          <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\">\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail.\\n          </InputMessage>\\n        )}\\n      </Utility>\\n      <Utility vFlex vGap={12} vMarginTop={16}>\\n        <Button id={`${id}-submit-button`} onClick={handleSubmit}>\\n          Submit\\n        </Button>\\n        <Button id={`${id}-reset-button`} colorScheme=\\\"secondary\\\" onClick={handleReset}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Input with error\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/prefix-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-prefix';\\n\\nexport const PrefixInput = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Typography id={`${id}-prefix`} tag=\\\"span\\\" variant=\\\"body-2-bold\\\">\\n          $\\n        </Typography>\\n        <Input aria-describedby={`${id}-prefix`} aria-required=\\\"true\\\" id={id} type=\\\"text\\\" />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with prefix\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/suffix-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-suffix';\\n\\nexport const SuffixInput = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input aria-describedby={`${id}-suffix`} aria-required=\\\"true\\\" id={id} type=\\\"text\\\" />\\n        <Typography id={`${id}-suffix`} tag=\\\"span\\\" variant=\\\"body-2-bold\\\">\\n          %\\n        </Typography>\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with suffix\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/action-button-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaPasswordHideTiny, VisaPasswordShowTiny } from '@visa/nova-icons-react';\\nimport { Button, Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-action-button';\\n\\nexport const ActionButtonInput = () => {\\n  const [showPassword, setShowPassword] = useState(true);\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input aria-required=\\\"true\\\" id={id} type={showPassword ? 'text' : 'password'} />\\n        <Button\\n          aria-label={showPassword ? 'hide text' : 'show text'}\\n          buttonSize=\\\"small\\\"\\n          colorScheme=\\\"tertiary\\\"\\n          iconButton\\n          onClick={() => setShowPassword(!showPassword)}\\n        >\\n          {showPassword ? <VisaPasswordHideTiny /> : <VisaPasswordShowTiny />}\\n        </Button>\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with action button\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/mask-button-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaPasswordHideTiny, VisaPasswordShowTiny } from '@visa/nova-icons-react';\\nimport { Button, Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-mask-button';\\n\\nexport const MaskButtonInput = () => {\\n  const [showPassword, setShowPassword] = useState(false);\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Input aria-required=\\\"true\\\" defaultValue=\\\"password\\\" id={id} type={showPassword ? 'text' : 'password'} />\\n        <Button\\n          aria-label={showPassword ? 'hide text' : 'show text'}\\n          buttonSize=\\\"small\\\"\\n          colorScheme=\\\"tertiary\\\"\\n          iconButton\\n          onClick={() => setShowPassword(!showPassword)}\\n        >\\n          {showPassword ? <VisaPasswordHideTiny /> : <VisaPasswordShowTiny />}\\n        </Button>\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with masked field\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/leading-icon-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaAccountLow } from '@visa/nova-icons-react';\\nimport { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-leading-icon';\\n\\nexport const LeadingIconInput = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Utility vFlex vFlexCol>\\n          <VisaAccountLow />\\n        </Utility>\\n        <Input aria-required=\\\"true\\\" id={id} type=\\\"text\\\" />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with leading icon\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-line inputs\",\"url\":\"components/input/one-time-passcode-input\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Input, InputContainer, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-otp';\\n\\nexport const OneTimePasscodeInput = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label</Label>\\n      <InputContainer style={{ inlineSize: '160px' }}>\\n        <Input aria-required=\\\"true\\\" id={id} otp type=\\\"text\\\" />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"One-time passcode input\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-line inputs\",\"url\":\"components/input/native-resize-textarea\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputContainer, Label, Textarea, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'native-text-area-resize';\\n\\nexport const NativeResizeTextarea = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer className=\\\"v-flex-row\\\">\\n        <Textarea aria-required=\\\"true\\\" id={id} name={id} />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Native textarea with resize property\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-line inputs\",\"url\":\"components/input/native-no-resize-textarea\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputContainer, Label, Textarea, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'text-area-no-resize';\\n\\nexport const NativeNoResizeTextarea = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer className=\\\"v-flex-row\\\">\\n        <Textarea aria-required=\\\"true\\\" fixed id={id} name={id} />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Native textarea without resize property\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-line inputs\",\"url\":\"components/input/fixed-height-textarea\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { InputContainer, Label, Textarea, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'text-area-fixed-height';\\n\\nexport const FixedHeightTextarea = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer className=\\\"v-flex-row\\\">\\n        <Textarea aria-required=\\\"true\\\" fixed id={id} name={id} style={{ blockSize: '130px' }} />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Textarea with fixed height\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-line inputs\",\"url\":\"components/input/resize-textarea\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { InputContainer, Label, Textarea, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'text-area-resize-height';\\n\\nexport const ResizeTextarea = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer className=\\\"v-flex-row\\\">\\n        <Textarea aria-required=\\\"true\\\" id={id} name={id} style={{ blockSize: '130px' }} />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Textarea with fixed height and resize property\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-line inputs\",\"url\":\"components/input/text-count-textarea\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Button, InputContainer, InputMessage, Label, Textarea, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { ChangeEvent, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'text-count-textarea';\\nconst maxCharacters = 400;\\n\\nconst getMessage = ({\\n  characterCount,\\n  characterCountInvalid,\\n  invalid,\\n}: {\\n  characterCount: number;\\n  characterCountInvalid: boolean;\\n  invalid: boolean;\\n}) => {\\n  if (invalid) return 'This is a required field';\\n  if (characterCountInvalid)\\n    return `${characterCount - maxCharacters} character${characterCount - maxCharacters !== 1 ? 's' : ''} over limit`;\\n  return `${maxCharacters - characterCount} character${maxCharacters - characterCount !== 1 ? 's' : ''} remaining`;\\n};\\n\\nexport const TextCountTextarea = () => {\\n  const [invalid, setInvalid] = useState(false);\\n  const [text, setText] = useState('');\\n\\n  const characterCount = text.length;\\n  const characterCountInvalid = characterCount > maxCharacters;\\n  const messageIsError = characterCountInvalid || invalid;\\n\\n  const message = getMessage({ characterCount, characterCountInvalid, invalid });\\n\\n  const onReset = (e: React.FormEvent<HTMLFormElement>) => {\\n    e.preventDefault();\\n    setInvalid(false);\\n    setText('');\\n  };\\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\\n    e.preventDefault();\\n    setInvalid(characterCount === 0);\\n  };\\n  const onTextChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    setInvalid(false);\\n    setText(e.target.value);\\n  };\\n\\n  return (\\n    <form onReset={onReset} onSubmit={onSubmit}>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer className=\\\"v-flex-row\\\">\\n          <Textarea\\n            aria-describedby={`${id}-message`}\\n            aria-invalid={characterCountInvalid || invalid}\\n            aria-required=\\\"true\\\"\\n            fixed\\n            id={id}\\n            name={id}\\n            onChange={onTextChange}\\n            style={{ blockSize: '130px' }}\\n            value={text}\\n          />\\n        </InputContainer>\\n        <UtilityFragment vFlex vFlexRow>\\n          <InputMessage\\n            aria-atomic={messageIsError}\\n            aria-live={messageIsError ? 'assertive' : 'polite'}\\n            id={`${id}-message`}\\n            role={messageIsError ? 'alert' : undefined}\\n          >\\n            {messageIsError && <VisaErrorTiny />}\\n            {message}\\n          </InputMessage>\\n        </UtilityFragment>\\n      </Utility>\\n      <Utility vFlex vFlexRow vGap={8} vMarginTop={16}>\\n        <Button type=\\\"submit\\\">Submit</Button>\\n        <Button colorScheme=\\\"secondary\\\" type=\\\"reset\\\">\\n          Reset\\n        </Button>\\n      </Utility>\\n    </form>\\n  );\\n};\\n\"},\"name\":\"Textarea with fixed height and character counter\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-line inputs\",\"url\":\"components/input/native-row-textarea\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputContainer, Label, Textarea, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'text-area-native-row';\\n\\nexport const NativeRowTextarea = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer className=\\\"v-flex-row\\\">\\n        <Textarea aria-required=\\\"true\\\" fixed id={id} name={id} rows={3} />\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Textarea with native rows attribute\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom inputs\",\"url\":\"components/input/custom-inline-label-input\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { Input, InputContainer, InputMessage, Label, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-custom-inline-label';\\n\\nexport const CustomInlineLabelInput = () => {\\n  return (\\n    <Utility vAlignItems=\\\"start\\\" vFlex vFlexRow vGap={4}>\\n      <Label htmlFor={id} style={{ lineHeight: 'var(--v-input-container-block-size)' }}>\\n        Label (required)\\n      </Label>\\n      <Utility vFlex vFlexCol vGap={4} vFlexGrow>\\n        <InputContainer>\\n          <Input aria-describedby={`${id}-message`} aria-required=\\\"true\\\" id={id} type=\\\"text\\\" />\\n        </InputContainer>\\n        <InputMessage id={`${id}-message`}>This is optional text that describes the label in more detail.</InputMessage>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Input with inline label and message\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom inputs\",\"url\":\"components/input/custom-form-input\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { Button, Input, InputContainer, Label, Utility } from '@visa/nova-react';\\nimport { FormEvent } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'input-form-control';\\n\\nexport const CustomFormInput = () => {\\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\\n    event.preventDefault();\\n    const formData = new FormData(event.currentTarget);\\n    const query = formData.get(id);\\n    alert(`${query} submitted!`);\\n  };\\n  return (\\n    <form onSubmit={onSubmit}>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer>\\n          <Input aria-required=\\\"true\\\" id={id} name={id} type=\\\"text\\\" />\\n        </InputContainer>\\n      </Utility>\\n      <Utility vFlex vFlexRow vGap={8} vMarginTop={16}>\\n        <Button type=\\\"submit\\\">Submit</Button>\\n        <Button colorScheme=\\\"secondary\\\" type=\\\"reset\\\">\\n          Reset\\n        </Button>\\n      </Utility>\\n    </form>\\n  );\\n};\\n\"},\"name\":\"Input with form control\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom inputs\",\"url\":\"components/input/cvv-input\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Button, Input, InputContainer, InputMessage, Label, Utility } from '@visa/nova-react';\\nimport { FormEvent, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'cvv-input';\\n\\nconst cvvLength = 3;\\n\\nexport const CVVInput = () => {\\n  const [invalid, setInvalid] = useState(false);\\n  const [focused, setFocused] = useState(false);\\n\\n  const onReset = () => {\\n    setInvalid(false);\\n  };\\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\\n    event.preventDefault();\\n    const isValid = event.currentTarget.checkValidity();\\n    const formData = new FormData(event.currentTarget);\\n    const formDataObject = Object.fromEntries(formData.entries());\\n\\n    // If valid, alert with CVV\\n    if (isValid) alert(`Success!\\\\nCVV: ${formDataObject['cvv-input']}`);\\n    // If invalid, focus on invalid element\\n    else (event.currentTarget.querySelector(':invalid') as HTMLInputElement)?.focus();\\n\\n    setInvalid(!isValid);\\n  };\\n\\n  return (\\n    <Utility noValidate onReset={onReset} onSubmit={onSubmit} tag=\\\"form\\\" vFlex vFlexCol vGap={4}>\\n      <Label htmlFor={id}>Security code</Label>\\n      <InputContainer>\\n        <Input\\n          aria-describedby={`${id}-message`}\\n          aria-invalid={invalid}\\n          aria-required=\\\"true\\\"\\n          autoComplete=\\\"cc-csc\\\"\\n          id={id}\\n          maxLength={cvvLength}\\n          name={id}\\n          onBlur={() => setFocused(false)}\\n          onFocus={() => setFocused(true)}\\n          pattern={`[0-9]{${cvvLength}}`}\\n          required\\n          type={focused ? 'text' : 'password'}\\n        />\\n      </InputContainer>\\n      {invalid && (\\n        <InputMessage id={`${id}-message`}>\\n          <VisaErrorTiny />\\n          Please choose a valid security code.\\n        </InputMessage>\\n      )}\\n      <Utility vFlex vFlexRow vGap={8} vMarginTop={16}>\\n        <Button type=\\\"submit\\\">Submit</Button>\\n        <Button colorScheme=\\\"secondary\\\" type=\\\"reset\\\">\\n          Reset\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"CVV input\"}],\"propertySections\":[{\"order\":1,\"name\":\"Input\",\"selector\":\"<Input />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Text fields that enable users to enter free-form content.\"},{\"order\":2,\"name\":\"InputContainer\",\"selector\":\"<InputContainer />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for styling input elements.\"},{\"order\":3,\"name\":\"InputControl\",\"selector\":\"<InputControl />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for icons controlling form elements, such as a dropdown icon for a select element.\"},{\"order\":4,\"name\":\"InputMessage\",\"selector\":\"<InputMessage />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Message shown beneath input components to provide context or guidance.\"}],\"properties\":[{\"name\":\"otp\",\"section\":\"Input\",\"data\":{\"name\":\"otp\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"one-time pass-code style\"}},{\"name\":\"ref\",\"section\":\"Input\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Input\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"input\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"InputContainer\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"surfaceType\",\"section\":\"InputContainer\",\"data\":{\"name\":\"surfaceType\",\"type\":\"\\\"alternate\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Type of Surface\"}},{\"name\":\"tag\",\"section\":\"InputContainer\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"InputControl\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"InputControl\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"colorScheme\",\"section\":\"InputMessage\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"default\\\" , \\\"subtle\\\" , \\\"active\\\" , \\\"on-active\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color variant\"}},{\"name\":\"ref\",\"section\":\"InputMessage\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"InputMessage\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"span\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"link\",\"version\":\"0.0.1\",\"description\":\"Text-based navigation elements that directs users to another destination.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Standalone links\",\"description\":\"\",\"order\":1},{\"name\":\"Inline links\",\"description\":\"\",\"order\":2},{\"name\":\"Links coded as buttons\",\"description\":\"\",\"order\":3},{\"name\":\"Custom examples\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Standalone links\",\"url\":\"components/link/default-link\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Link } from '@visa/nova-react';\\n\\nexport const DefaultLink = () => {\\n  return <Link href=\\\"./link\\\">Destination label</Link>;\\n};\\n\"},\"name\":\"Default link\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Standalone links\",\"url\":\"components/link/leading-icon-link\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaArrowBackTiny } from '@visa/nova-icons-react';\\nimport { Link } from '@visa/nova-react';\\n\\nexport const LeadingIconLink = () => {\\n  return (\\n    <Link href=\\\"./link\\\" noUnderline>\\n      <VisaArrowBackTiny />\\n      Destination label\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Link with leading icon\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Standalone links\",\"url\":\"components/link/trailing-icon-link\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport { Link } from '@visa/nova-react';\\n\\nexport const TrailingIconLink = () => {\\n  return (\\n    <Link href=\\\"./link\\\" noUnderline>\\n      Destination label\\n      <VisaChevronRightTiny />\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Link with trailing icon\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Standalone links\",\"url\":\"components/link/alternate-link\",\"tags\":[\"alternate\",\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport { Link } from '@visa/nova-react';\\n\\nexport const AlternateLink = () => {\\n  return (\\n    <Link alternate href=\\\"./link\\\" noUnderline>\\n      Destination label\\n      <VisaChevronRightTiny />\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Alternate link with trailing icon\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Standalone links\",\"url\":\"components/link/new-tab-link\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMaximizeTiny } from '@visa/nova-icons-react';\\nimport { Link } from '@visa/nova-react';\\n\\nexport const NewTabLink = () => {\\n  return (\\n    <Link\\n      aria-label=\\\"Destination label (opens in a new tab)\\\"\\n      href=\\\"./link\\\"\\n      noUnderline\\n      target=\\\"_blank\\\"\\n      rel=\\\"noopener noreferrer\\\"\\n    >\\n      Destination label\\n      <VisaMaximizeTiny />\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Link that opens in a new tab\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Standalone links\",\"url\":\"components/link/disabled-link\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Link } from '@visa/nova-react';\\n\\nexport const DisabledLink = () => {\\n  return (\\n    <Link disabled role=\\\"link\\\">\\n      Destination label\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Disabled link\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Inline links\",\"url\":\"components/link/inline-link\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Link, Typography } from '@visa/nova-react';\\n\\nexport const InlineLink = () => {\\n  return (\\n    <Typography>\\n      This is a sentence with an inline <Link href=\\\"./link\\\">destination label</Link>.\\n    </Typography>\\n  );\\n};\\n\"},\"name\":\"Inline link\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Inline links\",\"url\":\"components/link/without-underline-link\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMaximizeTiny } from '@visa/nova-icons-react';\\nimport { Link, Typography } from '@visa/nova-react';\\n\\nexport const WithoutUnderlineLink = () => {\\n  return (\\n    <Typography>\\n      This is a sentence with an inline{' '}\\n      <Link aria-label=\\\"destination label (opens in a new tab)\\\" href=\\\"./link\\\" noUnderline>\\n        destination label\\n        <VisaMaximizeTiny />\\n      </Link>\\n    </Typography>\\n  );\\n};\\n\"},\"name\":\"Inline link with trailing icon\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Links coded as buttons\",\"url\":\"components/link/custom-tag-link\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaDevicePrinterTiny } from '@visa/nova-icons-react';\\nimport { Link } from '@visa/nova-react';\\n\\nexport const CustomTagLink = () => {\\n  return (\\n    <Link noUnderline element={<button />}>\\n      Print\\n      <VisaDevicePrinterTiny />\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Link coded as a button\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Links coded as buttons\",\"url\":\"components/link/disabled-custom-tag-link\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaDevicePrinterTiny } from '@visa/nova-icons-react';\\nimport { Link } from '@visa/nova-react';\\n\\nexport const DisabledCustomTagLink = () => {\\n  return (\\n    <Link noUnderline element={<button disabled/>}>\\n      Print\\n      <VisaDevicePrinterTiny />\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Disabled link coded as a button\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom examples\",\"url\":\"components/link/react-router-link\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { Link } from 'react-router-dom';\\nimport { Link as VLink } from '@visa/nova-react';\\n\\nexport const ReactRouterLink = () => {\\n  return (\\n    <>\\n      This <VLink element={<Link to={'./'}>link</Link>} /> goes to this current page.\\n    </>\\n  );\\n};\\n\"},\"name\":\"Link uses React Router DOM\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom examples\",\"url\":\"components/link/custom-typography-link\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport { Link, Typography } from '@visa/nova-react';\\n\\nexport const CustomTypographyLink = () => {\\n  return (\\n    <Link href=\\\"./link\\\" noUnderline>\\n      <Typography variant=\\\"headline-3\\\">\\n        Destination label (headline 3) <VisaChevronRightTiny /> \\n      </Typography>\\n    </Link>\\n  );\\n};\\n\"},\"name\":\"Link with custom typography\"}],\"propertySections\":[{\"order\":1,\"name\":\"Link\",\"selector\":\"<Link />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Text-based navigation elements that directs users to another destination.\"}],\"properties\":[{\"name\":\"alternate\",\"section\":\"Link\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"element\",\"section\":\"Link\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"noUnderline\",\"section\":\"Link\",\"data\":{\"name\":\"noUnderline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"No Underline\"}},{\"name\":\"ref\",\"section\":\"Link\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"skipLink\",\"section\":\"Link\",\"data\":{\"name\":\"skipLink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Skip Link\"}},{\"name\":\"tag\",\"section\":\"Link\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"a\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}}]},{\"name\":\"listbox\",\"version\":\"0.0.1\",\"description\":\"Container that displays a list of items available for selection.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Single-select listboxes\",\"description\":\"\",\"order\":1},{\"name\":\"Multi-select listboxes\",\"description\":\"\",\"order\":2},{\"name\":\"Custom listboxes\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select listboxes\",\"url\":\"components/listbox/default-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, Radio } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const DefaultSingleListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Radio className=\\\"v-flex-shrink-0\\\" id={`${id}-option-${index}`} name={`${id}-options`} />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Default single-select listbox\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select listboxes\",\"url\":\"components/listbox/inline-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputMessage, Label, Listbox, ListboxContainer, ListboxItem, Radio } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'inline-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const InlineSingleListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Radio className=\\\"v-flex-shrink-0\\\" id={`${id}-option-${index}`} name={`${id}-options`} />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n      <InputMessage id={`${id}-message`}>This is optional text that describes the label in more detail.</InputMessage>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Single-select listbox with inline message\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select listboxes\",\"url\":\"components/listbox/selected-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, Radio } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'selected-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const SelectedSingleListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Radio\\n                className=\\\"v-flex-shrink-0\\\"\\n                defaultChecked={index === 1}\\n                id={`${id}-option-${index}`}\\n                name={`${id}-option-${index}`}\\n              />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Single-select listbox with selected item\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select listboxes\",\"url\":\"components/listbox/resize-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, Radio } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'resize-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const ResizeSingleListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Radio className=\\\"v-flex-shrink-0\\\" id={`${id}-option-${index}`} name={`${id}-option-${index}`} />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Single-select listbox with resize property\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select listboxes\",\"url\":\"components/listbox/error-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Button, InputMessage, Label, Listbox, ListboxContainer, ListboxItem, Radio, Utility } from '@visa/nova-react';\\nimport { FormEvent, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const ErrorSingleListbox = () => {\\n  const [selectedIndex, setSelectedIndex] = useState<number>(-1);\\n  const [invalid, setInvalid] = useState(false);\\n\\n  const onReset = (event: FormEvent) => {\\n    event.preventDefault();\\n    setInvalid(false);\\n    setSelectedIndex(-1);\\n  };\\n\\n  const onSubmit = (event: FormEvent) => {\\n    event.preventDefault();\\n    setInvalid(selectedIndex === -1);\\n  };\\n\\n  return (\\n    <form onReset={onReset} onSubmit={onSubmit}>\\n      <fieldset aria-invalid={invalid}>\\n        <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n          Label (required)\\n        </Label>\\n        <ListboxContainer error={invalid}>\\n          <Listbox id={id} scroll tag=\\\"div\\\">\\n            {options.map((option, index) => (\\n              <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n                <Radio\\n                  checked={selectedIndex === index}\\n                  className=\\\"v-flex-shrink-0\\\"\\n                  id={`${id}-option-${index}`}\\n                  name={`${id}-options`}\\n                  onChange={() => setSelectedIndex(index)}\\n                />\\n                <Label tag=\\\"span\\\">{option}</Label>\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </ListboxContainer>\\n        {invalid && (\\n          <InputMessage id={`${id}-message`}>\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail.\\n          </InputMessage>\\n        )}\\n      </fieldset>\\n\\n      <Utility vFlex vFlexRow vGap={8}>\\n        <Utility element={<Button type=\\\"submit\\\" />} vMarginTop={8}>\\n          Submit\\n        </Utility>\\n        <Utility element={<Button colorScheme=\\\"secondary\\\" type=\\\"reset\\\" />} vMarginTop={8}>\\n          Reset\\n        </Utility>\\n      </Utility>\\n    </form>\\n  );\\n};\\n\"},\"name\":\"Single-select listbox with error\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select listboxes\",\"url\":\"components/listbox/disabled-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, Radio } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const DisabledSingleListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer disabled>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Radio className=\\\"v-flex-shrink-0\\\" disabled id={`${id}-option-${index}`} name={`${id}-options`} />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Disabled single-select listbox\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select listboxes\",\"url\":\"components/listbox/item-disabled-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, Radio } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'item-disabled-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const ItemDisabledSingleListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Radio\\n                className=\\\"v-flex-shrink-0\\\"\\n                disabled={index === 1}\\n                id={`${id}-option-${index}`}\\n                name={`${id}-options`}\\n              />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Single-select listbox with disabled item\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select listboxes\",\"url\":\"components/listbox/default-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Listbox, ListboxContainer, ListboxItem } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const DefaultMultiListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Checkbox className=\\\"v-flex-shrink-0\\\" id={`${id}-option-${index}`} name={`${id}-option-${index}`} />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Default multi-select listbox\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select listboxes\",\"url\":\"components/listbox/inline-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, InputMessage, Label, Listbox, ListboxContainer, ListboxItem } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'inline-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const InlineMultiListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Checkbox className=\\\"v-flex-shrink-0\\\" id={`${id}-option-${index}`} name={`${id}-option-${index}`} />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n      <InputMessage id={`${id}-message`}>This is optional text that describes the label in more detail.</InputMessage>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Multi-select listbox with inline message\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select listboxes\",\"url\":\"components/listbox/selected-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Listbox, ListboxContainer, ListboxItem } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'selected-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const SelectedMultiListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Checkbox\\n                className=\\\"v-flex-shrink-0\\\"\\n                defaultChecked={index === 1}\\n                id={`${id}-option-${index}`}\\n                name={`${id}-option-${index}`}\\n              />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Multi-select listbox with selected item\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select listboxes\",\"url\":\"components/listbox/resize-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Listbox, ListboxContainer, ListboxItem } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'resize-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const ResizeMultiListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Checkbox className=\\\"v-flex-shrink-0\\\" id={`${id}-option-${index}`} name={`${id}-option-${index}`} />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Multi-select listbox with resize property\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select listboxes\",\"url\":\"components/listbox/error-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  InputMessage,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n} from '@visa/nova-react';\\nimport { FormEvent, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const ErrorMultiListbox = () => {\\n  const [selectedIndexes, setSelectedIndexes] = useState<Record<number, boolean>>({});\\n  const [invalid, setInvalid] = useState(false);\\n\\n  const onSelectionChange = (e: FormEvent<HTMLInputElement>, index: number) => {\\n    const newSelectedIndexes = { ...selectedIndexes };\\n    newSelectedIndexes[index] = e.currentTarget.checked;\\n    setSelectedIndexes(newSelectedIndexes);\\n  };\\n\\n  const onReset = (event: FormEvent) => {\\n    event.preventDefault();\\n    setInvalid(false);\\n    setSelectedIndexes({});\\n  };\\n\\n  const onSubmit = (event: FormEvent) => {\\n    event.preventDefault();\\n    // If there isn't a card selected, set invalid to true\\n    const invalid = !Object.values(selectedIndexes).some(selectedCard => selectedCard);\\n    setInvalid(invalid);\\n  };\\n\\n  return (\\n    <form onSubmit={onSubmit} onReset={onReset}>\\n      <fieldset aria-invalid={invalid}>\\n        <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n          Label (required)\\n        </Label>\\n        <ListboxContainer error={invalid}>\\n          <Listbox id={id} scroll tag=\\\"div\\\">\\n            {options.map((option, index) => (\\n              <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n                <Checkbox\\n                  checked={selectedIndexes[index] || false}\\n                  className=\\\"v-flex-shrink-0\\\"\\n                  id={`${id}-option-${index}`}\\n                  name={`${id}-options`}\\n                  onChange={e => onSelectionChange(e, index)}\\n                />\\n                <Label tag=\\\"span\\\">{option}</Label>\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </ListboxContainer>\\n        {invalid && (\\n          <InputMessage id={`${id}-message`}>\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail.\\n          </InputMessage>\\n        )}\\n      </fieldset>\\n      <Utility vFlex vFlexRow vGap={8}>\\n        <Utility element={<Button type=\\\"submit\\\" />} vMarginTop={8}>\\n          Submit\\n        </Utility>\\n        <Utility element={<Button colorScheme=\\\"secondary\\\" type=\\\"reset\\\" />} vMarginTop={8}>\\n          Reset\\n        </Utility>\\n      </Utility>\\n    </form>\\n  );\\n};\\n\"},\"name\":\"Multi-select listbox with error\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select listboxes\",\"url\":\"components/listbox/disabled-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Listbox, ListboxContainer, ListboxItem } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const DisabledMultiListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer disabled>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Checkbox\\n                className=\\\"v-flex-shrink-0\\\"\\n                disabled\\n                id={`${id}-option-${index}`}\\n                name={`${id}-option-${index}`}\\n              />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Disabled multi-select listbox\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select listboxes\",\"url\":\"components/listbox/item-disabled-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Checkbox, Label, Listbox, ListboxContainer, ListboxItem } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'item-disabled-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const ItemDisabledMultiListbox = () => {\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox id={id} scroll tag=\\\"div\\\">\\n          {options.map((option, index) => (\\n            <ListboxItem htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`} tag=\\\"label\\\">\\n              <Checkbox\\n                className=\\\"v-flex-shrink-0\\\"\\n                disabled={index === 1}\\n                id={`${id}-option-${index}`}\\n                name={`${id}-option-${index}`}\\n              />\\n              <Label tag=\\\"span\\\">{option}</Label>\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Multi-select listbox with disabled item\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom listboxes\",\"url\":\"components/listbox/option-single-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, useListbox } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'option-single-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const OptionSingleListbox = () => {\\n  const {\\n    isIndexSelected,\\n    getTabIndex,\\n    onKeyNavigation,\\n    ref: listItemsRef,\\n    toggleIndexSelected,\\n  } = useListbox({ defaultSelected: 0 }); // Default to selected on first list item\\n\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox aria-labelledby={`${id}-legend`} id={id} onKeyDown={onKeyNavigation} role=\\\"listbox\\\" scroll>\\n          {options.map((option, index) => {\\n            const disabled = index === 1;\\n            return (\\n              <ListboxItem\\n                aria-disabled={disabled || undefined}\\n                aria-selected={isIndexSelected(index)}\\n                key={`${id}-option-${index}`}\\n                onClick={() => toggleIndexSelected(index)}\\n                ref={el => {\\n                  listItemsRef.current[index] = el;\\n                }}\\n                role=\\\"option\\\"\\n                tabIndex={getTabIndex(index, disabled)}\\n              >\\n                <span className=\\\"v-radio v-flex-shrink-0 \\\" />\\n                {option}\\n              </ListboxItem>\\n            );\\n          })}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Single-select listbox with custom hook\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom listboxes\",\"url\":\"components/listbox/option-multi-listbox\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, useListbox } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'option-multi-select-listbox';\\n\\nconst options = ['Item A', 'Item B', 'Item C', 'Item D', 'Item E', 'Item F', 'Item G'];\\n\\nexport const OptionMultiListbox = () => {\\n  const {\\n    isIndexSelected,\\n    getTabIndex,\\n    onKeyNavigation,\\n    ref: listItemsRef,\\n    toggleIndexSelected,\\n  } = useListbox({ defaultSelected: [0, 3] }); // Default to active on first list item\\n\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox aria-labelledby={`${id}-legend`} id={id} onKeyDown={onKeyNavigation} role=\\\"listbox\\\" scroll>\\n          {options.map((option, index) => {\\n            const disabled = index === 1;\\n            return (\\n              <ListboxItem\\n                aria-disabled={disabled || undefined}\\n                aria-selected={isIndexSelected(index)}\\n                key={`${id}-option-${index}`}\\n                onClick={() => toggleIndexSelected(index)}\\n                ref={el => {\\n                  listItemsRef.current[index] = el;\\n                }}\\n                role=\\\"option\\\"\\n                tabIndex={getTabIndex(index, disabled)}\\n              >\\n                <span className=\\\"v-checkbox v-flex-shrink-0\\\" />\\n                {option}\\n              </ListboxItem>\\n            );\\n          })}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Multi-select listbox with custom hook\"}],\"propertySections\":[{\"order\":1,\"name\":\"Listbox\",\"selector\":\"<Listbox />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container that displays a list of items available for selection.\"},{\"order\":2,\"name\":\"ListboxContainer\",\"selector\":\"<ListboxContainer />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for listbox component.\"},{\"order\":3,\"name\":\"ListboxItem\",\"selector\":\"<ListboxItem />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for elements used inside listbox.\"},{\"order\":4,\"name\":\"useListbox\",\"selector\":null,\"libraryId\":null,\"componentId\":null,\"type\":\"hooks\",\"description\":\"This hook is used to manage the selected state and keyboard navigation of listbox component.\"}],\"properties\":[{\"name\":\"multiselect\",\"section\":\"Listbox\",\"data\":{\"name\":\"multiselect\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Multiselect\"}},{\"name\":\"ref\",\"section\":\"Listbox\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"scroll\",\"section\":\"Listbox\",\"data\":{\"name\":\"scroll\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Scroll\"}},{\"name\":\"tag\",\"section\":\"Listbox\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"ul\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"error\",\"section\":\"ListboxContainer\",\"data\":{\"name\":\"error\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Error\"}},{\"name\":\"ref\",\"section\":\"ListboxContainer\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ListboxContainer\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"ListboxItem\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ListboxItem\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"li\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"multiselect\",\"version\":\"0.0.1\",\"description\":\"Control that allows users to select multiple options from a dropdown menu.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default multiselects\",\"description\":\"\",\"order\":1},{\"name\":\"Multiselect Behaviors\",\"description\":\"\",\"order\":2}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/default-multiselect\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'default-multiselect';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const DefaultMultiselect = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment vFlex>\\n          <Listbox {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Default multiselect\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/multiselect-with-inline-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-with-inline-message';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithInlineMessage = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n          <UtilityFragment vHide={isOpen}>\\n            <InputMessage id={`${id}-message`}>\\n              This is optional text that describes the label in more detail.\\n            </InputMessage>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment vFlex>\\n          <Listbox {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect with inline message\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/multiselect-with-error\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny, VisaErrorTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useRef, useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-with-error';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithError = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem, reset } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n      if (type === useMultipleSelection.stateChangeTypes.FunctionReset) {\\n        setSelectedItems([]);\\n        setInputValue('');\\n        setHasError(false);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  const [hasError, setHasError] = useState(false);\\n  const dropdownRef = useRef<HTMLInputElement | null>(null);\\n\\n  const handleSubmit = () => {\\n    // Customize this for your own validation needs\\n    if (!selectedItems.length) {\\n      setHasError(true);\\n    }\\n\\n    // Focus on the field with the error\\n    if (dropdownRef.current) {\\n      dropdownRef.current.focus();\\n    }\\n  };\\n  const handleReset = () => {\\n    reset();\\n  };\\n\\n  return (\\n    <>\\n      <Combobox>\\n        <UtilityFragment vFlex vFlexCol vGap={4}>\\n          <DropdownContainer>\\n            <Label {...getLabelProps()}>Label (required)</Label>\\n            <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n              <InputContainer>\\n                <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                  {selectedItems.map((item, index) => (\\n                    <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                      <Chip chipSize=\\\"compact\\\">\\n                        <Label>{item.value}</Label>\\n                        <Button\\n                          aria-label={`Remove ${item.value}`}\\n                          colorScheme=\\\"tertiary\\\"\\n                          iconButton\\n                          onClick={() => removeSelectedItem(item)}\\n                          subtle\\n                        >\\n                          <VisaClearAltTiny />\\n                        </Button>\\n                      </Chip>\\n                    </UtilityFragment>\\n                  ))}\\n                  <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                    <Input\\n                      name={id}\\n                      aria-invalid={hasError}\\n                      {...getInputProps(\\n                        getDropdownProps({\\n                          ref: dropdownRef,\\n                          onKeyDown: e => {\\n                            if (e.key === 'Enter') {\\n                              if (highlightedIndex !== -1 && isOpen) {\\n                                const selectedItem = items[highlightedIndex];\\n                                if (selectedItems.includes(selectedItem)) {\\n                                  removeSelectedItem(selectedItem);\\n                                } else {\\n                                  setSelectedItems([...selectedItems, selectedItem]);\\n                                  setInputValue('');\\n                                  setHasError(false);\\n                                }\\n                              }\\n                            }\\n                          },\\n                        })\\n                      )}\\n                    />\\n                  </UtilityFragment>\\n                </Utility>\\n                <Button\\n                  aria-haspopup=\\\"listbox\\\"\\n                  aria-label={`${id}-toggle-button`}\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  {...getToggleButtonProps()}\\n                >\\n                  {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n                </Button>\\n              </InputContainer>\\n            </UtilityFragment>\\n            {hasError && (\\n              <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`} role=\\\"alert\\\">\\n                <VisaErrorTiny />\\n                This is required text that describes the error in more detail.\\n              </InputMessage>\\n            )}\\n          </DropdownContainer>\\n        </UtilityFragment>\\n        <ListboxContainer>\\n          <UtilityFragment vFlex>\\n            <Listbox {...getMenuProps()}>\\n              {items.map((item, index) => (\\n                <ListboxItem<HTMLLIElement>\\n                  key={`${id}-example-${index}`}\\n                  className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                  {...getItemProps({\\n                    item,\\n                    index,\\n                    'aria-selected': selectedItems.includes(item),\\n                    onClick: () => {\\n                      if (selectedItems.includes(item)) {\\n                        removeSelectedItem(item);\\n                      } else {\\n                        setSelectedItems([...selectedItems, item]);\\n                        setInputValue('');\\n                        setHasError(false);\\n                      }\\n                    },\\n                  })}\\n                >\\n                  <Checkbox tag=\\\"span\\\" />\\n                  {item.value}\\n                </ListboxItem>\\n              ))}\\n            </Listbox>\\n          </UtilityFragment>\\n        </ListboxContainer>\\n      </Combobox>\\n      <Utility vFlex vGap={12} vMarginTop={16}>\\n        <Button id={`${id}-submit-button`} onClick={handleSubmit}>\\n          Submit\\n        </Button>\\n        <Button id={`${id}-reset-button`} colorScheme=\\\"secondary\\\" onClick={handleReset}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Multiselect with error\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/multiselect-with-disabled-option\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string; disabled?: boolean };\\n\\nconst id = 'multiselect-with-disabled-option';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B', disabled: true },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithDisabledOption = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    isItemDisabled: item => !!item.disabled,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment vFlex>\\n          <Listbox {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  'aria-disabled': item.disabled,\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect with disabled option\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/disabled-multiselect\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'disabled-multiselect';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const DisabledMultiselect = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const [isDisabled, setIsDisabled] = useState(true);\\n\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <>\\n      <Combobox>\\n        <UtilityFragment vFlex vFlexCol vGap={4}>\\n          <DropdownContainer>\\n            <Label {...getLabelProps()}>Label (required)</Label>\\n            <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n              <InputContainer>\\n                <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                  {selectedItems.map((item, index) => (\\n                    <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                      <Chip chipSize=\\\"compact\\\">\\n                        <Label>{item.value}</Label>\\n                        <Button\\n                          aria-label={`Remove ${item.value}`}\\n                          colorScheme=\\\"tertiary\\\"\\n                          iconButton\\n                          onClick={() => removeSelectedItem(item)}\\n                          subtle\\n                          disabled={isDisabled}\\n                        >\\n                          <VisaClearAltTiny />\\n                        </Button>\\n                      </Chip>\\n                    </UtilityFragment>\\n                  ))}\\n                  <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                    <Input\\n                      name={id}\\n                      disabled={isDisabled}\\n                      {...getInputProps(\\n                        getDropdownProps({\\n                          onKeyDown: e => {\\n                            if (e.key === 'Enter') {\\n                              if (highlightedIndex !== -1 && isOpen) {\\n                                const selectedItem = items[highlightedIndex];\\n                                if (selectedItems.includes(selectedItem)) {\\n                                  removeSelectedItem(selectedItem);\\n                                } else {\\n                                  setSelectedItems([...selectedItems, selectedItem]);\\n                                  setInputValue('');\\n                                }\\n                              }\\n                            }\\n                          },\\n                        })\\n                      )}\\n                    />\\n                  </UtilityFragment>\\n                </Utility>\\n                <Button\\n                  aria-haspopup=\\\"listbox\\\"\\n                  aria-label={`${id}-toggle-button`}\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  disabled={isDisabled}\\n                  {...getToggleButtonProps()}\\n                >\\n                  {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n                </Button>\\n              </InputContainer>\\n            </UtilityFragment>\\n          </DropdownContainer>\\n        </UtilityFragment>\\n        <ListboxContainer>\\n          <UtilityFragment vFlex>\\n            <Listbox {...getMenuProps()}>\\n              {items.map((item, index) => (\\n                <ListboxItem<HTMLLIElement>\\n                  key={`${id}-example-${index}`}\\n                  className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                  {...getItemProps({\\n                    item,\\n                    index,\\n                    'aria-selected': selectedItems.includes(item),\\n                    onClick: () => {\\n                      if (selectedItems.includes(item)) {\\n                        removeSelectedItem(item);\\n                      } else {\\n                        setSelectedItems([...selectedItems, item]);\\n                        setInputValue('');\\n                      }\\n                    },\\n                  })}\\n                >\\n                  <Checkbox tag=\\\"span\\\" />\\n                  {item.value}\\n                </ListboxItem>\\n              ))}\\n            </Listbox>\\n          </UtilityFragment>\\n        </ListboxContainer>\\n      </Combobox>\\n      <Utility className=\\\"v-input-container\\\" vMarginTop={10}>\\n        <Checkbox\\n          id={`${id}-checkbox-mark-as-disabled`}\\n          onChange={() => setIsDisabled(currentValue => !currentValue)}\\n          checked={isDisabled}\\n        />\\n        <Label htmlFor={`${id}-checkbox-mark-as-disabled`}>Mark input as disabled</Label>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Disabled multiselect\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/read-only-multiselect\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'read-only-multiselect';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const ReadOnlyMultiselect = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const [isReadOnly, setIsReadOnly] = useState(true);\\n\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <>\\n      <Combobox>\\n        <UtilityFragment vFlex vFlexCol vGap={4}>\\n          <DropdownContainer>\\n            <Label {...getLabelProps()}>Label (required)</Label>\\n            <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n              <InputContainer>\\n                <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                  {selectedItems.map((item, index) => (\\n                    <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                      <Chip chipSize=\\\"compact\\\">\\n                        {isReadOnly ? (\\n                          item.value\\n                        ) : (\\n                          <>\\n                            <Label>{item.value}</Label>\\n                            <Button\\n                              aria-label={`Remove ${item.value}`}\\n                              colorScheme=\\\"tertiary\\\"\\n                              iconButton\\n                              onClick={() => removeSelectedItem(item)}\\n                              subtle\\n                            >\\n                              <VisaClearAltTiny />\\n                            </Button>\\n                          </>\\n                        )}\\n                      </Chip>\\n                    </UtilityFragment>\\n                  ))}\\n                  <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                    <Input\\n                      name={id}\\n                      readOnly={isReadOnly}\\n                      {...getInputProps(\\n                        getDropdownProps({\\n                          onKeyDown: e => {\\n                            if (e.key === 'Enter') {\\n                              if (highlightedIndex !== -1 && isOpen) {\\n                                const selectedItem = items[highlightedIndex];\\n                                if (selectedItems.includes(selectedItem)) {\\n                                  removeSelectedItem(selectedItem);\\n                                } else {\\n                                  setSelectedItems([...selectedItems, selectedItem]);\\n                                  setInputValue('');\\n                                }\\n                              }\\n                            }\\n                          },\\n                        })\\n                      )}\\n                    />\\n                  </UtilityFragment>\\n                </Utility>\\n                <Button\\n                  aria-haspopup=\\\"listbox\\\"\\n                  aria-label={`${id}-toggle-button`}\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  iconButton\\n                  disabled={isReadOnly}\\n                  {...getToggleButtonProps()}\\n                >\\n                  {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n                </Button>\\n              </InputContainer>\\n            </UtilityFragment>\\n          </DropdownContainer>\\n        </UtilityFragment>\\n        <ListboxContainer>\\n          <UtilityFragment vFlex>\\n            <Listbox {...getMenuProps()}>\\n              {items.map((item, index) => (\\n                <ListboxItem<HTMLLIElement>\\n                  key={`${id}-example-${index}`}\\n                  className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                  {...getItemProps({\\n                    item,\\n                    index,\\n                    'aria-selected': selectedItems.includes(item),\\n                    onClick: () => {\\n                      if (selectedItems.includes(item)) {\\n                        removeSelectedItem(item);\\n                      } else {\\n                        setSelectedItems([...selectedItems, item]);\\n                        setInputValue('');\\n                      }\\n                    },\\n                  })}\\n                >\\n                  <Checkbox tag=\\\"span\\\" />\\n                  {item.value}\\n                </ListboxItem>\\n              ))}\\n            </Listbox>\\n          </UtilityFragment>\\n        </ListboxContainer>\\n      </Combobox>\\n      <Utility className=\\\"v-input-container\\\" vMarginTop={10}>\\n        <Checkbox\\n          id={`${id}-checkbox-mark-as-read-only`}\\n          onChange={() => setIsReadOnly(currentValue => !currentValue)}\\n          checked={isReadOnly}\\n        />\\n        <Label htmlFor={`${id}-checkbox-mark-as-read-only`}>Mark input as read-only</Label>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Read-only multiselect\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/multiselect-without-dropdown-chevron\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-without-dropdown-chevron';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithoutDropdownChevron = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const { getLabelProps, getMenuProps, getInputProps, getItemProps, highlightedIndex, isOpen, setHighlightedIndex } =\\n    useCombobox({\\n      items,\\n      itemToString,\\n      inputValue,\\n      stateReducer: comboboxStateReducer,\\n      onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n        if (type === useCombobox.stateChangeTypes.InputChange) {\\n          setInputValue(newInputValue!);\\n        }\\n        if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n          // make sure the highlighted index is on the item that was just clicked\\n          setHighlightedIndex(items.indexOf(selectedItem));\\n        }\\n      },\\n    });\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment vFlex>\\n          <Listbox {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect without dropdown chevron\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/multiselect-with-multiple-selections-and-vertical-scroll\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-with-multiple-selections-and-vertical-scroll';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n  { value: 'Option F' },\\n  { value: 'Option G' },\\n  { value: 'Option H' },\\n  { value: 'Option I' },\\n  { value: 'Option J' },\\n  { value: 'Option K' },\\n  { value: 'Option L' },\\n  { value: 'Option M' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithMultipleSelectionsAndVerticalScroll = () => {\\n  const items = multiselectItems;\\n  const [inputValue, setInputValue] = useState('');\\n\\n  // preselect the first 11 items to demonstrate a very full input field with scrollbar\\n  const [selectedItems, setSelectedItems] = useState<Item[]>(items.slice(0, 12));\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <Combobox style={{ maxInlineSize: '290px' }}>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility\\n                vFlex\\n                vFlexGrow\\n                vFlexShrink\\n                vFlexWrap\\n                vGap={2}\\n                style={{ maxBlockSize: '140px', overflowY: 'auto' }}\\n              >\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment vFlex>\\n          <Listbox scroll {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect with multiple selections and vertical scroll\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/multiselect-with-select-and-unselect-all-buttons\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  Divider,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-with-select-and-unselect-all-buttons';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        // if an item was selected/removed, keep the menu open and maintain the same highlightedIndex\\n        ...(changes.selectedItem && { isOpen: true, highlightedIndex: state.highlightedIndex }),\\n      };\\n    case useCombobox.stateChangeTypes.InputBlur: // Keep the menu open for focusing on the select/clear all buttons\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithSelectAndUnselectAllButtons = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <>\\n          <Utility vFlex vJustifyContent=\\\"between\\\" vAlignItems=\\\"center\\\" vPaddingHorizontal={8}>\\n            <Button colorScheme=\\\"tertiary\\\" onClick={() => setSelectedItems(multiselectItems)}>\\n              Select All\\n            </Button>\\n            <Button colorScheme=\\\"tertiary\\\" destructive onClick={() => setSelectedItems([])}>\\n              Clear All\\n            </Button>\\n          </Utility>\\n          <Divider dividerType=\\\"decorative\\\" />\\n        </>\\n        <UtilityFragment vFlex>\\n          <Listbox {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect with select and unselect all buttons\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Default multiselects\",\"url\":\"components/multiselect/multiselect-with-scrollbar\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-with-scrollbar';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n  { value: 'Option F' },\\n  { value: 'Option G' },\\n  { value: 'Option H' },\\n  { value: 'Option I' },\\n  { value: 'Option J' },\\n  { value: 'Option K' },\\n  { value: 'Option L' },\\n  { value: 'Option M' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.InputChange:\\n      return {\\n        ...changes,\\n        // don't update the highlighted index\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithScrollbar = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = multiselectItems;\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment vFlex>\\n          <Listbox scroll {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect with scrollbar\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Multiselect Behaviors\",\"url\":\"components/multiselect/multiselect-with-filterable-menu-and-manual-selection\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useMemo, useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-with-filterable-menu-and-manual-selection';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithFilterableMenuAndManualSelection = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = useMemo(\\n    () => multiselectItems.filter(item => item.value.toLowerCase().includes(inputValue.toLowerCase())),\\n    [inputValue]\\n  );\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const {\\n    getToggleButtonProps,\\n    getLabelProps,\\n    getMenuProps,\\n    getInputProps,\\n    getItemProps,\\n    highlightedIndex,\\n    isOpen,\\n    setHighlightedIndex,\\n  } = useCombobox({\\n    items,\\n    itemToString,\\n    inputValue,\\n    stateReducer: comboboxStateReducer,\\n    onStateChange({ inputValue: newInputValue, type, selectedItem }) {\\n      if (type === useCombobox.stateChangeTypes.InputChange) {\\n        setInputValue(newInputValue!);\\n      }\\n      if (type === useCombobox.stateChangeTypes.ItemClick && !!selectedItem) {\\n        // make sure the highlighted index is on the item that was just clicked\\n        setHighlightedIndex(items.indexOf(selectedItem));\\n      }\\n    },\\n  });\\n\\n  const resultsFound = items.length > 0;\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => (\\n                  <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                    <Chip chipSize=\\\"compact\\\">\\n                      <Label>{item.value}</Label>\\n                      <Button\\n                        aria-label={`Remove ${item.value}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        onClick={() => removeSelectedItem(item)}\\n                        subtle\\n                      >\\n                        <VisaClearAltTiny />\\n                      </Button>\\n                    </Chip>\\n                  </UtilityFragment>\\n                ))}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && resultsFound && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment\\n          vAlignItems={resultsFound ? undefined : 'center'}\\n          vFlex={resultsFound || undefined}\\n          vJustifyContent={resultsFound ? undefined : 'center'}\\n          style={resultsFound ? undefined : { minBlockSize: 180 }}\\n        >\\n          <Listbox {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n            {!resultsFound && (\\n              <li aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\">\\n                <Typography variant=\\\"label-large\\\">No results found</Typography>\\n              </li>\\n            )}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect with filterable menu and manual selection\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Multiselect Behaviors\",\"url\":\"components/multiselect/multiselect-with-filterable-menu-and-automatic-selection\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaChevronUpTiny, VisaClearAltTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Checkbox,\\n  Chip,\\n  Combobox,\\n  DropdownContainer,\\n  Input,\\n  InputContainer,\\n  Label,\\n  Listbox,\\n  ListboxContainer,\\n  ListboxItem,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { UseComboboxState, UseComboboxStateChangeOptions, useCombobox, useMultipleSelection } from 'downshift';\\nimport { useMemo, useState } from 'react';\\n\\ntype Item = { value: string };\\n\\nconst id = 'multiselect-with-filterable-menu-and-automatic-selection';\\nconst multiselectItems: Item[] = [\\n  { value: 'Option A' },\\n  { value: 'Option B' },\\n  { value: 'Option C' },\\n  { value: 'Option D' },\\n  { value: 'Option E' },\\n];\\n\\nexport const itemToString = (item: Item | null) => (item ? item.value : '');\\n\\nexport const comboboxStateReducer = <ItemType,>(\\n  state: UseComboboxState<ItemType>,\\n  { type, changes }: UseComboboxStateChangeOptions<ItemType>\\n) => {\\n  switch (type) {\\n    case useCombobox.stateChangeTypes.InputClick:\\n      return {\\n        // don't open the menu just because the input was clicked\\n        // instead, wait for an keystroke or a toggle button click\\n        ...state,\\n      };\\n    case useCombobox.stateChangeTypes.ItemMouseMove:\\n    case useCombobox.stateChangeTypes.MenuMouseLeave:\\n      return {\\n        ...changes,\\n        // don't change the focused item just because the mouse moved\\n        highlightedIndex: state.highlightedIndex,\\n      };\\n    case useCombobox.stateChangeTypes.InputKeyDownEnter:\\n    case useCombobox.stateChangeTypes.ItemClick:\\n      return {\\n        ...changes,\\n        isOpen: true, // keep the menu open on item select or Enter press\\n        // and if we're selecting an item, maintain the same highlightedIndex\\n        ...(changes.selectedItem && { highlightedIndex: state.highlightedIndex }),\\n      };\\n    default:\\n      return changes;\\n  }\\n};\\n\\nexport const MultiselectWithFilterableMenuAndAutomaticSelection = () => {\\n  const [inputValue, setInputValue] = useState('');\\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\\n  const items = useMemo(\\n    () => multiselectItems.filter(item => item.value.toLowerCase().includes(inputValue.toLowerCase())),\\n    [inputValue]\\n  );\\n\\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\\n    selectedItems,\\n    onStateChange({ selectedItems: newSelectedItems, type }) {\\n      if (\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete ||\\n        type === useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace ||\\n        type === useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem\\n      ) {\\n        setSelectedItems(newSelectedItems!);\\n      }\\n    },\\n  });\\n  const { getToggleButtonProps, getLabelProps, getMenuProps, getInputProps, getItemProps, highlightedIndex, isOpen } =\\n    useCombobox({\\n      items,\\n      itemToString,\\n      inputValue,\\n      defaultHighlightedIndex: 0, // after selection, highlight the first item.\\n      stateReducer: comboboxStateReducer,\\n      onStateChange({ inputValue: newInputValue, type }) {\\n        if (type === useCombobox.stateChangeTypes.InputChange) {\\n          setInputValue(newInputValue!);\\n        }\\n      },\\n    });\\n\\n  const resultsFound = items.length > 0;\\n\\n  return (\\n    <Combobox>\\n      <UtilityFragment vFlex vFlexCol vGap={4}>\\n        <DropdownContainer>\\n          <Label {...getLabelProps()}>Label (required)</Label>\\n          <UtilityFragment vPaddingVertical={3} vPaddingLeft={3} vPaddingRight={6}>\\n            <InputContainer>\\n              <Utility vFlex vFlexGrow vFlexShrink vFlexWrap vGap={2}>\\n                {selectedItems.map((item, index) => {\\n                  return (\\n                    <UtilityFragment vFlexShrink0 key={`selected-item-${index}`}>\\n                      <Chip chipSize=\\\"compact\\\">\\n                        <Label>{item.value}</Label>\\n                        <Button\\n                          aria-label={`Remove ${item.value}`}\\n                          colorScheme=\\\"tertiary\\\"\\n                          iconButton\\n                          onClick={() => removeSelectedItem(item)}\\n                          subtle\\n                        >\\n                          <VisaClearAltTiny />\\n                        </Button>\\n                      </Chip>\\n                    </UtilityFragment>\\n                  );\\n                })}\\n                <UtilityFragment vFlexShrink style={{ flexBasis: '50px' }}>\\n                  <Input\\n                    name={id}\\n                    {...getInputProps(\\n                      getDropdownProps({\\n                        onKeyDown: e => {\\n                          if (e.key === 'Enter') {\\n                            if (highlightedIndex !== -1 && resultsFound && isOpen) {\\n                              const selectedItem = items[highlightedIndex];\\n                              if (selectedItems.includes(selectedItem)) {\\n                                removeSelectedItem(selectedItem);\\n                              } else {\\n                                setSelectedItems([...selectedItems, selectedItem]);\\n                                setInputValue('');\\n                              }\\n                            }\\n                          }\\n                        },\\n                      })\\n                    )}\\n                  />\\n                </UtilityFragment>\\n              </Utility>\\n              <Button\\n                aria-haspopup=\\\"listbox\\\"\\n                aria-label={`${id}-toggle-button`}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                {...getToggleButtonProps()}\\n              >\\n                {isOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n              </Button>\\n            </InputContainer>\\n          </UtilityFragment>\\n        </DropdownContainer>\\n      </UtilityFragment>\\n      <ListboxContainer>\\n        <UtilityFragment\\n          vAlignItems={resultsFound ? undefined : 'center'}\\n          vFlex={resultsFound || undefined}\\n          vJustifyContent={resultsFound ? undefined : 'center'}\\n          style={resultsFound ? undefined : { minBlockSize: 180 }}\\n        >\\n          <Listbox {...getMenuProps()}>\\n            {items.map((item, index) => (\\n              <ListboxItem<HTMLLIElement>\\n                key={`${id}-example-${index}`}\\n                className={highlightedIndex === index ? 'v-listbox-item-highlighted' : ''}\\n                {...getItemProps({\\n                  item,\\n                  index,\\n                  'aria-selected': selectedItems.includes(item),\\n                  onClick: () => {\\n                    if (selectedItems.includes(item)) {\\n                      removeSelectedItem(item);\\n                    } else {\\n                      setSelectedItems([...selectedItems, item]);\\n                      setInputValue('');\\n                    }\\n                  },\\n                })}\\n              >\\n                <Checkbox tag=\\\"span\\\" />\\n                {item.value}\\n              </ListboxItem>\\n            ))}\\n            {!resultsFound && (\\n              <li aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\">\\n                <Typography variant=\\\"label-large\\\">No results found</Typography>\\n              </li>\\n            )}\\n          </Listbox>\\n        </UtilityFragment>\\n      </ListboxContainer>\\n    </Combobox>\\n  );\\n};\\n\"},\"name\":\"Multiselect with filterable menu and automatic selection\"}],\"propertySections\":[{\"order\":1,\"name\":\"button\",\"type\":\"related\",\"selector\":\"<Button />\",\"description\":\"\"},{\"order\":2,\"name\":\"checkbox\",\"type\":\"related\",\"selector\":\"<Checkbox />\",\"description\":\"\"},{\"order\":3,\"name\":\"chip\",\"type\":\"related\",\"selector\":\"<Chip />\",\"description\":\"\"},{\"order\":4,\"name\":\"combobox\",\"type\":\"related\",\"selector\":\"<Combobox />\",\"description\":\"\"},{\"order\":5,\"name\":\"divider\",\"type\":\"related\",\"selector\":\"<Divider />\",\"description\":\"\"},{\"order\":6,\"name\":\"input\",\"type\":\"related\",\"selector\":\"<Input />\",\"description\":\"\"},{\"order\":7,\"name\":\"listbox\",\"type\":\"related\",\"selector\":\"<Listbox />\",\"description\":\"\"},{\"order\":8,\"name\":\"typography\",\"type\":\"related\",\"selector\":\"<Typography />\",\"description\":\"\"}],\"properties\":[]},{\"name\":\"navigation-drawer\",\"version\":\"0.0.1\",\"description\":\"Collapsible panel or menu next to page content that links to important pages or features.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default navigation drawers\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/default-navigation-drawer\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-navigation-drawer';\\nconst navElAriaLabel = 'Default drawer';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const DefaultNavigationDrawer = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                {tabsContent.map(tabContent => (\\n                  <Tab key={tabContent.id}>\\n                    <UtilityFragment vMarginLeft={14}>\\n                      <Button colorScheme=\\\"tertiary\\\" element={<a href={tabContent.href}>{tabContent.tabLabel}</a>} />\\n                    </UtilityFragment>\\n                  </Tab>\\n                ))}\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Default navigation drawer\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/navigation-drawer-with-active-element\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'navigation-drawer-with-active-element';\\nconst navElAriaLabel = 'Drawer with active element';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './navigation-drawer',\\n    active: true,\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const NavigationDrawerWithActiveElement = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                {tabsContent.map(tabContent => (\\n                  <Tab key={tabContent.id}>\\n                    <UtilityFragment vMarginLeft={14}>\\n                      <Button\\n                        aria-current={tabContent.active ? 'page' : false}\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={tabContent.href}>{tabContent.tabLabel}</a>}\\n                      />\\n                    </UtilityFragment>\\n                  </Tab>\\n                ))}\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Navigation drawer with active element\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/navigation-drawer-with-icons\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseTiny,\\n  VisaStatisticsTiny,\\n  VisaSettingsTiny,\\n  VisaSecurityTiny,\\n  VisaNotesTiny,\\n  VisaSupportTicketTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'navigation-drawer-with-icons';\\nconst navElAriaLabel = 'Drawer with icons';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './navigation-drawer',\\n    icon: <VisaStatisticsTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './navigation-drawer',\\n    icon: <VisaSettingsTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './navigation-drawer',\\n    icon: <VisaSecurityTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './navigation-drawer',\\n    icon: <VisaNotesTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './navigation-drawer',\\n    icon: <VisaSupportTicketTiny />,\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const NavigationDrawerWithIcons = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          id={id}\\n          ref={navDrawerRef}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                {tabsContent.map(tabContent => (\\n                  <Tab key={tabContent.id}>\\n                    <UtilityFragment vMarginLeft={14}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={\\n                          <a href={tabContent.href}>\\n                            {tabContent.icon}\\n                            {tabContent.tabLabel}\\n                          </a>\\n                        }\\n                      />\\n                    </UtilityFragment>\\n                  </Tab>\\n                ))}\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Navigation drawer with icons\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/navigation-drawer-with-nested-elements\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'navigation-drawer-with-nested-elements';\\nconst navElAriaLabel = 'Drawer with nested elements';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const NavigationDrawerWithNestedElements = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const [l1Label2Expanded, setL1Label2Expanded] = useState(false);\\n  const [l1Label4Expanded, setL1Label4Expanded] = useState(false);\\n  const [l2Label1Expanded, setL2Label1Expanded] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                <Tab>\\n                  <UtilityFragment vMarginLeft={14}>\\n                    <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 1</a>} />\\n                  </UtilityFragment>\\n                </Tab>\\n                <Tab>\\n                  <UtilityFragment vMarginLeft={14}>\\n                    <Button\\n                      aria-expanded={l1Label2Expanded}\\n                      aria-controls={`${id}-l1-label2-sub-menu`}\\n                      colorScheme=\\\"tertiary\\\"\\n                      onClick={() => setL1Label2Expanded(!l1Label2Expanded)}\\n                    >\\n                      L1 label 2\\n                      <TabSuffix element={l1Label2Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </Button>\\n                  </UtilityFragment>\\n                  <UtilityFragment vHide={!l1Label2Expanded}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-l1-label2-sub-menu`} aria-hidden={!l1Label2Expanded}>\\n                      <Tab>\\n                        <UtilityFragment vMarginLeft={28}>\\n                          <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L2 label 1</a>} />\\n                        </UtilityFragment>\\n                      </Tab>\\n                      <Tab>\\n                        <UtilityFragment vMarginLeft={28}>\\n                          <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L2 label 2</a>} />\\n                        </UtilityFragment>\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n                <Tab>\\n                  <UtilityFragment vMarginLeft={14}>\\n                    <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 3</a>} />\\n                  </UtilityFragment>\\n                </Tab>\\n                <Tab>\\n                  <UtilityFragment vMarginLeft={14}>\\n                    <Button\\n                      aria-expanded={l1Label4Expanded}\\n                      aria-controls={`${id}-l1-label4-sub-menu`}\\n                      colorScheme=\\\"tertiary\\\"\\n                      onClick={() => setL1Label4Expanded(!l1Label4Expanded)}\\n                    >\\n                      L1 label 4\\n                      <TabSuffix element={l1Label4Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                    </Button>\\n                  </UtilityFragment>\\n                  <UtilityFragment vHide={!l1Label4Expanded}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-l1-label4-sub-menu`} aria-hidden={!l1Label4Expanded}>\\n                      <Tab>\\n                        <UtilityFragment vMarginLeft={28}>\\n                          <Button\\n                            aria-expanded={l2Label1Expanded}\\n                            aria-controls={`${id}-l2-label1-sub-menu`}\\n                            colorScheme=\\\"tertiary\\\"\\n                            onClick={() => setL2Label1Expanded(!l2Label1Expanded)}\\n                          >\\n                            L2 label 1\\n                            <TabSuffix element={l2Label1Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                          </Button>\\n                        </UtilityFragment>\\n                        <UtilityFragment vHide={!l2Label1Expanded}>\\n                          <Tabs orientation=\\\"vertical\\\" id={`${id}-l2-label1-sub-menu`} aria-hidden={!l2Label1Expanded}>\\n                            <Tab>\\n                              <UtilityFragment vMarginLeft={42}>\\n                                <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L3 label 1</a>} />\\n                              </UtilityFragment>\\n                            </Tab>\\n                            <Tab>\\n                              <UtilityFragment vMarginLeft={42}>\\n                                <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L3 label 2</a>} />\\n                              </UtilityFragment>\\n                            </Tab>\\n                            <Tab>\\n                              <UtilityFragment vMarginLeft={42}>\\n                                <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L3 label 3</a>} />\\n                              </UtilityFragment>\\n                            </Tab>\\n                          </Tabs>\\n                        </UtilityFragment>\\n                      </Tab>\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n                <Tab>\\n                  <UtilityFragment vMarginLeft={14}>\\n                    <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 5</a>} />\\n                  </UtilityFragment>\\n                </Tab>\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Navigation drawer with nested elements\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/navigation-drawer-with-section-titles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'navigation-drawer-with-section-titles';\\nconst navElAriaLabel = 'Drawer with section titles';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const NavigationDrawerWithSectionTitles = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                <Tab>\\n                  <UtilityFragment>\\n                    <Tab sectionTitle tag=\\\"h2\\\">\\n                      Section Title 1\\n                    </Tab>\\n                  </UtilityFragment>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    <Tab>\\n                      <UtilityFragment >\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 1</a>} />\\n                      </UtilityFragment>\\n                    </Tab>\\n                    <Tab>\\n                      <UtilityFragment>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 2</a>} />\\n                      </UtilityFragment>\\n                    </Tab>\\n                    <Tab>\\n                      <UtilityFragment>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 3</a>} />\\n                      </UtilityFragment>\\n                    </Tab>\\n                  </Tabs>\\n                </Tab>\\n                <Tab>\\n                  <UtilityFragment>\\n                    <Tab sectionTitle tag=\\\"h2\\\">\\n                      Section Title 2\\n                    </Tab>\\n                  </UtilityFragment>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    <Tab>\\n                      <UtilityFragment>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 4</a>} />\\n                      </UtilityFragment>\\n                    </Tab>\\n                    <Tab>\\n                      <UtilityFragment>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 5</a>} />\\n                      </UtilityFragment>\\n                    </Tab>\\n                    <Tab>\\n                      <UtilityFragment>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 6</a>} />\\n                      </UtilityFragment>\\n                    </Tab>\\n                  </Tabs>\\n                </Tab>\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Navigation drawer with section titles\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/navigation-drawer-with-nested-elements-and-section-titles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'navigation-drawer-with-nested-elements-and-section-titles';\\nconst navElAriaLabel = 'Drawer with nested elements and section titles';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const NavigationDrawerWithNestedElementsAndSectionTitles = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const [l1Label2Expanded, setL1Label2Expanded] = useState(false);\\n  const [l2Label2Expanded, setL2Label2Expanded] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <UtilityFragment vGap={8}>\\n                <Tabs orientation=\\\"vertical\\\">\\n                  <Tab>\\n                    <Tab sectionTitle tag=\\\"h2\\\">\\n                      L1 Section Title 1\\n                    </Tab>\\n                    <Tabs orientation=\\\"vertical\\\">\\n                      <Tab>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 1</a>} />\\n                      </Tab>\\n                      <Tab>\\n                        <Button\\n                          aria-expanded={l1Label2Expanded}\\n                          aria-controls={`${id}-l1-label2-sub-menu`}\\n                          colorScheme=\\\"tertiary\\\"\\n                          onClick={() => setL1Label2Expanded(!l1Label2Expanded)}\\n                        >\\n                          L1 label 2\\n                          <TabSuffix element={l1Label2Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                        </Button>\\n                        <UtilityFragment vHide={!l1Label2Expanded}>\\n                          <Tabs orientation=\\\"vertical\\\" id={`${id}-l1-label2-sub-menu`} tag=\\\"div\\\">\\n                            <Tab sectionTitle tag=\\\"h3\\\">\\n                              L2 Section Title 1\\n                            </Tab>\\n                            <Tabs orientation=\\\"vertical\\\">\\n                              <Tab>\\n                                <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L2 label 1</a>} />\\n                              </Tab>\\n                              <Tab>\\n                                <Button\\n                                  aria-expanded={l2Label2Expanded}\\n                                  aria-controls={`${id}-l2-label2-sub-menu`}\\n                                  colorScheme=\\\"tertiary\\\"\\n                                  onClick={() => setL2Label2Expanded(!l2Label2Expanded)}\\n                                >\\n                                  L2 label 2\\n                                  <TabSuffix\\n                                    element={l2Label2Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n                                  />\\n                                </Button>\\n\\n                                <UtilityFragment vHide={!l2Label2Expanded}>\\n                                  <Tabs orientation=\\\"vertical\\\" id={`${id}-l2-label2-sub-menu`} tag=\\\"div\\\">\\n                                    <Tab sectionTitle tag=\\\"h4\\\">\\n                                      L3 Section Title 1\\n                                    </Tab>\\n                                    <Tabs orientation=\\\"vertical\\\">\\n                                      <Tab>\\n                                        <Button\\n                                          colorScheme=\\\"tertiary\\\"\\n                                          element={<a href=\\\"./navigation-drawer\\\">L3 label 1</a>}\\n                                        />\\n                                      </Tab>\\n                                      <Tab>\\n                                        <Button\\n                                          colorScheme=\\\"tertiary\\\"\\n                                          element={<a href=\\\"./navigation-drawer\\\">L3 label 2</a>}\\n                                        />\\n                                      </Tab>\\n                                    </Tabs>\\n                                  </Tabs>\\n                                </UtilityFragment>\\n                              </Tab>\\n                            </Tabs>\\n                          </Tabs>\\n                        </UtilityFragment>\\n                      </Tab>\\n                    </Tabs>\\n                  </Tab>\\n                  <Tab>\\n                    <Tab sectionTitle tag=\\\"h2\\\">\\n                      L1 Section Title 2\\n                    </Tab>\\n                    <Tabs orientation=\\\"vertical\\\">\\n                      <Tab>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 3</a>} />\\n                      </Tab>\\n                      <Tab>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 4</a>} />\\n                      </Tab>\\n                    </Tabs>\\n                  </Tab>\\n                </Tabs>\\n              </UtilityFragment>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Navigation drawer with nested elements and section titles\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/alternate-navigation-drawer\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-navigation-drawer';\\nconst navElAriaLabel = 'Alternate drawer';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const AlternateNavigationDrawer = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            alternate\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                {tabsContent.map(tabContent => (\\n                  <Tab key={tabContent.id}>\\n                    <UtilityFragment vMarginLeft={14}>\\n                      <Button colorScheme=\\\"tertiary\\\" element={<a href={tabContent.href}>{tabContent.tabLabel}</a>} />\\n                    </UtilityFragment>\\n                  </Tab>\\n                ))}\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Alternate navigation drawer\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/alternate-navigation-drawer-with-active-element\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaAccountTiny, VisaChevronDownTiny, VisaChevronUpTiny, VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-navigation-drawer-with-active-element';\\nconst navElAriaLabel = 'Alternate drawer with active element';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './navigation-drawer',\\n    active: true,\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const AlternateNavigationDrawerWithActiveElement = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            alternate\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                {tabsContent.map(tabContent => (\\n                  <Tab key={tabContent.id}>\\n                    <UtilityFragment vMarginLeft={14}>\\n                      <Button\\n                        aria-current={tabContent.active ? 'page' : false}\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={<a href={tabContent.href}>{tabContent.tabLabel}</a>}\\n                      />\\n                    </UtilityFragment>\\n                  </Tab>\\n                ))}\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Alternate navigation drawer with active element\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Default navigation drawers\",\"url\":\"components/navigation-drawer/alternate-navigation-drawer-with-icons\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaCloseTiny,\\n  VisaStatisticsTiny,\\n  VisaSettingsTiny,\\n  VisaSecurityTiny,\\n  VisaNotesTiny,\\n  VisaSupportTicketTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-navigation-drawer-with-icons';\\nconst navElAriaLabel = 'Alternate drawer with icons';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './navigation-drawer',\\n    icon: <VisaStatisticsTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './navigation-drawer',\\n    icon: <VisaSettingsTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './navigation-drawer',\\n    icon: <VisaSecurityTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './navigation-drawer',\\n    icon: <VisaNotesTiny />,\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './navigation-drawer',\\n    icon: <VisaSupportTicketTiny />,\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './navigation-drawer',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './navigation-drawer',\\n  },\\n];\\n\\nexport const AlternateNavigationDrawerWithIcons = () => {\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const navDrawerRef = useRef<HTMLDialogElement>(null);\\n\\n  return (\\n    <>\\n      <UtilityFragment vMargin={10}>\\n        <Button onClick={() => navDrawerRef.current?.showModal()}>Open drawer</Button>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginHorizontal={0}>\\n        <Panel\\n          aria-modal=\\\"true\\\"\\n          ref={navDrawerRef}\\n          id={id}\\n          tag=\\\"dialog\\\"\\n          style={\\n            {\\n              '--v-panel-inline-size': 'initial',\\n            } as CSSProperties\\n          }\\n        >\\n          <Nav\\n            alternate\\n            drawer\\n            orientation=\\\"vertical\\\"\\n            tag=\\\"div\\\"\\n            style={\\n              {\\n                inlineSize: '242px',\\n              } as CSSProperties\\n            }\\n          >\\n            <UtilityFragment vMarginRight={4} vMarginLeft=\\\"auto\\\">\\n              <Button\\n                aria-label=\\\"Close\\\"\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => navDrawerRef.current?.close()}\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment\\n              vFlex\\n              vFlexCol\\n              vGap={12}\\n              vMarginTop={4}\\n              vMarginRight={16}\\n              vMarginBottom={16}\\n              vMarginLeft={24}\\n            >\\n              <Link\\n                aria-label=\\\"Visa Application Name Home\\\"\\n                href=\\\"https://www.visa.com\\\"\\n                id={`${id}-home-link`}\\n                noUnderline\\n                style={{ backgroundColor: 'transparent' }}\\n              >\\n                <VisaLogo />\\n                <NavAppName>\\n                  <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                </NavAppName>\\n              </Link>\\n            </UtilityFragment>\\n            <nav aria-label={navElAriaLabel}>\\n              <Tabs orientation=\\\"vertical\\\">\\n                {tabsContent.map(tabContent => (\\n                  <Tab key={tabContent.id}>\\n                    <UtilityFragment vMarginLeft={14}>\\n                      <Button\\n                        colorScheme=\\\"tertiary\\\"\\n                        element={\\n                          <a href={tabContent.href}>\\n                            {tabContent.icon}\\n                            {tabContent.tabLabel}\\n                          </a>\\n                        }\\n                      />\\n                    </UtilityFragment>\\n                  </Tab>\\n                ))}\\n              </Tabs>\\n            </nav>\\n            <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n              <Divider dividerType=\\\"decorative\\\" />\\n              <Tab tag=\\\"div\\\">\\n                <Button\\n                  aria-expanded={accountTabOpen}\\n                  aria-controls={`${id}-account-sub-menu`}\\n                  aria-label=\\\"Alex Miller\\\"\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                >\\n                  <VisaAccountTiny />\\n                  Alex Miller\\n                  <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                </Button>\\n                <UtilityFragment vHide={!accountTabOpen}>\\n                  <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                    {accountSubItems.map(accountSubItem => (\\n                      <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </Tab>\\n            </Utility>\\n          </Nav>\\n        </Panel>\\n      </UtilityFragment>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Alternate navigation drawer with icons\"}],\"propertySections\":[{\"order\":1,\"name\":\"Nav\",\"selector\":\"<Nav />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Menu or panel at the top or next to page content that links to important pages or features.\"},{\"order\":2,\"name\":\"tabs\",\"type\":\"related\",\"selector\":\"<Tabs />\",\"description\":\"\"}],\"properties\":[{\"name\":\"alternate\",\"section\":\"Nav\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate\"}},{\"name\":\"drawer\",\"section\":\"Nav\",\"data\":{\"name\":\"drawer\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Drawer\"}},{\"name\":\"ref\",\"section\":\"Nav\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Nav\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"nav\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"pagination\",\"version\":\"0.0.1\",\"description\":\"Set of links used to navigate content split across multiple pages.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default paginations\",\"description\":\"\",\"order\":1},{\"name\":\"Slim paginations\",\"description\":\"\",\"order\":2},{\"name\":\"Custom paginations\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default paginations\",\"url\":\"components/pagination/one-digit-pagination\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowEndTiny,\\n  VisaArrowStartTiny,\\n  VisaChevronLeftTiny,\\n  VisaChevronRightTiny,\\n  VisaOptionHorizontalTiny,\\n} from '@visa/nova-icons-react';\\nimport { Button, Pagination, PaginationOverflow } from '@visa/nova-react';\\n\\nexport const OneDigitPagination = () => {\\n  return (\\n    <nav aria-label=\\\"1 digit pagination\\\" role=\\\"navigation\\\">\\n      <Pagination className=\\\"v-flex v-flex-row v-align-items-center v-gap-4\\\">\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Go to first page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" disabled iconButton>\\n            <VisaArrowStartTiny rtl />\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Go to previous page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" disabled iconButton>\\n            <VisaChevronLeftTiny rtl />\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-current=\\\"true\\\" aria-label=\\\"Page 1\\\" colorScheme=\\\"tertiary\\\">\\n            1\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Page 2\\\" colorScheme=\\\"tertiary\\\">\\n            2\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Page 3\\\" colorScheme=\\\"tertiary\\\">\\n            3\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 4\\\" colorScheme=\\\"tertiary\\\">\\n            4\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 5\\\" colorScheme=\\\"tertiary\\\">\\n            5\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 6\\\" colorScheme=\\\"tertiary\\\">\\n            6\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 7\\\" colorScheme=\\\"tertiary\\\">\\n            7\\n          </Button>\\n        </li>\\n        <PaginationOverflow className=\\\"v-flex v-align-items-center v-mobile-container-hide\\\">\\n          <VisaOptionHorizontalTiny />\\n        </PaginationOverflow>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 100\\\" colorScheme=\\\"tertiary\\\">\\n            100\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Go to next page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaChevronRightTiny rtl />\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Go to last page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaArrowEndTiny rtl />\\n          </Button>\\n        </li>\\n      </Pagination>\\n    </nav>\\n  );\\n};\\n\"},\"name\":\"Default pagination with first page selected\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default paginations\",\"url\":\"components/pagination/two-digit-pagination\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowEndTiny,\\n  VisaArrowStartTiny,\\n  VisaChevronLeftTiny,\\n  VisaChevronRightTiny,\\n  VisaOptionHorizontalTiny,\\n} from '@visa/nova-icons-react';\\nimport { Button, Pagination, PaginationOverflow } from '@visa/nova-react';\\n\\nexport const TwoDigitPagination = () => {\\n  return (\\n    <nav aria-label=\\\"2 digit pagination\\\" role=\\\"navigation\\\">\\n      <Pagination className=\\\"v-flex v-flex-row v-align-items-center v-gap-4\\\">\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Go to first page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaArrowStartTiny rtl />\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Go to previous page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaChevronLeftTiny rtl />\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Page 1\\\" className=\\\"v-mobile-container-hide\\\" colorScheme=\\\"tertiary\\\">\\n            1\\n          </Button>\\n        </li>\\n        <PaginationOverflow className=\\\"v-flex v-align-items-center v-mobile-container-hide\\\">\\n          <VisaOptionHorizontalTiny />\\n        </PaginationOverflow>\\n        <li>\\n          <Button aria-label=\\\"Page 4\\\" colorScheme=\\\"tertiary\\\">\\n            4\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-current=\\\"true\\\" aria-label=\\\"Page 5\\\" colorScheme=\\\"tertiary\\\">\\n            5\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Page 6\\\" colorScheme=\\\"tertiary\\\">\\n            6\\n          </Button>\\n        </li>\\n        <PaginationOverflow className=\\\"v-flex v-align-items-center v-mobile-container-hide\\\">\\n          <VisaOptionHorizontalTiny />\\n        </PaginationOverflow>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 100\\\" colorScheme=\\\"tertiary\\\">\\n            100\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Go to next page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaChevronRightTiny rtl />\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Go to last page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaArrowEndTiny rtl />\\n          </Button>\\n        </li>\\n      </Pagination>\\n    </nav>\\n  );\\n};\\n\"},\"name\":\"Default pagination with middle page selected\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default paginations\",\"url\":\"components/pagination/last-page-selected\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowEndTiny,\\n  VisaArrowStartTiny,\\n  VisaChevronLeftTiny,\\n  VisaChevronRightTiny,\\n  VisaOptionHorizontalTiny,\\n} from '@visa/nova-icons-react';\\nimport { Button, Pagination, PaginationOverflow } from '@visa/nova-react';\\n\\nexport const LastDigitPagination = () => {\\n  return (\\n    <nav aria-label=\\\"1 digit pagination\\\" role=\\\"navigation\\\">\\n      <Pagination className=\\\"v-flex v-flex-row v-align-items-center v-gap-4\\\">\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Go to first page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaArrowStartTiny rtl />\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Go to previous page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaChevronLeftTiny rtl />\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Page 1\\\" colorScheme=\\\"tertiary\\\">\\n            1\\n          </Button>\\n        </li>\\n        <PaginationOverflow className=\\\"v-flex v-align-items-center v-mobile-container-hide\\\">\\n          <VisaOptionHorizontalTiny />\\n        </PaginationOverflow>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 96\\\" colorScheme=\\\"tertiary\\\">\\n            96\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 97\\\" colorScheme=\\\"tertiary\\\">\\n            97\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 98\\\" colorScheme=\\\"tertiary\\\">\\n            98\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 99\\\" colorScheme=\\\"tertiary\\\">\\n            99\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 100\\\" aria-current=\\\"true\\\" colorScheme=\\\"tertiary\\\">\\n            100\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Go to next page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" disabled iconButton>\\n            <VisaChevronRightTiny rtl />\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Go to last page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" disabled iconButton>\\n            <VisaArrowEndTiny rtl />\\n          </Button>\\n        </li>\\n      </Pagination>\\n    </nav>\\n  );\\n};\\n\"},\"name\":\"Default pagination with last page selected\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Slim paginations\",\"url\":\"components/pagination/slim-pagination\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronLeftTiny, VisaChevronRightTiny } from '@visa/nova-icons-react';\\nimport { Button, Pagination } from '@visa/nova-react';\\n\\nexport const SlimPagination = () => {\\n  return (\\n    <nav aria-label=\\\"pagination\\\">\\n      <Pagination className=\\\"v-flex v-flex-row v-align-items-center v-gap-4\\\">\\n        <li>\\n          <Button aria-label=\\\"Go to previous page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" disabled iconButton>\\n            <VisaChevronLeftTiny rtl />\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-current=\\\"true\\\" aria-label=\\\"Page 1\\\" colorScheme=\\\"tertiary\\\">\\n            1\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 2\\\" colorScheme=\\\"tertiary\\\">\\n            2\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 3\\\" colorScheme=\\\"tertiary\\\">\\n            3\\n          </Button>\\n        </li>\\n        <li className=\\\"v-mobile-container-hide\\\">\\n          <Button aria-label=\\\"Page 4\\\" colorScheme=\\\"tertiary\\\">\\n            4\\n          </Button>\\n        </li>\\n        <li>\\n          <Button aria-label=\\\"Go to next page\\\" buttonSize=\\\"small\\\" colorScheme=\\\"tertiary\\\" iconButton>\\n            <VisaChevronRightTiny rtl />\\n          </Button>\\n        </li>\\n      </Pagination>\\n    </nav>\\n  );\\n};\\n\"},\"name\":\"Default slim pagination\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom paginations\",\"url\":\"components/pagination/table-pagination\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowEndTiny,\\n  VisaArrowStartTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronLeftTiny,\\n  VisaChevronRightTiny,\\n  VisaOptionHorizontalTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  InputContainer,\\n  InputControl,\\n  InputMessage,\\n  Label,\\n  Pagination,\\n  PaginationOverflow,\\n  Select,\\n  Utility,\\n  UtilityFragment,\\n  calculatePagesFromTo,\\n  calculateTotalPages,\\n  usePagination,\\n} from '@visa/nova-react';\\nimport { CSSProperties, FormEvent, useState } from 'react';\\n\\nconst totalItems = 100;\\n\\nexport const TablePagination = () => {\\n  const [itemsPerPage, setItemsPerPage] = useState(10);\\n\\n  const totalPages = calculateTotalPages(totalItems, itemsPerPage);\\n  const {\\n    isFirstPage,\\n    isLastPage,\\n    onFirstPage,\\n    onLastPage,\\n    onNextPage,\\n    onPageChange,\\n    onPreviousPage,\\n    pages,\\n    selectedPage,\\n  } = usePagination({ totalPages });\\n\\n  const { from, to } = calculatePagesFromTo(totalItems, itemsPerPage, selectedPage);\\n\\n  const onItemsPerPageChange = (event: FormEvent<HTMLSelectElement>) => {\\n    onFirstPage();\\n    setItemsPerPage(+event.currentTarget.value);\\n  };\\n\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vFlexRow vFlexWrapReverse vGap={10} vJustifyContent=\\\"between\\\">\\n      <Utility\\n        style={{ textWrap: 'nowrap' } as CSSProperties}\\n        tag=\\\"fieldset\\\"\\n        vAlignItems=\\\"center\\\"\\n        vFlex\\n        vFlexRow\\n        vGap={12}\\n      >\\n        <Label htmlFor=\\\"select-items-per-page\\\">Items Per Page</Label>\\n        <InputContainer>\\n          <Select\\n            id=\\\"select-items-per-page\\\"\\n            name=\\\"select-items-per-page\\\"\\n            onChange={onItemsPerPageChange}\\n            value={itemsPerPage}\\n          >\\n            <option value=\\\"10\\\">10</option>\\n            <option value=\\\"20\\\">20</option>\\n            <option value=\\\"50\\\">50</option>\\n          </Select>\\n          <InputControl>\\n            <VisaChevronDownTiny />\\n          </InputControl>\\n        </InputContainer>\\n        <InputMessage id=\\\"select-default-message\\\">{`${from} - ${to} of ${totalItems}`}</InputMessage>\\n      </Utility>\\n      <UtilityFragment>\\n        <nav aria-label=\\\"table pagination\\\" role=\\\"navigation\\\">\\n          <UtilityFragment vAlignItems=\\\"center\\\" vFlex vFlexRow vGap={4}>\\n            <Pagination>\\n              <li>\\n                <Button\\n                  aria-label=\\\"Go to first page\\\"\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  disabled={isFirstPage}\\n                  iconButton\\n                  onClick={onFirstPage}\\n                >\\n                  <VisaArrowStartTiny rtl />\\n                </Button>\\n              </li>\\n              <li>\\n                <Button\\n                  aria-label=\\\"Go to previous page\\\"\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  disabled={isFirstPage}\\n                  iconButton\\n                  onClick={onPreviousPage}\\n                >\\n                  <VisaChevronLeftTiny rtl />\\n                </Button>\\n              </li>\\n              {pages.map((pageNumber, index) =>\\n                pageNumber === -1 ? (\\n                  <UtilityFragment key={`table-pagination-ellipse-${index}`} vAlignItems=\\\"center\\\" vFlex>\\n                    <PaginationOverflow>\\n                      <VisaOptionHorizontalTiny />\\n                    </PaginationOverflow>\\n                  </UtilityFragment>\\n                ) : (\\n                  <li key={`table-pagination-page-${pageNumber}`}>\\n                    <Button\\n                      aria-current={selectedPage === pageNumber}\\n                      aria-label={`Page ${pageNumber}`}\\n                      colorScheme=\\\"tertiary\\\"\\n                      onClick={() => onPageChange(pageNumber as number)}\\n                    >\\n                      {pageNumber}\\n                    </Button>\\n                  </li>\\n                )\\n              )}\\n              <li>\\n                <Button\\n                  aria-label=\\\"Go to next page\\\"\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  disabled={isLastPage}\\n                  iconButton\\n                  onClick={onNextPage}\\n                >\\n                  <VisaChevronRightTiny rtl />\\n                </Button>\\n              </li>\\n              <li>\\n                <Button\\n                  aria-label=\\\"Go to last page\\\"\\n                  buttonSize=\\\"small\\\"\\n                  colorScheme=\\\"tertiary\\\"\\n                  disabled={isLastPage}\\n                  iconButton\\n                  onClick={onLastPage}\\n                >\\n                  <VisaArrowEndTiny rtl />\\n                </Button>\\n              </li>\\n            </Pagination>\\n          </UtilityFragment>\\n        </nav>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Pagination for tables\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom paginations\",\"url\":\"components/pagination/min-max-pagination\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowEndTiny,\\n  VisaArrowStartTiny,\\n  VisaChevronLeftTiny,\\n  VisaChevronRightTiny,\\n  VisaOptionHorizontalTiny,\\n} from '@visa/nova-icons-react';\\nimport { Button, Pagination, PaginationOverflow, UtilityFragment, usePagination } from '@visa/nova-react';\\n\\nexport const MinMaxPagination = () => {\\n  const {\\n    isFirstPage,\\n    isLastPage,\\n    onFirstPage,\\n    onLastPage,\\n    onNextPage,\\n    onPageChange,\\n    onPreviousPage,\\n    pages,\\n    selectedPage,\\n  } = usePagination({ maxPageNumber: 75, startPage: 50, totalPages: 100 });\\n\\n  return (\\n    <nav aria-label=\\\"minimum and maximum pagination\\\" role=\\\"navigation\\\">\\n      <UtilityFragment vAlignItems=\\\"center\\\" vFlex vFlexRow vGap={4}>\\n        <Pagination>\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to first page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isFirstPage}\\n              iconButton\\n              onClick={onFirstPage}\\n            >\\n              <VisaArrowStartTiny rtl />\\n            </Button>\\n          </li>\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to previous page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isFirstPage}\\n              iconButton\\n              onClick={onPreviousPage}\\n            >\\n              <VisaChevronLeftTiny rtl />\\n            </Button>\\n          </li>\\n          {pages.map((pageNumber, index) =>\\n            pageNumber === -1 ? (\\n              <UtilityFragment key={`min-max-pagination-ellipse-${index}`} vAlignItems=\\\"center\\\" vFlex>\\n                <PaginationOverflow>\\n                  <VisaOptionHorizontalTiny />\\n                </PaginationOverflow>\\n              </UtilityFragment>\\n            ) : (\\n              <li key={`min-max-pagination-page-${pageNumber}`}>\\n                <Button\\n                  aria-current={selectedPage === pageNumber}\\n                  aria-label={`Page ${pageNumber}`}\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => onPageChange(pageNumber as number)}\\n                >\\n                  {pageNumber}\\n                </Button>\\n              </li>\\n            )\\n          )}\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to next page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isLastPage}\\n              iconButton\\n              onClick={onNextPage}\\n            >\\n              <VisaChevronRightTiny rtl />\\n            </Button>\\n          </li>\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to last page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isLastPage}\\n              iconButton\\n              onClick={onLastPage}\\n            >\\n              <VisaArrowEndTiny rtl />\\n            </Button>\\n          </li>\\n        </Pagination>\\n      </UtilityFragment>\\n    </nav>\\n  );\\n};\\n\"},\"name\":\"Pagination with minimum and maximum\"}],\"propertySections\":[{\"order\":1,\"name\":\"Pagination\",\"selector\":\"<Pagination />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Set of links used to navigate content split across multiple pages.\"},{\"order\":2,\"name\":\"PaginationOverflow\",\"selector\":\"<PaginationOverflow />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Element to show hidden elements within pagination component, usually used with ellipsis icon.\"},{\"order\":3,\"name\":\"usePagination\",\"selector\":null,\"libraryId\":null,\"componentId\":null,\"type\":\"hooks\",\"description\":\"This hook is used to manage pagination events, state, and visible page blocks.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Pagination\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Pagination\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"ul\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"PaginationOverflow\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"PaginationOverflow\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"li\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"panel\",\"version\":\"0.0.1\",\"description\":\"Collapsible or persistent containers used to present supplementary information.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default panels\",\"description\":\"\",\"order\":1},{\"name\":\"Expandable panels\",\"description\":\"\",\"order\":2},{\"name\":\"Tabbed panels\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default panels\",\"url\":\"components/panel/modal-panel\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'modal-panel-default';\\n\\nexport const ModalPanel = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open modal panel</Button>\\n      <Panel\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        aria-modal=\\\"true\\\"\\n        id={id}\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n        ref={ref}\\n        tag=\\\"dialog\\\"\\n      >\\n        <PanelContent>\\n          <Utility element={<PanelHeader />} vFlex vFlexRow vJustifyContent=\\\"between\\\" vGap={4}>\\n            <Typography id={`${id}-title`} tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n              Panel title\\n            </Typography>\\n            <Button\\n              aria-label=\\\"Close panel\\\"\\n              buttonSize=\\\"small\\\"\\n              className=\\\"-v-mt-3 -v-mr-8\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              iconButton\\n              onClick={() => ref.current?.close()}\\n              subtle\\n            >\\n              <VisaCloseTiny />\\n            </Button>\\n          </Utility>\\n          <PanelBody>\\n            <Typography id={`${id}-description`} tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n              Panel subtitle\\n            </Typography>\\n            <Typography>\\n              This is required text that can be used to describe the panel title and subtitle in more detail.\\n            </Typography>\\n          </PanelBody>\\n        </PanelContent>\\n      </Panel>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Modal panel\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default panels\",\"url\":\"components/panel/default-panel\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaCloseTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\n\\nexport const DefaultPanel = () => {\\n  return (\\n    <Utility vFlex>\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <Panel style={{ minInlineSize: 'initial' }}>\\n          <PanelContent>\\n            <Utility element={<PanelHeader />} vFlex vFlexRow vGap={4} vJustifyContent=\\\"between\\\">\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n                Panel title\\n              </Typography>\\n              <Button\\n                aria-label=\\\"Close panel\\\"\\n                buttonSize=\\\"small\\\"\\n                className=\\\"-v-mt-3 -v-mr-8\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                subtle\\n              >\\n                <VisaCloseTiny />\\n              </Button>\\n            </Utility>\\n            <PanelBody>\\n              <Typography tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n                Panel subtitle\\n              </Typography>\\n              <Typography>\\n                This is required text that can be used to describe the panel title and subtitle in more detail.\\n              </Typography>\\n            </PanelBody>\\n          </PanelContent>\\n        </Panel>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default responsive panel\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Expandable panels\",\"url\":\"components/panel/expandable-panel\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMediaFastForwardTiny, VisaMediaRewindTiny } from '@visa/nova-icons-react';\\nimport {\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  PanelToggle,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\n\\nexport const ModalExpandablePanel = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <Utility vFlex>\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <PanelToggle\\n          aria-expanded=\\\"false\\\"\\n          aria-label=\\\"Open panel\\\"\\n          buttonSize=\\\"large\\\"\\n          iconButton\\n          iconTwoColor\\n          onClick={() => ref.current?.showModal()}\\n        >\\n          <VisaMediaRewindTiny rtl />\\n        </PanelToggle>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <Panel\\n          expandable\\n          onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n          ref={ref}\\n          style={{ height: 400 }}\\n          tag=\\\"dialog\\\"\\n        >\\n          <PanelToggle\\n            aria-expanded=\\\"true\\\"\\n            aria-label=\\\"Close panel\\\"\\n            buttonSize=\\\"large\\\"\\n            iconButton\\n            iconTwoColor\\n            onClick={() => ref.current?.close()}\\n          >\\n            <VisaMediaFastForwardTiny rtl />\\n          </PanelToggle>\\n\\n          <PanelContent>\\n            <PanelHeader>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n                Panel title\\n              </Typography>\\n            </PanelHeader>\\n            <PanelBody>\\n              <Typography tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n                Panel subtitle\\n              </Typography>\\n              <Typography>\\n                This is required text that can be used to describe the panel title and subtitle in more detail.\\n              </Typography>\\n            </PanelBody>\\n          </PanelContent>\\n        </Panel>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Modal expandable panel\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Expandable panels\",\"url\":\"components/panel/expandable-responsive-panel\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMediaFastForwardTiny, VisaMediaRewindTiny } from '@visa/nova-icons-react';\\nimport {\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  PanelToggle,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const ExpandableResponsivePanel = () => {\\n  const [open, setOpen] = useState(true);\\n\\n  return (\\n    <Utility vFlex style={{ minBlockSize: 200 }}>\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <PanelToggle\\n          aria-expanded={open}\\n          aria-label={open ? 'Close panel' : 'Open panel'}\\n          buttonSize=\\\"large\\\"\\n          iconButton\\n          iconTwoColor\\n          onClick={() => setOpen(open ? false : true)}\\n        >\\n          {open ? <VisaMediaFastForwardTiny rtl /> : <VisaMediaRewindTiny rtl />}\\n        </PanelToggle>\\n      </UtilityFragment>\\n\\n      {open && (\\n        <Panel expandable style={{ minInlineSize: 'initial' }}>\\n          <PanelContent>\\n            <PanelHeader>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n                Panel title\\n              </Typography>\\n            </PanelHeader>\\n            <PanelBody>\\n              <Typography tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n                Panel subtitle\\n              </Typography>\\n              <Typography>\\n                This is required text that can be used to describe the panel title and subtitle in more detail.\\n              </Typography>\\n            </PanelBody>\\n          </PanelContent>\\n        </Panel>\\n      )}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Responsive expanded panel\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Expandable panels\",\"url\":\"components/panel/expandable-panel-secondary\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMediaFastForwardTiny, VisaMediaRewindTiny } from '@visa/nova-icons-react';\\nimport {\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  PanelToggle,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\n\\nexport const SecondaryModalExpandablePanel = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <Utility vFlex>\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <PanelToggle\\n          aria-expanded={false}\\n          aria-label=\\\"Open panel\\\"\\n          buttonSize=\\\"large\\\"\\n          colorScheme=\\\"secondary\\\"\\n          iconButton\\n          onClick={() => ref.current?.showModal()}\\n        >\\n          <VisaMediaRewindTiny rtl />\\n        </PanelToggle>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <Panel\\n          expandable\\n          onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n          ref={ref}\\n          style={{ height: 400 }}\\n          tag=\\\"dialog\\\"\\n        >\\n          <PanelToggle\\n            aria-expanded=\\\"true\\\"\\n            aria-label=\\\"Close panel\\\"\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"secondary\\\"\\n            iconButton\\n            onClick={() => ref.current?.close()}\\n          >\\n            <VisaMediaFastForwardTiny rtl />\\n          </PanelToggle>\\n\\n          <PanelContent>\\n            <PanelHeader>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n                Panel title\\n              </Typography>\\n            </PanelHeader>\\n            <PanelBody>\\n              <Typography tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n                Panel subtitle\\n              </Typography>\\n              <Typography>\\n                This is required text that can be used to describe the panel title and subtitle in more detail.\\n              </Typography>\\n            </PanelBody>\\n          </PanelContent>\\n        </Panel>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Modal expandable panel with secondary button\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Expandable panels\",\"url\":\"components/panel/expandable-panel-skrim\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMediaFastForwardTiny, VisaMediaRewindTiny } from '@visa/nova-icons-react';\\nimport {\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  PanelToggle,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\n\\nexport const ModalExpandablePanelWithSkrim = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <Utility vFlex>\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <PanelToggle\\n          aria-expanded={false}\\n          aria-label=\\\"Open panel\\\"\\n          buttonSize=\\\"large\\\"\\n          iconButton\\n          iconTwoColor\\n          onClick={() => ref.current?.showModal()}\\n        >\\n          <VisaMediaRewindTiny rtl />\\n        </PanelToggle>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <Panel\\n          expandable\\n          onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n          ref={ref}\\n          skrim\\n          style={{ height: 400 }}\\n          tag=\\\"dialog\\\"\\n        >\\n          <PanelToggle\\n            aria-expanded=\\\"true\\\"\\n            aria-label=\\\"Close panel\\\"\\n            buttonSize=\\\"large\\\"\\n            iconButton\\n            iconTwoColor\\n            onClick={() => ref.current?.close()}\\n          >\\n            <VisaMediaFastForwardTiny rtl />\\n          </PanelToggle>\\n\\n          <PanelContent>\\n            <PanelHeader>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n                Panel title\\n              </Typography>\\n            </PanelHeader>\\n            <PanelBody>\\n              <Typography tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n                Panel subtitle\\n              </Typography>\\n              <Typography>\\n                This is required text that can be used to describe the panel title and subtitle in more detail.\\n              </Typography>\\n            </PanelBody>\\n          </PanelContent>\\n        </Panel>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Modal expandable panel with skrim\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Tabbed panels\",\"url\":\"components/panel/tabbed-expandable-panel\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMediaFastForwardTiny, VisaMediaRewindTiny } from '@visa/nova-icons-react';\\nimport {\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  PanelToggle,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n  PanelTabs,\\n  Button,\\n  UtilityFragment,\\n  Tab,\\n  Divider,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'tabbed-expandable-panel-example';\\n\\nconst tabs = ['FAQ', 'Chat', 'Contact'];\\n\\nexport const TabbedModalExpandablePanel = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\\n\\n  return (\\n    <Utility vFlex>\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <PanelToggle\\n          aria-expanded={false}\\n          aria-label=\\\"Open panel\\\"\\n          buttonSize=\\\"large\\\"\\n          iconButton\\n          iconTwoColor\\n          onClick={() => ref.current?.showModal()}\\n        >\\n          <VisaMediaRewindTiny rtl />\\n        </PanelToggle>\\n      </UtilityFragment>\\n\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <Panel\\n          expandable\\n          onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n          ref={ref}\\n          style={{ height: 400 }}\\n          tag=\\\"dialog\\\"\\n        >\\n          <PanelToggle\\n            aria-expanded=\\\"true\\\"\\n            aria-label=\\\"Close panel\\\"\\n            buttonSize=\\\"large\\\"\\n            iconButton\\n            iconTwoColor\\n            onClick={() => ref.current?.close()}\\n          >\\n            <VisaMediaFastForwardTiny rtl />\\n          </PanelToggle>\\n\\n          <PanelContent>\\n            <PanelTabs orientation=\\\"horizontal\\\" role=\\\"tablist\\\">\\n              {tabs.map((tab, index) => (\\n                <Tab key={id + tab} role=\\\"none\\\">\\n                  <Button\\n                    aria-label={tab}\\n                    aria-selected={index === selectedTabIndex}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setSelectedTabIndex(index)}\\n                    role=\\\"tab\\\"\\n                  >\\n                    {tab}\\n                  </Button>\\n                </Tab>\\n              ))}\\n            </PanelTabs>\\n            <Divider dividerType=\\\"decorative\\\" />\\n            <PanelHeader>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n                Panel title\\n              </Typography>\\n            </PanelHeader>\\n            <PanelBody>\\n              <Typography tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n                Panel subtitle\\n              </Typography>\\n              <Typography>\\n                This is required text that can be used to describe the panel title and subtitle in more detail.\\n              </Typography>\\n            </PanelBody>\\n          </PanelContent>\\n        </Panel>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Tabbed modal expandable panel\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Tabbed panels\",\"url\":\"components/panel/tabbed-expandable-responsive-panel\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMediaFastForwardTiny, VisaMediaRewindTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Panel,\\n  PanelBody,\\n  PanelContent,\\n  PanelHeader,\\n  PanelTabs,\\n  PanelToggle,\\n  Tab,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'tabbed-expandable-responsive-panel-example';\\n\\nconst tabs = ['FAQ', 'Chat', 'Contact'];\\n\\nexport const TabbedExpandableResponsivePanel = () => {\\n  const [open, setOpen] = useState(true);\\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\\n\\n  return (\\n    <Utility vFlex style={{ minBlockSize: 200 }}>\\n      <UtilityFragment vMarginLeft=\\\"auto\\\">\\n        <PanelToggle\\n          aria-expanded={open}\\n          aria-label={open ? 'Close panel' : 'Open panel'}\\n          buttonSize=\\\"large\\\"\\n          iconButton\\n          iconTwoColor\\n          onClick={() => setOpen(open ? false : true)}\\n        >\\n          {open ? <VisaMediaFastForwardTiny rtl /> : <VisaMediaRewindTiny rtl />}\\n        </PanelToggle>\\n      </UtilityFragment>\\n\\n      {open && (\\n        <Panel expandable>\\n          <PanelContent>\\n            <PanelTabs orientation=\\\"horizontal\\\" role=\\\"tablist\\\">\\n              {tabs.map((tab, index) => (\\n                <Tab key={id + tab} role=\\\"none\\\">\\n                  <Button\\n                    aria-label={tab}\\n                    aria-selected={index === selectedTabIndex}\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setSelectedTabIndex(index)}\\n                    role=\\\"tab\\\"\\n                  >\\n                    {tab}\\n                  </Button>\\n                </Tab>\\n              ))}\\n            </PanelTabs>\\n            <Divider dividerType=\\\"decorative\\\" />\\n            <PanelHeader>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-3\\\">\\n                Panel title\\n              </Typography>\\n            </PanelHeader>\\n            <PanelBody>\\n              <Typography tag=\\\"h3\\\" variant=\\\"subtitle-2\\\">\\n                Panel subtitle\\n              </Typography>\\n              <Typography>\\n                This is required text that can be used to describe the panel title and subtitle in more detail.\\n              </Typography>\\n            </PanelBody>\\n          </PanelContent>\\n        </Panel>\\n      )}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Tabbed responsive expanded panel\"}],\"propertySections\":[{\"order\":1,\"name\":\"Panel\",\"selector\":\"<Panel />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Collapsible or persistent containers used to present supplementary information.\"},{\"order\":2,\"name\":\"PanelBody\",\"selector\":\"<PanelBody />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for panel body elements.\"},{\"order\":3,\"name\":\"PanelContent\",\"selector\":\"<PanelContent />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for all panel content, included heading and body.\"},{\"order\":4,\"name\":\"PanelHeader\",\"selector\":\"<PanelHeader />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for panel heading.\"},{\"order\":5,\"name\":\"PanelToggle\",\"selector\":\"<PanelToggle />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Button used with a panel component to hide or show the panel.\"},{\"order\":6,\"name\":\"useFocusTrap\",\"selector\":null,\"libraryId\":null,\"componentId\":null,\"type\":\"hooks\",\"description\":\"This hook is used to trap focus inside a container.\"}],\"properties\":[{\"name\":\"expandable\",\"section\":\"Panel\",\"data\":{\"name\":\"expandable\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Expandable\"}},{\"name\":\"ref\",\"section\":\"Panel\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"responsive\",\"section\":\"Panel\",\"data\":{\"name\":\"responsive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Responsive\"}},{\"name\":\"skrim\",\"section\":\"Panel\",\"data\":{\"name\":\"skrim\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Adds darker backdrop for modal panels\"}},{\"name\":\"tag\",\"section\":\"Panel\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"PanelBody\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"PanelBody\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"PanelContent\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"surfaceType\",\"section\":\"PanelContent\",\"data\":{\"name\":\"surfaceType\",\"type\":\"\\\"alternate\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Type of Surface\"}},{\"name\":\"tag\",\"section\":\"PanelContent\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"PanelHeader\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"PanelHeader\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"alternate\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"PanelToggle\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}}]},{\"name\":\"progress\",\"version\":\"0.0.1\",\"description\":\"Visual representation of the status of a system process.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Linear progress indicators\",\"description\":\"\",\"order\":1},{\"name\":\"Circular progress indicators\",\"description\":\"\",\"order\":2},{\"name\":\"Custom progress indicators\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Linear progress indicators\",\"url\":\"components/progress/indeterminate-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaMediaPauseAltTiny, VisaMediaPlayAltTiny } from '@visa/nova-icons-react';\\nimport { Button, ProgressLabel, ProgressLinear, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'indeterminate-linear-progress';\\n\\nexport const IndeterminateProgress = () => {\\n  const [paused, setPaused] = useState(false);\\n  const [initiated, setInitiated] = useState(false);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n\\nconst start = () => {\\n  setInitiated(true);\\n  setTimeout(() => {\\n    setLoadingMsg('Loading...');\\n  }, 0);\\n}\\n  \\nconst reset = () => {\\n  setInitiated(false);\\n  setLoadingMsg('');\\n}\\n\\n  return (\\n    <Utility vFlexCol vGap={12}>\\n        {initiated && (\\n      <Utility vFlexGrow>\\n        <UtilityFragment vMarginVertical={8}>\\n          <ProgressLinear id={id} paused={paused} />\\n        </UtilityFragment>\\n        <ProgressLabel htmlFor={id}>\\n          <Utility tag=\\\"span\\\" role=\\\"alert\\\">{loadingMsg}</Utility>\\n        </ProgressLabel>\\n      </Utility>\\n        )}\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={() => start()}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => reset()}>\\n          Reset\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setPaused(!paused)}>\\n          {paused ? (\\n            <>\\n              <VisaMediaPlayAltTiny />\\n              Play\\n            </>\\n          ) : (\\n            <>\\n              <VisaMediaPauseAltTiny />\\n              Pause\\n            </>\\n          )}\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Indeterminate linear progress indicator\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Linear progress indicators\",\"url\":\"components/progress/indeterminate-no-label-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaMediaPauseAltTiny, VisaMediaPlayAltTiny } from '@visa/nova-icons-react';\\nimport { Button, ProgressLinear, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'no-label-indeterminate-linear-progress';\\n\\nexport const IndeterminateNoLabelProgress = () => {\\n  const [paused, setPaused] = useState(false);\\n  const [initiated, setInitiated] = useState(false);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n\\nconst start = () => {\\n  setInitiated(true);\\n  setTimeout(() => {\\n    setLoadingMsg('Loading...');\\n  }, 500);\\n}\\n  \\nconst reset = () => {\\n  setInitiated(false);\\n  setLoadingMsg('');\\n}\\n\\n  return (\\n    <Utility vFlexCol vGap={12}>\\n      {initiated && (\\n      <Utility vFlexGrow>\\n        <UtilityFragment vMarginVertical={8}>\\n          <ProgressLinear aria-label=\\\"Please wait\\\" id={id} paused={paused} />\\n        </UtilityFragment>\\n        <label className=\\\"v-progress-label v-sr\\\" htmlFor={id}>\\n          <Utility tag=\\\"span\\\" role=\\\"alert\\\">{loadingMsg}</Utility>\\n        </label>\\n      </Utility>\\n      )}\\n    <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={() => start()}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => reset()}>\\n          Reset\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setPaused(!paused)}>\\n          {paused ? (\\n            <>\\n              <VisaMediaPlayAltTiny />\\n              Play\\n            </>\\n          ) : (\\n            <>\\n              <VisaMediaPauseAltTiny />\\n              Pause\\n            </>\\n          )}\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Indeterminate linear progress indicator without visible label\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Linear progress indicators\",\"url\":\"components/progress/determinate-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, ProgressLabel, ProgressLinear, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { useCallback, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'determinate-linear-progress';\\n\\nexport const DeterminateProgress = () => {\\n  const [value, setValue] = useState(0);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n  const countingRef = useRef(false);\\n\\n  const startCountUp = useCallback(async () => {\\n    setValue(0);\\n    countingRef.current = true;\\n    setTimeout(() => setLoadingMsg('Loading...'), 500);\\n    for (let i = 0; i < 100; i++) {\\n      if (!countingRef.current) {\\n        resetCount();\\n        break;\\n      }\\n      await new Promise(resolve => setTimeout(resolve, 50)); // mock the time it takes to load\\n      setValue(prev => prev + 1); // increment the value by 1 percent\\n    }\\n    setLoadingMsg('Loading complete');\\n    countingRef.current = false;\\n  }, []);\\n  const resetCount = () => {\\n    countingRef.current = false;\\n    setValue(0);\\n    setLoadingMsg('');\\n  };\\n  return (\\n    <>\\n      <UtilityFragment vMarginVertical={8}>\\n        <ProgressLinear id={id} max={100} value={value}/>\\n      </UtilityFragment>\\n      <ProgressLabel htmlFor={id}>\\n        <span>Filename.jpg</span>\\n        <span>{value}%</span>\\n        <span role=\\\"alert\\\" className='v-sr'>{loadingMsg}</span>\\n      </ProgressLabel>\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={startCountUp}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={resetCount}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Determinate linear progress indicator\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Linear progress indicators\",\"url\":\"components/progress/determinate-no-label-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, ProgressLabel, ProgressLinear, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { useCallback, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'no-label-determinate-linear-progress';\\n\\nexport const DeterminateNoLabelProgress = () => {\\n  const [value, setValue] = useState(0);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n  const countingRef = useRef(false);\\n\\n  const startCountUp = useCallback(async () => {\\n    setValue(0);\\n    countingRef.current = true;\\n    setTimeout(() => setLoadingMsg('Loading...'), 500);\\n    for (let i = 0; i < 100; i++) {\\n      if (!countingRef.current) {\\n        resetCount();\\n        break;\\n      }\\n      await new Promise(resolve => setTimeout(resolve, 50)); // mock the time it takes to load\\n      setValue(prev => prev + 1); // increment the value by 1 percent\\n    }\\n    setLoadingMsg('Loading complete');\\n    countingRef.current = false;\\n  }, []);\\n  const resetCount = () => {\\n    countingRef.current = false;\\n    setValue(0);\\n    setLoadingMsg('');\\n  };\\n  return (\\n    <>\\n      <UtilityFragment vMarginVertical={8}>\\n        <ProgressLinear id={id} max={100} value={value} />\\n      </UtilityFragment>\\n      <ProgressLabel htmlFor={id}>\\n        <span>{value}%</span>\\n        <span className=\\\"v-sr\\\" role=\\\"alert\\\">{loadingMsg}</span>\\n      </ProgressLabel>\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={startCountUp}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={resetCount}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Determinate linear progress indicator without visible label\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Linear progress indicators\",\"url\":\"components/progress/complete-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaSuccessTiny } from '@visa/nova-icons-react';\\nimport { ProgressLabel, ProgressLinear, Utility, UtilityFragment } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'complete-linear-progress';\\n\\nexport const CompleteProgress = () => {\\n  return (\\n    <>\\n      <UtilityFragment vMarginVertical={8}>\\n        <ProgressLinear completed id={id} max={100} value={100} aria-valuenow={100} />\\n      </UtilityFragment>\\n      <ProgressLabel htmlFor={id}>\\n        <Utility tag=\\\"span\\\" vFlex vGap={4} role=\\\"alert\\\">\\n          <VisaSuccessTiny />\\n          File is now uploaded.\\n        </Utility>\\n        <span>100%</span>\\n      </ProgressLabel>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Completed linear progress indicator\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Linear progress indicators\",\"url\":\"components/progress/error-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { ProgressLinear, ProgressLabel, UtilityFragment, Utility } from '@visa/nova-react';\\nimport { VisaErrorTiny } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-determinate-linear-progress';\\n\\nexport const ErrorProgress = () => {\\n  return (\\n    <>\\n      <UtilityFragment vMarginVertical={8}>\\n        <ProgressLinear id={id} invalid max={100} value={0} />\\n      </UtilityFragment>\\n      <ProgressLabel htmlFor={id}>\\n        <Utility tag=\\\"span\\\" vFlex vGap={4} role=\\\"alert\\\">\\n          <VisaErrorTiny />\\n          This is required text that describes the error in more detail.\\n        </Utility>\\n        <span>0%</span>\\n      </ProgressLabel>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Error linear progress indicator\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Circular progress indicators\",\"url\":\"components/progress/indeterminate-circular-small-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaMediaPauseAltTiny, VisaMediaPlayAltTiny } from '@visa/nova-icons-react';\\nimport { Button, ProgressCircular, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const IndeterminateCircularSmallProgress = () => {\\n  const [paused, setPaused] = useState(false);\\n  const [initiated, setInitiated] = useState(false);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n\\nconst start = () => {\\n  setInitiated(true);\\n  setTimeout(() => {\\n    setLoadingMsg('Loading...');\\n  }, 0);\\n}\\n  \\nconst reset = () => {\\n  setInitiated(false);\\n  setLoadingMsg('');\\n}\\n\\n  return (\\n    <Utility vFlexCol vGap={12}>\\n      {initiated && (\\n        <>\\n          <ProgressCircular\\n            className=\\\"v-flex-grow\\\"\\n            indeterminate\\n            paused={paused}\\n            progressSize=\\\"small\\\"\\n          />\\n          <span className=\\\"v-sr\\\" role=\\\"alert\\\">{loadingMsg}</span>\\n      </>\\n      )}\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={() => start()}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => reset()}>\\n          Reset\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setPaused(!paused)}>\\n          {paused ? (\\n            <>\\n              <VisaMediaPlayAltTiny />\\n              Play\\n            </>\\n          ) : (\\n            <>\\n              <VisaMediaPauseAltTiny />\\n              Pause\\n            </>\\n          )}\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Small indeterminate circular progress indicator\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Circular progress indicators\",\"url\":\"components/progress/indeterminate-circular-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaMediaPauseAltTiny, VisaMediaPlayAltTiny } from '@visa/nova-icons-react';\\nimport { Button, ProgressCircular, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const IndeterminateCircularProgress = () => {\\n  const [paused, setPaused] = useState(false);\\n  const [initiated, setInitiated] = useState(false);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n\\nconst start = () => {\\n  setInitiated(true);\\n  setTimeout(() => {\\n    setLoadingMsg('Loading...');\\n  }, 0);\\n}\\n  \\nconst reset = () => {\\n  setInitiated(false);\\n  setLoadingMsg('');\\n}\\n\\n  return (\\n    <Utility vFlexCol vGap={12}>\\n      {initiated && (\\n      <ProgressCircular className=\\\"v-flex-grow\\\" indeterminate paused={paused}>\\n        <span className=\\\"v-sr\\\" role=\\\"alert\\\">{loadingMsg}</span>\\n      </ProgressCircular>\\n      )}\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={() => start()}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => reset()}>\\n          Reset\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setPaused(!paused)}>\\n          {paused ? (\\n            <>\\n              <VisaMediaPlayAltTiny />\\n              Play\\n            </>\\n          ) : (\\n            <>\\n              <VisaMediaPauseAltTiny />\\n              Pause\\n            </>\\n          )}\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Large indeterminate circular progress indicator\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Circular progress indicators\",\"url\":\"components/progress/determinate-circular-small-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, ProgressCircular, Typography, Utility } from '@visa/nova-react';\\nimport { useCallback, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'small-determinate-circular-progress';\\n\\nexport const DeterminateCircularSmallProgress = () => {\\n  const [value, setValue] = useState(0);\\n  const countingRef = useRef(false);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n  \\n\\n  const startCountUp = useCallback(async () => {\\n    setValue(0);\\n    countingRef.current = true;\\n    setLoadingMsg('Loading...');\\n    for (let i = 0; i < 100; i++) {\\n      if (!countingRef.current) {\\n        resetCount();\\n        break;\\n      }\\n      await new Promise(resolve => setTimeout(resolve, 50)); // mock the time it takes to load\\n      setValue(prev => prev + 1); // increment the value by 1 percent\\n    }\\n    setLoadingMsg('Loading complete');\\n    countingRef.current = false;\\n  }, []);\\n  const resetCount = () => {\\n    countingRef.current = false;\\n    setValue(0);\\n    setLoadingMsg('');\\n  };\\n  return (\\n    <>\\n      <ProgressCircular aria-labelledby={id} progressSize=\\\"small\\\" value={value} aria-valuenow={value}>\\n        <Typography tag=\\\"div\\\" className=\\\"v-progress-label\\\" variant=\\\"body-2-bold\\\" id={id}>{value}%</Typography>\\n      </ProgressCircular>\\n      <Utility tag=\\\"span\\\" role=\\\"alert\\\" className=\\\"v-sr\\\">{loadingMsg}</Utility>\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={startCountUp}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={resetCount}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Small determinate circular progress indicator\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Circular progress indicators\",\"url\":\"components/progress/determinate-circular-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { Button, ProgressCircular, ProgressLabel, Typography, Utility } from '@visa/nova-react';\\nimport { useCallback, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'large-determinate-circular-progress';\\n\\nexport const DeterminateCircularProgress = () => {\\n  const [value, setValue] = useState(0);\\n  const countingRef = useRef(false);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n  const startCountUp = useCallback(async () => {\\n    setValue(0);\\n    countingRef.current = true;\\n    setLoadingMsg('Loading...');\\n    for (let i = 0; i < 100; i++) {\\n      if (!countingRef.current) {\\n        resetCount();\\n        break;\\n      }\\n      await new Promise(resolve => setTimeout(resolve, 50)); // mock the time it takes to load\\n      setValue(prev => prev + 1); // increment the value by 1 percent\\n    }\\n    setLoadingMsg('Loading complete');\\n    countingRef.current = false;\\n  }, []);\\n  const resetCount = () => {\\n    countingRef.current = false;\\n    setValue(0);\\n    setLoadingMsg('');\\n  };\\n  return (\\n    <>\\n      <ProgressCircular aria-labelledby={id} value={value} aria-valuenow={value}>\\n        <ProgressLabel id={id}>\\n          <Typography tag=\\\"div\\\" className=\\\"v-progress-label\\\" variant=\\\"body-2-bold\\\">{value}%</Typography>\\n        </ProgressLabel>\\n      </ProgressCircular>\\n      <Utility tag=\\\"span\\\" role=\\\"alert\\\" className=\\\"v-sr\\\">{loadingMsg}</Utility>\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={startCountUp}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={resetCount}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Large determinate circular progress indicator\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Circular progress indicators\",\"url\":\"components/progress/complete-circular-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { ProgressCircular, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'large-complete-circular-progress';\\nconst value = 100;\\n\\nexport const CompleteCircularProgress = () => {\\n  return (\\n    <>\\n      <ProgressCircular aria-labelledby={`${id} completed-circular-screen-reader-message`} value={value} aria-valuenow={value}>\\n        <Typography id={id} tag=\\\"div\\\" className=\\\"v-progress-label\\\" variant=\\\"body-2-bold\\\">{value}%</Typography>\\n      </ProgressCircular>\\n      <Utility tag=\\\"span\\\" role=\\\"alert\\\" className=\\\"v-sr\\\" id=\\\"completed-circular-screen-reader-message\\\">Loading complete.</Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Completed determinate circular progress indicator\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Circular progress indicators\",\"url\":\"components/progress/error-circular-progress\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { InputMessage } from '@visa/nova-react';\\n\\nexport const ErrorCircularProgress = () => {\\n  return (\\n    <InputMessage className='v-input-error' role=\\\"alert\\\">\\n      <VisaErrorTiny />\\n      This is required text that describes the error in more detail.\\n    </InputMessage>\\n  );\\n};\\n\"},\"name\":\"Error determinate circular progress indicator\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom progress indicators\",\"url\":\"components/progress/circular-custom-size-progress\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { Button, ProgressCircular, ProgressLabel, Typography, Utility } from '@visa/nova-react';\\nimport { useCallback, useState, useRef } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'circular-custom-size-determinate-progress';\\n\\nexport const CircularCustomSizeProgress = () => {\\n  const [value, setValue] = useState(0);\\n  const countingRef = useRef(false);\\n  const [loadingMsg, setLoadingMsg] = useState('');\\n  const startCountUp = useCallback(async () => {\\n    setValue(0);\\n    countingRef.current = true;\\n    setLoadingMsg('Loading...');\\n    for (let i = 0; i < 100; i++) {\\n      if (!countingRef.current) {\\n        resetCount();\\n        break;\\n      }\\n      await new Promise(resolve => setTimeout(resolve, 50)); // mock the time it takes to load\\n      setValue(prev => prev + 1); // increment the value by 1 percent\\n    }\\n    setLoadingMsg('Loading complete');\\n    countingRef.current = false;\\n  }, []);\\n  const resetCount = () => {\\n    countingRef.current = false;\\n    setValue(0);\\n    setLoadingMsg('');\\n  };\\n  return (\\n    <>\\n      <ProgressCircular aria-labelledby={id} progressSize={100} value={value} aria-valuenow={value}>\\n        <ProgressLabel id={id}>\\n          <Typography tag=\\\"div\\\" className=\\\"v-progress-label\\\" variant=\\\"body-2-bold\\\">\\n            {value}%\\n          </Typography>\\n        </ProgressLabel>\\n      </ProgressCircular>\\n      <Utility tag=\\\"span\\\" role=\\\"alert\\\" className=\\\"v-sr\\\">{loadingMsg}</Utility>\\n      <Utility vMarginVertical={12} vFlex vGap={12}>\\n        <Button onClick={startCountUp}>\\n          Start\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={resetCount}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Custom size determinate circular progress indicator\"}],\"propertySections\":[{\"order\":1,\"name\":\"Progress\",\"selector\":\"<Progress />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Visual representation of the status of a system process.\"},{\"order\":2,\"name\":\"ProgressCircular\",\"selector\":\"<ProgressCircular />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Circular indicator used to show the progress of a task or process.\"},{\"order\":3,\"name\":\"ProgressLabel\",\"selector\":\"<ProgressLabel />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Label used with a progress component for textual representation of status.\"},{\"order\":4,\"name\":\"ProgressLinear\",\"selector\":\"<ProgressLinear />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Linear indicator used to show the progress of a task or process.\"}],\"properties\":[{\"name\":\"completed\",\"section\":\"Progress\",\"data\":{\"name\":\"completed\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Is Completed\"}},{\"name\":\"indeterminate\",\"section\":\"Progress\",\"data\":{\"name\":\"indeterminate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"If the Progress is Indeterminate Progress\"}},{\"name\":\"invalid\",\"section\":\"Progress\",\"data\":{\"name\":\"invalid\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Is Error State\"}},{\"name\":\"paused\",\"section\":\"Progress\",\"data\":{\"name\":\"paused\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Is Paused\"}},{\"name\":\"progressSize\",\"section\":\"Progress\",\"data\":{\"name\":\"progressSize\",\"type\":\"number , \\\"small\\\" , \\\"large\\\"\",\"default\":\"large\",\"required\":\"false\",\"description\":\"Width of the Circular Progress\"}},{\"name\":\"progressType\",\"section\":\"Progress\",\"data\":{\"name\":\"progressType\",\"type\":\"\\\"circular\\\" , \\\"linear\\\"\",\"default\":\"linear\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"ref\",\"section\":\"Progress\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Progress\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"indeterminate\",\"section\":\"ProgressCircular\",\"data\":{\"name\":\"indeterminate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"If the Progress is Indeterminate Progress\"}},{\"name\":\"paused\",\"section\":\"ProgressCircular\",\"data\":{\"name\":\"paused\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Is Paused\"}},{\"name\":\"progressSize\",\"section\":\"ProgressCircular\",\"data\":{\"name\":\"progressSize\",\"type\":\"number , \\\"small\\\" , \\\"large\\\"\",\"default\":\"large\",\"required\":\"false\",\"description\":\"Width of the Circular Progress\"}},{\"name\":\"ref\",\"section\":\"ProgressCircular\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"ref\",\"section\":\"ProgressLabel\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ProgressLabel\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"label\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"completed\",\"section\":\"ProgressLinear\",\"data\":{\"name\":\"completed\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Is Completed\"}},{\"name\":\"invalid\",\"section\":\"ProgressLinear\",\"data\":{\"name\":\"invalid\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Is Error State\"}},{\"name\":\"paused\",\"section\":\"ProgressLinear\",\"data\":{\"name\":\"paused\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Is Paused\"}},{\"name\":\"ref\",\"section\":\"ProgressLinear\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ProgressLinear\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"progress\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"radio\",\"version\":\"0.0.1\",\"description\":\"Interactive elements that allow users to select a single option from a list.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default radio buttons\",\"description\":\"\",\"order\":1},{\"name\":\"Radio button groups\",\"description\":\"\",\"order\":2},{\"name\":\"Radio button panels\",\"description\":\"\",\"order\":3},{\"name\":\"Radio button panel groups\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default radio buttons\",\"url\":\"components/radio/with-label-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Radio, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-radio';\\n\\nexport const DefaultRadio = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Radio id={id} name={id} />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Radio button with label\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default radio buttons\",\"url\":\"components/radio/without-visible-label-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Radio, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'no-label-radio';\\n\\nexport const NoLabelRadio = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Radio id={id} aria-label=\\\"Label\\\" name={id} />\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Radio button without visible label\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default radio buttons\",\"url\":\"components/radio/with-description-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputMessage, Label, Radio, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'with-description-radio';\\n\\nexport const WithDescriptionRadio = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-message`}>\\n      <Utility vFlex vGap={2}>\\n        <Radio id={id} name={id} />\\n        <Utility vFlex vFlexCol vGap={2} vMarginVertical={10}>\\n          <Label htmlFor={id}>Label</Label>\\n          <InputMessage id={`${id}-message`}>\\n            This is optional text that describes the label in more detail.\\n          </InputMessage>\\n        </Utility>\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Radio button with description\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default radio buttons\",\"url\":\"components/radio/selected-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Radio, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'selected-radio';\\n\\nexport const SelectedRadio = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Radio defaultChecked id={id} name={id} />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Selected radio button\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default radio buttons\",\"url\":\"components/radio/error-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ChangeEvent, useRef, useState } from 'react';\\nimport { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Button, InputMessage, Label, Radio, Utility, UtilityFragment } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'radio-error';\\n\\nexport const ErrorRadio = () => {\\n  const radioRef = useRef<HTMLInputElement>(null);\\n  const [checked, setChecked] = useState(false);\\n  const [invalid, setInvalid] = useState(false);\\n\\n  const onRadioButtonChange = (event: ChangeEvent<HTMLInputElement>) => {\\n    setChecked(event.target.checked);\\n  };\\n\\n  const onSubmit = () => {\\n    if (checked) setInvalid(false);\\n    else {\\n      setInvalid(true);\\n      radioRef.current?.focus();\\n    }\\n  };\\n  return (\\n    <>\\n      <fieldset aria-labelledby={`${id}-message`}>\\n        <Utility vFlex vAlignItems=\\\"center\\\" vGap={2}>\\n          <Radio\\n            aria-invalid={invalid}\\n            aria-required=\\\"true\\\"\\n            checked={checked}\\n            id={id}\\n            name={id}\\n            onChange={onRadioButtonChange}\\n            ref={radioRef}\\n          />\\n          <Label htmlFor={id} id={`${id}-label`}>\\n            Label\\n          </Label>\\n        </Utility>\\n        {invalid && (\\n          <UtilityFragment vAlignItems=\\\"center\\\" vFlex vGap={2} vMarginTop={4}>\\n            <InputMessage\\n              aria-atomic=\\\"true\\\"\\n              aria-live=\\\"assertive\\\"\\n              className=\\\"v-typography-label\\\"\\n              id={`${id}-message`}\\n              role=\\\"alert\\\"\\n            >\\n              <VisaErrorTiny />\\n              This is required text that describes the error in more detail.\\n            </InputMessage>\\n          </UtilityFragment>\\n        )}\\n      </fieldset>\\n      <Utility vFlex vGap={12} vMarginTop={12}>\\n        <Button onClick={onSubmit}>Submit</Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setChecked(false)}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Radio button with error\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default radio buttons\",\"url\":\"components/radio/disabled-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Radio, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'radio-disabled';\\n\\nexport const DisabledRadio = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Radio disabled id={id} name={id} />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled radio button\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default radio buttons\",\"url\":\"components/radio/disabled-selected-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Radio, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'radio-disabled-selected';\\n\\nexport const DisabledSelectedRadio = () => {\\n  return (\\n    <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n      <Radio defaultChecked disabled id={id} name={id} />\\n      <Label htmlFor={id}>Label</Label>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled and selected radio button\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button groups\",\"url\":\"components/radio/group-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Radio, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'group-radio';\\n\\nconst radios = ['Label 1', 'Label 2', 'Label 3'];\\n\\nexport const GroupRadio = () => {\\n  return (\\n    <fieldset>\\n      <Typography tag=\\\"legend\\\" variant=\\\"label\\\">\\n        Group label (required)\\n      </Typography>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        {radios.map((radio, index) => (\\n          <Utility key={`${id}-option-${index}`} vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n            <Radio id={`${id}-option-${index}`} name={`${id}-options`} />\\n            <Label htmlFor={`${id}-option-${index}`}>{radio}</Label>\\n          </Utility>\\n        ))}\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Radio button group\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button groups\",\"url\":\"components/radio/error-group-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { ChangeEvent, useRef, useState } from 'react';\\nimport { Button, InputMessage, Label, Radio, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-group-radio';\\n\\nconst radios = ['Label 1', 'Label 2', 'Label 3'];\\n\\nexport const ErrorGroupRadio = () => {\\n  const ref = useRef<HTMLInputElement>(null);\\n  const [errorState, setErrorState] = useState(false);\\n  const [option, setOption] = useState('');\\n\\n  const handleChangeState = (e: ChangeEvent<HTMLInputElement>) => {\\n    setOption(e.target.value);\\n  };\\n  const handleOnSubmit = () => {\\n    if (option !== '') {\\n      setErrorState(false);\\n    } else {\\n      setOption('');\\n      setErrorState(true);\\n    }\\n    ref?.current?.focus();\\n  };\\n\\n  return (\\n    <>\\n      <fieldset aria-invalid={errorState} aria-labelledby={`${id}-legend ${id}-message`}>\\n        <Typography id={`${id}-legend`} tag=\\\"legend\\\" variant=\\\"label\\\">\\n          Group label (required)\\n        </Typography>\\n        <Utility vFlex vFlexCol vGap={4}>\\n          {radios.map((radio, index) => (\\n            <Utility key={`${id}-option-${index}`} vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n              <Radio\\n                aria-invalid={errorState}\\n                checked={option === index.toString()}\\n                id={`${id}-option-${index}`}\\n                name={`${id}-options`}\\n                onChange={handleChangeState}\\n                ref={index === 0 ? ref : undefined}\\n                value={index}\\n              />\\n              <Label htmlFor={`${id}-option-${index}`}>{radio}</Label>\\n            </Utility>\\n          ))}\\n        </Utility>\\n        {errorState && (\\n          <InputMessage\\n            aria-atomic=\\\"true\\\"\\n            aria-live=\\\"assertive\\\"\\n            className=\\\"v-typography-label v-flex v-align-items-center\\\"\\n            id={`${id}-message`}\\n            role=\\\"alert\\\"\\n          >\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail.\\n          </InputMessage>\\n        )}\\n      </fieldset>\\n      <Utility vFlex vFlexRow vPaddingTop={4} vGap={12}>\\n        <Button onClick={handleOnSubmit}>Submit</Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setOption('')}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Radio button group with error\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button groups\",\"url\":\"components/radio/horizontal-group-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Radio, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'horizontal-group-radio';\\n\\nconst radios = ['Label 1', 'Label 2', 'Label 3'];\\n\\nexport const HorizontalGroupRadio = () => {\\n  return (\\n    <fieldset>\\n      <Typography tag=\\\"legend\\\" variant=\\\"label\\\">\\n        Group label (required)\\n      </Typography>\\n      <Utility vFlex vFlexRow vGap={24} vFlexWrap>\\n        {radios.map((radio, index) => (\\n          <Utility key={`${id}-option-${index}`} vFlex vAlignItems=\\\"center\\\" vGap={2}>\\n            <Radio id={`${id}-option-${index}`} name={`${id}-options`} />\\n            <Label htmlFor={`${id}-option-${index}`}>{radio}</Label>\\n          </Utility>\\n        ))}\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Horizontal radio button group\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button panels\",\"url\":\"components/radio/with-description-panel-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputMessage, Radio, RadioPanel, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'with-description-panel-radio';\\n\\nexport const WithDescriptionPanelRadio = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-message`}>\\n      <RadioPanel className=\\\"v-align-items-start\\\" htmlFor={id}>\\n        <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n          <Radio className=\\\"v-flex-shrink-0\\\" id={id} name={id} />\\n          <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n            Label\\n            <InputMessage id={`${id}-message`}>\\n              This is optional text that describes the label in more detail.\\n            </InputMessage>\\n          </Utility>\\n        </Utility>\\n      </RadioPanel>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Radio button panel\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button panels\",\"url\":\"components/radio/without-description-panel-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Radio, RadioPanel, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'with-description-panel-radio';\\n\\nexport const WithoutDescriptionPanelRadio = () => {\\n  return (\\n    <RadioPanel className=\\\"v-align-items-start\\\" htmlFor={id}>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n        <Radio className=\\\"v-flex-shrink-0\\\" id={id} name={id} />\\n        Label\\n      </Utility>\\n    </RadioPanel>\\n  );\\n};\\n\"},\"name\":\"Radio button panel without description\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button panels\",\"url\":\"components/radio/disabled-panel-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputMessage, Radio, RadioPanel, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'radio-panel-disabled';\\n\\nexport const DisabledPanelRadio = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-message`}>\\n      <RadioPanel className=\\\"v-align-items-start\\\" htmlFor={id}>\\n        <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n          <Radio className=\\\"v-flex-shrink-0\\\" disabled id={id} name=\\\"radio-13\\\" />\\n          <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n            Label\\n            <InputMessage id={`${id}-message`}>\\n              This is optional text that describes the label in more detail.\\n            </InputMessage>\\n          </Utility>\\n        </Utility>\\n      </RadioPanel>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Disabled radio button panel\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button panel groups\",\"url\":\"components/radio/group-panel-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputMessage, Radio, RadioPanel, Typography, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'group-panel-radio';\\n\\nconst radios = ['Label 1', 'Label 2', 'Label 3'];\\n\\nexport const GroupPanelRadio = () => {\\n  return (\\n    <fieldset aria-labelledby={`${id}-legend`}>\\n      <Typography id={`${id}-legend`} tag=\\\"legend\\\" variant=\\\"label\\\">\\n        Group label (required)\\n      </Typography>\\n      <Utility vFlex vFlexCol vGap={8}>\\n        {radios.map((radio, index) => (\\n          <RadioPanel className=\\\"v-align-items-start\\\" htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`}>\\n            <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n              <Radio className=\\\"v-flex-shrink-0\\\" id={`${id}-option-${index}`} name={`${id}-options`} />\\n              <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n                {radio}\\n                <InputMessage id={`${id}-radio-${index}-message`}>\\n                  This is optional text that describes the label in more detail.\\n                </InputMessage>\\n              </Utility>\\n            </Utility>\\n          </RadioPanel>\\n        ))}\\n      </Utility>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"Radio button panel group\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Radio button panel groups\",\"url\":\"components/radio/error-group-panel-radio\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { Utility, RadioPanel, Radio, Label, InputMessage, Button, Typography } from '@visa/nova-react';\\nimport { ChangeEvent, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-group-panel-radio';\\n\\nconst radios = ['Label 1', 'Label 2', 'Label 3'];\\n\\nexport const ErrorPanelGroupRadio = () => {\\n  const ref = useRef<HTMLInputElement>(null);\\n  const [errorState, setErrorState] = useState(false);\\n  const [option, setOption] = useState('');\\n\\n  const handleChangeState = (e: ChangeEvent<HTMLInputElement>) => {\\n    setOption(e.target.value);\\n  };\\n  const handleOnSubmit = () => {\\n    if (option !== '') {\\n      setErrorState(false);\\n    } else {\\n      setOption('');\\n      setErrorState(true);\\n    }\\n    ref?.current?.focus();\\n  };\\n  return (\\n    <>\\n      <fieldset aria-labelledby={`${id}-legend ${id}-message`}>\\n        <Typography id={`${id}-legend`} tag=\\\"legend\\\" variant=\\\"label\\\">\\n          Group label (required)\\n        </Typography>\\n        <Utility vFlex vFlexCol vGap={8}>\\n          {radios.map((radio, index) => (\\n            <RadioPanel className=\\\"v-align-items-start\\\" htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`}>\\n              <Utility vFlex vGap={2} style={{ inlineSize: '100%' }}>\\n                <Radio\\n                  aria-describedby={`${id}-option-${index}-message`}\\n                  aria-invalid={errorState}\\n                  checked={option === `${index}`}\\n                  className=\\\"v-flex-shrink-0\\\"\\n                  id={`${id}-option-${index}`}\\n                  name={`${id}-options`}\\n                  onChange={handleChangeState}\\n                  ref={index === 0 ? ref : undefined}\\n                  value={index}\\n                />\\n                <Utility vFlex vFlexCol vGap={2} vMarginVertical={8}>\\n                  <Label htmlFor={`${id}-option-${index}`}>{radio}</Label>\\n                  <InputMessage id={`${id}-option-${index}-message`}>\\n                    This is optional text that describes the label in more detail.\\n                  </InputMessage>\\n                </Utility>\\n              </Utility>\\n            </RadioPanel>\\n          ))}\\n        </Utility>\\n        {errorState && (\\n          <InputMessage\\n            aria-atomic=\\\"true\\\"\\n            aria-live=\\\"assertive\\\"\\n            className=\\\"v-typography-label v-flex v-align-items-center\\\"\\n            id={`${id}-message`}\\n            role=\\\"alert\\\"\\n          >\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail.\\n          </InputMessage>\\n        )}\\n      </fieldset>\\n      <Utility vFlex vFlexRow vPaddingTop={12} vGap={12}>\\n        <Button onClick={handleOnSubmit}>Submit</Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setOption('')}>\\n          Reset\\n        </Button>\\n      </Utility>\\n    </>\\n  );\\n};\\n\"},\"name\":\"Radio button panel group with error\"}],\"propertySections\":[{\"order\":1,\"name\":\"Radio\",\"selector\":\"<Radio />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Interactive elements that allow users to select a single option from a list.\"},{\"order\":2,\"name\":\"RadioPanel\",\"selector\":\"<RadioPanel />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container used with a radio component to add a border and background color.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Radio\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Radio\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"input\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"RadioPanel\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"RadioPanel\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"section-message\",\"version\":\"0.0.1\",\"description\":\"Section-level messages providing information about the status of a page or action.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Informational section messages\",\"description\":\"\",\"order\":1},{\"name\":\"Success section messages\",\"description\":\"\",\"order\":2},{\"name\":\"Warning section messages\",\"description\":\"\",\"order\":3},{\"name\":\"Error section messages headline\",\"description\":\"\",\"order\":4},{\"name\":\"Subtle section messages headline\",\"description\":\"\",\"order\":5}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational section messages\",\"url\":\"components/section-message/empty-information-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage } from '@visa/nova-react';\\n\\nexport const EmptyInformationSectionMessage = () => {\\n  return <SectionMessage />;\\n};\\n\"},\"name\":\"Empty informational section message\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational section messages\",\"url\":\"components/section-message/default-information-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const DefaultInformationSectionMessage = () => {\\n  return (\\n    <SectionMessage>\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Default informational section message\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational section messages\",\"url\":\"components/section-message/title-information-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const TitleInformationSectionMessage = () => {\\n  return (\\n    <SectionMessage>\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography tag=\\\"h4\\\" variant=\\\"body-2-bold\\\">Informational title</Typography>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Informational section message with title\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational section messages\",\"url\":\"components/section-message/link-information-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Link,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const LinkInformationSectionMessage = () => {\\n  return (\\n    <SectionMessage>\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Link href=\\\"./section-message\\\">Destination label</Link>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Informational section message with link\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational section messages\",\"url\":\"components/section-message/button-information-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const ButtonInformationSectionMessage = () => {\\n  return (\\n    <SectionMessage>\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Informational section message with button\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Informational section messages\",\"url\":\"components/section-message/persistent-information-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage, SectionMessageContent, SectionMessageIcon, Typography, UtilityFragment } from '@visa/nova-react';\\n\\nexport const PersistentInformationSectionMessage = () => {\\n  return (\\n    <SectionMessage>\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Informational section message without close icon button\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Success section messages\",\"url\":\"components/section-message/empty-success-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage } from '@visa/nova-react';\\n\\nexport const EmptySuccessSectionMessage = () => {\\n  return <SectionMessage messageType=\\\"success\\\" />;\\n};\\n\"},\"name\":\"Empty success section message\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Success section messages\",\"url\":\"components/section-message/default-success-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const DefaultSuccessSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"success\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Default success section message\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Success section messages\",\"url\":\"components/section-message/title-success-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const TitleSuccessSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"success\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography  tag=\\\"h4\\\" variant=\\\"body-2-bold\\\">Success title</Typography>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Success section message with title\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Success section messages\",\"url\":\"components/section-message/link-success-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Link,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const LinkSuccessSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"success\\\">\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Link href=\\\"./section-message\\\">Destination label</Link>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Success section message with link\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Success section messages\",\"url\":\"components/section-message/button-success-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const ButtonSuccessSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"success\\\">\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Success section message with button\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Success section messages\",\"url\":\"components/section-message/persistent-success-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage, SectionMessageContent, SectionMessageIcon, Typography, UtilityFragment } from '@visa/nova-react';\\n\\nexport const PersistentSuccessSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"success\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Success section message without close icon button\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning section messages\",\"url\":\"components/section-message/empty-warning-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage } from '@visa/nova-react';\\n\\nexport const EmptyWarningSectionMessage = () => {\\n  return <SectionMessage messageType=\\\"warning\\\" />;\\n};\\n\"},\"name\":\"Empty warning section message\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning section messages\",\"url\":\"components/section-message/default-warning-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const DefaultWarningSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"warning\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Default warning section message\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning section messages\",\"url\":\"components/section-message/title-warning-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const TitleWarningSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"warning\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography  tag=\\\"h4\\\" variant=\\\"body-2-bold\\\">Warning title</Typography>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Warning section message with title\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning section messages\",\"url\":\"components/section-message/link-warning-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Link,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const LinkWarningSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"warning\\\">\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Link href=\\\"./section-message\\\">Destination label</Link>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Warning section message with link\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning section messages\",\"url\":\"components/section-message/button-warning-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const ButtonWarningSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"warning\\\">\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Warning section message with button\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Warning section messages\",\"url\":\"components/section-message/persistent-warning-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage, SectionMessageContent, SectionMessageIcon, Typography, UtilityFragment } from '@visa/nova-react';\\n\\nexport const PersistentWarningSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"warning\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Warning section message without close icon button\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Error section messages headline\",\"url\":\"components/section-message/empty-error-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage } from '@visa/nova-react';\\n\\nexport const EmptyErrorSectionMessage = () => {\\n  return <SectionMessage messageType=\\\"error\\\" />;\\n};\\n\"},\"name\":\"Empty error section message\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Error section messages headline\",\"url\":\"components/section-message/default-error-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const DefaultErrorSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"error\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Default error section message\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Error section messages headline\",\"url\":\"components/section-message/title-error-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography,\\n  UtilityFragment\\n} from '@visa/nova-react';\\n\\nexport const TitleErrorSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"error\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography  tag=\\\"h4\\\" variant=\\\"body-2-bold\\\">Error title</Typography>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Error section message with title\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Error section messages headline\",\"url\":\"components/section-message/link-error-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Link,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const LinkErrorSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"error\\\">\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Link href=\\\"./section-message\\\">Destination label</Link>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Error section message with link\"},{\"description\":\"\",\"order\":23,\"libraryId\":null,\"componentId\":null,\"section\":\"Error section messages headline\",\"url\":\"components/section-message/button-error-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  SectionMessage,\\n  SectionMessageCloseButton,\\n  SectionMessageContent,\\n  SectionMessageIcon,\\n  Typography\\n} from '@visa/nova-react';\\n\\nexport const ButtonErrorSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"error\\\">\\n      <SectionMessageIcon />\\n      <SectionMessageContent>\\n        <Typography className=\\\"v-mb-8\\\">\\n          This is required text that describes the section message in more detail.\\n        </Typography>\\n        <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n      </SectionMessageContent>\\n      <SectionMessageCloseButton />\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Error section message with button\"},{\"description\":\"\",\"order\":24,\"libraryId\":null,\"componentId\":null,\"section\":\"Error section messages headline\",\"url\":\"components/section-message/persistent-error-section-message\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { SectionMessage, SectionMessageContent, SectionMessageIcon, Typography, UtilityFragment } from '@visa/nova-react';\\n\\nexport const PersistentErrorSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"error\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Error section message without close icon button\"},{\"description\":\"\",\"order\":25,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle section messages headline\",\"url\":\"components/section-message/empty-subtle-section-message\",\"tags\":[],\"snippets\":{\"tsx\":\"import { SectionMessage } from '@visa/nova-react';\\n\\nexport const EmptySubtleSectionMessage = () => {\\n  return <SectionMessage messageType=\\\"subtle\\\" />;\\n};\\n\"},\"name\":\"Empty subtle section message\"},{\"description\":\"\",\"order\":26,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle section messages headline\",\"url\":\"components/section-message/default-subtle-section-message\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n    SectionMessage,\\n    SectionMessageCloseButton,\\n    SectionMessageContent,\\n    SectionMessageIcon,\\n    Typography,\\n    UtilityFragment\\n  } from '@visa/nova-react';\\n  \\n  export const DefaultSubtleSectionMessage = () => {\\n    return (\\n      <SectionMessage messageType=\\\"subtle\\\">\\n        <SectionMessageIcon />\\n        <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n          <SectionMessageContent>\\n            <Typography>This is required text that describes the section message in more detail.</Typography>\\n          </SectionMessageContent>\\n        </UtilityFragment>\\n        <SectionMessageCloseButton />\\n      </SectionMessage>\\n    );\\n  };\\n  \"},\"name\":\"Default subtle section message\"},{\"description\":\"\",\"order\":27,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle section messages headline\",\"url\":\"components/section-message/title-subtle-section-message\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n    SectionMessage,\\n    SectionMessageCloseButton,\\n    SectionMessageContent,\\n    SectionMessageIcon,\\n    Typography,\\n    UtilityFragment\\n  } from '@visa/nova-react';\\n  \\n  export const TitleSubtleSectionMessage = () => {\\n    return (\\n      <SectionMessage messageType=\\\"subtle\\\">\\n        <SectionMessageIcon />\\n        <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n          <SectionMessageContent>\\n            <Typography  tag=\\\"h4\\\" variant=\\\"body-2-bold\\\">Error title</Typography>\\n            <Typography>This is required text that describes the section message in more detail.</Typography>\\n          </SectionMessageContent>\\n        </UtilityFragment>\\n        <SectionMessageCloseButton />\\n      </SectionMessage>\\n    );\\n  };\\n  \"},\"name\":\"Subtle section message with title\"},{\"description\":\"\",\"order\":28,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle section messages headline\",\"url\":\"components/section-message/link-subtle-section-message\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n    Link,\\n    SectionMessage,\\n    SectionMessageCloseButton,\\n    SectionMessageContent,\\n    SectionMessageIcon,\\n    Typography\\n  } from '@visa/nova-react';\\n  \\n  export const LinkSubtleSectionMessage = () => {\\n    return (\\n      <SectionMessage messageType=\\\"subtle\\\">\\n        <SectionMessageIcon />\\n        <SectionMessageContent>\\n          <Typography className=\\\"v-mb-8\\\">\\n            This is required text that describes the section message in more detail.\\n          </Typography>\\n          <Link href=\\\"./section-message\\\">Destination label</Link>\\n        </SectionMessageContent>\\n        <SectionMessageCloseButton />\\n      </SectionMessage>\\n    );\\n  };\\n  \"},\"name\":\"Subtle section message with link\"},{\"description\":\"\",\"order\":29,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle section messages headline\",\"url\":\"components/section-message/button-subtle-section-message\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n    Button,\\n    SectionMessage,\\n    SectionMessageCloseButton,\\n    SectionMessageContent,\\n    SectionMessageIcon,\\n    Typography\\n  } from '@visa/nova-react';\\n  \\n  export const ButtonSubtleSectionMessage = () => {\\n    return (\\n      <SectionMessage messageType=\\\"subtle\\\">\\n        <SectionMessageIcon />\\n        <SectionMessageContent>\\n          <Typography className=\\\"v-mb-8\\\">\\n            This is required text that describes the section message in more detail.\\n          </Typography>\\n          <Button colorScheme=\\\"secondary\\\">Primary action</Button>\\n        </SectionMessageContent>\\n        <SectionMessageCloseButton />\\n      </SectionMessage>\\n    );\\n  };\\n  \"},\"name\":\"Subtle section message with button\"},{\"description\":\"\",\"order\":30,\"libraryId\":null,\"componentId\":null,\"section\":\"Subtle section messages headline\",\"url\":\"components/section-message/persistent-subtle-section-message\",\"tags\":[],\"snippets\":{\"tsx\":\"import { SectionMessage, SectionMessageContent, SectionMessageIcon, Typography, UtilityFragment } from '@visa/nova-react';\\n\\nexport const PersistentSubtleSectionMessage = () => {\\n  return (\\n    <SectionMessage messageType=\\\"subtle\\\">\\n      <SectionMessageIcon />\\n      <UtilityFragment vPaddingLeft={2} vPaddingBottom={2}>\\n        <SectionMessageContent>\\n          <Typography>This is required text that describes the section message in more detail.</Typography>\\n        </SectionMessageContent>\\n      </UtilityFragment>\\n    </SectionMessage>\\n  );\\n};\\n\"},\"name\":\"Subtle section message without close icon button\"}],\"propertySections\":[{\"order\":1,\"name\":\"SectionMessage\",\"selector\":\"<SectionMessage />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Section-level messages providing information about the status of a page or action.\"},{\"order\":2,\"name\":\"SectionMessageCloseButton\",\"selector\":\"<SectionMessageCloseButton />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Close button for section message component.\"},{\"order\":3,\"name\":\"MessageContent\",\"selector\":\"<MessageContent />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for message content elements.\"},{\"order\":4,\"name\":\"MessageIcon\",\"selector\":\"<MessageIcon />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Icon to display within message content.\"}],\"properties\":[{\"name\":\"messageType\",\"section\":\"SectionMessage\",\"data\":{\"name\":\"messageType\",\"type\":\"\\\"subtle\\\" , \\\"warning\\\" , \\\"error\\\" , \\\"success\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Message Type\"}},{\"name\":\"ref\",\"section\":\"SectionMessage\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"SectionMessage\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"alternate\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"SectionMessageCloseButton\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"ref\",\"section\":\"MessageContent\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"MessageContent\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"element\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element\"}},{\"name\":\"ref\",\"section\":\"MessageIcon\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"select\",\"version\":\"0.0.1\",\"description\":\"HTML element that allows users to select one option from a list.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default selects\",\"description\":\"\",\"order\":1},{\"name\":\"Custom selects\",\"description\":\"\",\"order\":2}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default selects\",\"url\":\"components/select/default-select\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport { InputContainer, InputControl, Label, Select, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-select';\\n\\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\\n\\nexport const DefaultSelect = () => {\\n  return (\\n    <Utility tag=\\\"fieldset\\\" vFlex vFlexCol vGap={6}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Select id={id} name={`${id}-name`}>\\n          <option hidden value=\\\"\\\" />\\n          {options.map((option, index) => (\\n            <option key={`${id}-option-${index}`} value={index}>\\n              {option}\\n            </option>\\n          ))}\\n        </Select>\\n        <InputControl>\\n          <VisaChevronDownTiny />\\n        </InputControl>\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default select\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default selects\",\"url\":\"components/select/inline-select\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport { InputContainer, InputControl, Label, Select, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'inline-select';\\n\\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\\n\\nexport const InlineSelect = () => {\\n  return (\\n    <Utility tag=\\\"fieldset\\\" vAlignItems=\\\"center\\\" vFlex vFlexRow vGap={6}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Select id={id} name={`${id}-name`}>\\n          <option hidden value=\\\"\\\" />\\n          {options.map((option, index) => (\\n            <option key={`${id}-option-${index}`} value={index}>\\n              {option}\\n            </option>\\n          ))}\\n        </Select>\\n        <InputControl>\\n          <VisaChevronDownTiny />\\n        </InputControl>\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Select with inline label\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default selects\",\"url\":\"components/select/select-with-inline-message\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport { InputContainer, InputControl, InputMessage, Label, Select, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'select-with-inline-message';\\n\\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\\n\\nexport const SelectWithInlineMessage = () => {\\n  return (\\n    <Utility aria-labelledby={`${id}-message`} tag=\\\"fieldset\\\" vFlex vFlexCol vGap={6}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Select aria-describedby={`${id}-message`} id={id} name={`${id}-name`}>\\n          <option hidden value=\\\"\\\" />\\n          {options.map((option, index) => (\\n            <option key={`${id}-option-${index}`} value={index}>\\n              {option}\\n            </option>\\n          ))}\\n        </Select>\\n        <InputControl>\\n          <VisaChevronDownTiny />\\n        </InputControl>\\n      </InputContainer>\\n      <InputMessage id={`${id}-message`}>This is optional text that describes the label in more detail.</InputMessage>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Select with inline message\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default selects\",\"url\":\"components/select/error-select\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaErrorTiny } from '@visa/nova-icons-react';\\nimport { ChangeEvent, FormEvent, useRef, useState } from 'react';\\nimport { Button, InputContainer, InputControl, InputMessage, Label, Select, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'error-select';\\n\\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\\n\\nexport const ErrorSelect = () => {\\n  const [invalid, setInvalid] = useState(false);\\n  const [selectValue, setSelectValue] = useState('');\\n  const selectRef = useRef<HTMLSelectElement>(null);\\n\\n  const onReset = (event: FormEvent) => {\\n    event.preventDefault();\\n    setInvalid(false);\\n    setSelectValue('');\\n  };\\n  const onSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\\n    const { value } = event.currentTarget;\\n    setInvalid(!value);\\n    setSelectValue(value);\\n  };\\n  const onSubmit = (event: FormEvent) => {\\n    event.preventDefault();\\n    const isInvalid = !selectValue;\\n    setInvalid(isInvalid);\\n    if (isInvalid) {\\n      selectRef.current?.focus();\\n    }\\n  };\\n\\n  return (\\n    <Utility noValidate onReset={onReset} onSubmit={onSubmit} tag=\\\"form\\\" vFlex vFlexCol vGap={16}>\\n      <Utility aria-labelledby={`${id}-message`} tag=\\\"fieldset\\\" vFlex vFlexCol vGap={6}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer>\\n          <Select\\n            aria-describedby={`${id}-message`}\\n            aria-invalid={invalid}\\n            id={id}\\n            name=\\\"full-name\\\"\\n            onChange={onSelectChange}\\n            ref={selectRef}\\n            required\\n            value={selectValue}\\n          >\\n            <option hidden value=\\\"\\\" />\\n            {options.map((option, index) => (\\n              <option key={`${id}-option-${index}`} value={index}>\\n                {option}\\n              </option>\\n            ))}\\n          </Select>\\n          <InputControl>\\n            <VisaChevronDownTiny />\\n          </InputControl>\\n        </InputContainer>\\n        {invalid && (\\n          <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`}>\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail\\n          </InputMessage>\\n        )}\\n      </Utility>\\n      <Utility vFlex vGap={10}>\\n        <Button type=\\\"submit\\\">Submit</Button>\\n        <Button colorScheme=\\\"secondary\\\" type=\\\"reset\\\">\\n          Reset\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Select with error\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default selects\",\"url\":\"components/select/read-only-select\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport { InputContainer, InputControl, Label, Select, Utility } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'read-only-select';\\n\\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\\n\\nexport const ReadOnlySelect = () => {\\n  return (\\n    <Utility tag=\\\"fieldset\\\" vFlex vFlexCol vGap={6}>\\n      <Label htmlFor={id}>Label (required)</Label>\\n      <InputContainer>\\n        <Select defaultValue=\\\"0\\\" id={id} name={`${id}-name`} readOnly required>\\n          <option hidden value=\\\"\\\" />\\n          {options.map((option, index) => (\\n            <option disabled key={`${id}-option-${index}`} value={index}>\\n              {option}\\n            </option>\\n          ))}\\n        </Select>\\n        <InputControl>\\n          <VisaChevronDownTiny />\\n        </InputControl>\\n      </InputContainer>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Read-only select\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default selects\",\"url\":\"components/select/disabled-select\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport { Checkbox, InputContainer, InputControl, InputMessage, Label, Select, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-select';\\n\\nconst options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E'];\\n\\nexport const DisabledSelect = () => {\\n  const [disabled, setDisabled] = useState(true);\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={16}>\\n      <Utility aria-labelledby={`${id}-message`} tag=\\\"fieldset\\\" vFlex vFlexCol vGap={6}>\\n        <Label htmlFor={id}>Label (required)</Label>\\n        <InputContainer>\\n          <Select aria-describedby={`${id}-message`} disabled={disabled} id={id} name={`${id}-name`}>\\n            <option hidden value=\\\"\\\" />\\n            {options.map((option, index) => (\\n              <option key={`${id}-option-${index}`} value={index}>\\n                {option}\\n              </option>\\n            ))}\\n          </Select>\\n          <InputControl>\\n            <VisaChevronDownTiny />\\n          </InputControl>\\n        </InputContainer>\\n        <InputMessage id={`${id}-message`}>This is optional text that describes the label in more detail.</InputMessage>\\n      </Utility>\\n      <Utility vAlignItems=\\\"center\\\" vFlex vGap={2}>\\n        <Checkbox\\n          checked={disabled}\\n          id={`${id}-demo-checkbox`}\\n          onChange={() => {\\n            setDisabled(!disabled);\\n          }}\\n        />\\n        <Label htmlFor={`${id}-demo-checkbox`}>Mark select as disabled</Label>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled select\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom selects\",\"url\":\"components/select/card-expiration\",\"tags\":[\"custom\"],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny, VisaErrorTiny } from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  InputContainer,\\n  InputControl,\\n  InputMessage,\\n  Label,\\n  Select,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\nimport { ChangeEvent, FormEvent, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'card-expiration-select';\\n\\nconst today = new Date();\\nconst currentMonth = today.getMonth() + 1;\\nconst currentMonthString = currentMonth.toString();\\nconst currentYear = today.getFullYear();\\nconst currentYearString = currentYear.toString();\\n\\nconst months = Array.from({ length: 12 }, (_, i) => i + 1);\\nconst years = Array.from({ length: 11 }, (_, i) => currentYear + i);\\n\\nexport const CardExpirationSelect = () => {\\n  const [selectedMonth, setSelectedMonth] = useState('');\\n  const [selectedYear, setSelectedYear] = useState('');\\n  const [invalid, setInvalid] = useState(false);\\n\\n  const onMonthChange = (event: ChangeEvent<HTMLSelectElement>) => {\\n    setSelectedMonth(event.target.value);\\n    setInvalid(false);\\n  };\\n  const onYearChange = (event: ChangeEvent<HTMLSelectElement>) => {\\n    setSelectedYear(event.target.value);\\n    setInvalid(false);\\n  };\\n\\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\\n    const isValid = event.currentTarget.checkValidity();\\n\\n    // If valid, alert with selections\\n    if (isValid) alert(`Selected Month: ${selectedMonth}\\\\nSelected Year: ${selectedYear}`);\\n    // If invalid, focus on invalid element\\n    else (event.currentTarget.querySelector(':not(fieldset):invalid') as HTMLInputElement)?.focus();\\n\\n    setInvalid(!isValid);\\n    event.preventDefault();\\n  };\\n\\n  return (\\n    <Utility noValidate onSubmit={onSubmit} tag=\\\"form\\\" vFlex vFlexCol vGap={6}>\\n      <Utility aria-labelledby={`${id}-message`} tag=\\\"fieldset\\\" vFlex vFlexCol vGap={4}>\\n        <Label tag=\\\"legend\\\">Expires (MM/YY)</Label>\\n        <Utility vFlex vFlexRow vAlignItems=\\\"center\\\" vGap={6}>\\n          {/* Month select */}\\n          <InputContainer>\\n            <Select\\n              aria-describedby={`${id}-message`}\\n              aria-invalid={invalid && selectedMonth === ''}\\n              aria-label=\\\"Expiration month\\\"\\n              aria-required={true}\\n              autoComplete=\\\"cc-exp-month\\\"\\n              id={`${id}-month`}\\n              name={`${id}-month`}\\n              onChange={onMonthChange}\\n              required\\n              value={selectedMonth}\\n            >\\n              <option hidden value=\\\"\\\" />\\n              {months.map(month => (\\n                <option\\n                  disabled={selectedYear !== '' && selectedYear === currentYearString && month < currentMonth}\\n                  key={`card-exp-month-${month}`}\\n                  value={month}\\n                >\\n                  {(month < 10 ? '0' : '') + month}\\n                </option>\\n              ))}\\n            </Select>\\n            <InputControl>\\n              <VisaChevronDownTiny />\\n            </InputControl>\\n          </InputContainer>\\n\\n          <Typography aria-hidden={true} tag=\\\"span\\\" variant=\\\"body-1\\\">\\n            /\\n          </Typography>\\n\\n          {/* Year select */}\\n          <InputContainer>\\n            <Select\\n              aria-describedby={`${id}-message`}\\n              aria-invalid={invalid && selectedYear === ''}\\n              aria-label=\\\"Expiration year\\\"\\n              aria-required={true}\\n              autoComplete=\\\"cc-exp-year\\\"\\n              id={`${id}-year`}\\n              name={`${id}-year`}\\n              onChange={onYearChange}\\n              required\\n              value={selectedYear}\\n            >\\n              <option hidden value=\\\"\\\" />\\n              {years.map(year => (\\n                <option\\n                  disabled={selectedMonth !== '' && year === currentYear && selectedMonth < currentMonthString}\\n                  key={`card-exp-year-${year}`}\\n                  value={year}\\n                >\\n                  {year.toString().substring(2)}\\n                </option>\\n              ))}\\n            </Select>\\n            <InputControl>\\n              <VisaChevronDownTiny />\\n            </InputControl>\\n          </InputContainer>\\n        </Utility>\\n        {invalid && (\\n          <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${id}-message`}>\\n            <VisaErrorTiny />\\n            This is required text that describes the error in more detail\\n          </InputMessage>\\n        )}\\n      </Utility>\\n      <div>\\n        <Button type=\\\"submit\\\">Submit</Button>\\n      </div>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Select for card expiration\"}],\"propertySections\":[{\"order\":1,\"name\":\"Select\",\"selector\":\"<Select />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"HTML element that allows users to select one option from a list.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Select\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Select\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"select\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"surface\",\"version\":\"0.0.1\",\"description\":\"Styles container to be used for alternate backgrounds.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Examples\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/surface/default-surface\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface } from '@visa/nova-react';\\n\\nexport const DefaultSurface = () => {\\n  return <Surface>Example</Surface>;\\n};\\n\"},\"name\":\"Default\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Examples\",\"url\":\"components/surface/alternate-surface\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface } from '@visa/nova-react';\\n\\nexport const AlternateSurface = () => {\\n  return <Surface surfaceType=\\\"alternate\\\">Example</Surface>;\\n};\\n\"},\"name\":\"Alternate\"}],\"propertySections\":[{\"order\":1,\"name\":\"Surface\",\"selector\":\"<Surface />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Styles container to be used for alternate backgrounds.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Surface\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"surfaceType\",\"section\":\"Surface\",\"data\":{\"name\":\"surfaceType\",\"type\":\"\\\"alternate\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Type of Surface\"}},{\"name\":\"tag\",\"section\":\"Surface\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"switch\",\"version\":\"0.0.1\",\"description\":\"Binary control that allows users to toggle between two states, such as on/off.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default switches\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default switches\",\"url\":\"components/switch/default-switch\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Switch, SwitchLabel, Utility } from '@visa/nova-react';\\n\\nconst id = 'default-switch-example';\\n\\nexport const DefaultSwitch = () => {\\n  return (\\n    <Utility vFlex vFlexWrap vGap={10} vJustifyContent=\\\"between\\\" vMargin={8} style={{ maxInlineSize: '288px' }}>\\n      <SwitchLabel htmlFor={`${id}-switch`}>Label</SwitchLabel>\\n      <Switch id={`${id}-switch`} name=\\\"default-switch\\\" />\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default switch\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default switches\",\"url\":\"components/switch/optional-message-switch\",\"tags\":[],\"snippets\":{\"tsx\":\"import { InputMessage, Switch, SwitchLabel, Utility } from '@visa/nova-react';\\n\\nconst id = 'optional-message-switch-example';\\n\\nexport const OptionalMessageSwitch = () => {\\n  return (\\n    <Utility\\n      vAlignItems=\\\"center\\\"\\n      vFlex\\n      vFlexRow\\n      vFlexWrap\\n      vGap={10}\\n      vJustifyContent=\\\"between\\\"\\n      vMargin={8}\\n      style={{ maxInlineSize: '288px' }}\\n    >\\n      <Utility vFlex vFlexCol vFlexGrow vGap={2} vJustifyContent=\\\"between\\\" style={{ flexBasis: 'min-content' }}>\\n        <SwitchLabel htmlFor={`${id}-switch`}>Label</SwitchLabel>\\n        <InputMessage id={`${id}-message`}>\\n          This is optional text that can be used to describe the label in more detail.\\n        </InputMessage>\\n      </Utility>\\n      <Switch aria-describedby={`${id}-message`} id={`${id}-switch`} name=\\\"switch-with-message\\\" />\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Switch with description\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default switches\",\"url\":\"components/switch/disabled-switch\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Switch, SwitchLabel, Utility } from '@visa/nova-react';\\n\\nconst id = 'disabled-switch-example';\\n\\nexport const DisabledSwitch = () => {\\n  return (\\n    <Utility vFlex vFlexWrap vGap={10} vJustifyContent=\\\"between\\\" vMargin={8} style={{ maxInlineSize: '288px' }}>\\n      <SwitchLabel htmlFor={`${id}-switch`}>Label</SwitchLabel>\\n      <Switch disabled id={`${id}-switch`} name=\\\"disabled-off-switch\\\" />\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled switch\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default switches\",\"url\":\"components/switch/disabled-switch-on\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Switch, SwitchLabel, Utility } from '@visa/nova-react';\\n\\nconst id = 'disabled-switch-on-example';\\n\\nexport const DisabledSwitchOn = () => {\\n  return (\\n    <Utility vFlex vFlexWrap vGap={10} vJustifyContent=\\\"between\\\" vMargin={8} style={{ maxInlineSize: '288px' }}>\\n      <SwitchLabel htmlFor={`${id}-switch`}>Label</SwitchLabel>\\n      <Switch checked disabled id={`${id}-switch`} name=\\\"disabled-switch-on\\\" />\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Disabled selected switch\"}],\"propertySections\":[{\"order\":1,\"name\":\"Switch\",\"selector\":\"<Switch />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Binary control that allows users to toggle between two states, such as on/off.\"},{\"order\":2,\"name\":\"SwitchLabel\",\"selector\":\"<SwitchLabel />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Label to be used with switch component.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Switch\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Switch\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"input\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"SwitchLabel\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"SwitchLabel\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"table\",\"version\":\"0.0.1\",\"description\":\"Grid that organizes information, enabling data interaction, manipulation, and criteria-based analysis using columns and rows.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Static tables with banded rows\",\"description\":\"\",\"order\":1},{\"name\":\"Static tables without banded rows\",\"description\":\"\",\"order\":2},{\"name\":\"Static tables with group headers\",\"description\":\"\",\"order\":3},{\"name\":\"Key value static tables\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables with banded rows\",\"url\":\"components/table/large-padding-banded-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const LargePaddingBandedTable = () => {\\n  return (\\n    <Table\\n      alternate\\n      style={\\n        {\\n          '--v-table-data-padding-block-default': 'var(--v-table-data-padding-block-large)',\\n          '--v-table-data-block-default': 'var(--v-table-data-block-large)',\\n        } as CSSProperties\\n      }\\n    >\\n      <ScreenReader tag=\\\"caption\\\">Table with large padding and banded rows.</ScreenReader>\\n      <Thead>\\n        <Tr>\\n          <Th scope=\\\"col\\\">Column A</Th>\\n          <Th scope=\\\"col\\\">Column B</Th>\\n          <Th scope=\\\"col\\\">Column C</Th>\\n          <Th scope=\\\"col\\\">Column D</Th>\\n        </Tr>\\n      </Thead>\\n      <Tbody>\\n        <Tr>\\n          <Td>A1</Td>\\n          <Td>B1</Td>\\n          <Td>C1</Td>\\n          <Td>D1</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A2</Td>\\n          <Td>B2</Td>\\n          <Td>C2</Td>\\n          <Td>D2</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A3</Td>\\n          <Td>B3</Td>\\n          <Td>C3</Td>\\n          <Td>D3</Td>\\n        </Tr>\\n      </Tbody>\\n    </Table>\\n  );\\n};\\n\"},\"name\":\"Large padding table with banded rows\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables with banded rows\",\"url\":\"components/table/medium-padding-banded-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const MediumPaddingBandedTable = () => {\\n  return (\\n    <Table alternate>\\n      <ScreenReader tag=\\\"caption\\\">Table with medium padding and banded rows.</ScreenReader>\\n      <Thead>\\n        <Tr>\\n          <Th scope=\\\"col\\\">Column A</Th>\\n          <Th scope=\\\"col\\\">Column B</Th>\\n          <Th scope=\\\"col\\\">Column C</Th>\\n          <Th scope=\\\"col\\\">Column D</Th>\\n        </Tr>\\n      </Thead>\\n      <Tbody>\\n        <Tr>\\n          <Td>A1</Td>\\n          <Td>B1</Td>\\n          <Td>C1</Td>\\n          <Td>D1</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A2</Td>\\n          <Td>B2</Td>\\n          <Td>C2</Td>\\n          <Td>D2</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A3</Td>\\n          <Td>B3</Td>\\n          <Td>C3</Td>\\n          <Td>D3</Td>\\n        </Tr>\\n      </Tbody>\\n    </Table>\\n  );\\n};\\n\"},\"name\":\"Medium padding table with banded rows\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables with banded rows\",\"url\":\"components/table/small-padding-banded-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\nimport { ScreenReader, Table, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const SmallPaddingBandedTable = () => {\\n  return (\\n    <Table\\n      alternate\\n      style={\\n        {\\n          '--v-table-data-padding-block-default': 'var(--v-table-data-padding-block-small)',\\n          '--v-table-data-block-default': 'var(--v-table-data-block-small)',\\n        } as CSSProperties\\n      }\\n    >\\n      <ScreenReader tag=\\\"caption\\\">Table with compact padding and banded rows.</ScreenReader>\\n      <Thead>\\n        <Tr>\\n          <Th scope=\\\"col\\\">Column A</Th>\\n          <Th scope=\\\"col\\\">Column B</Th>\\n          <Th scope=\\\"col\\\">Column C</Th>\\n          <Th scope=\\\"col\\\">Column D</Th>\\n        </Tr>\\n      </Thead>\\n      <Tbody>\\n        <Tr>\\n          <Td>A1</Td>\\n          <Td>B1</Td>\\n          <Td>C1</Td>\\n          <Td>D1</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A2</Td>\\n          <Td>B2</Td>\\n          <Td>C2</Td>\\n          <Td>D2</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A3</Td>\\n          <Td>B3</Td>\\n          <Td>C3</Td>\\n          <Td>D3</Td>\\n        </Tr>\\n      </Tbody>\\n    </Table>\\n  );\\n};\\n\"},\"name\":\"Small padding table with banded rows\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables with banded rows\",\"url\":\"components/table/scroll-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\nimport { ScreenReader, Table, TableWrapper, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const ScrollTable = () => {\\n  return (\\n    <TableWrapper\\n      style={{ '--v-table-wrapper-block-size': '288px', '--v-table-wrapper-inline-size': '576px' } as CSSProperties}\\n      tabIndex={0}\\n    >\\n      <Table alternate>\\n        <ScreenReader tag=\\\"caption\\\">Table with extra data added to demo scrollable content.</ScreenReader>\\n        <Thead>\\n          <Tr>\\n            <Th scope=\\\"col\\\">Column A</Th>\\n            <Th scope=\\\"col\\\">Column B</Th>\\n            <Th scope=\\\"col\\\">Column C</Th>\\n            <Th scope=\\\"col\\\">Column D</Th>\\n            <Th scope=\\\"col\\\">Column E</Th>\\n            <Th scope=\\\"col\\\">Column F</Th>\\n            <Th scope=\\\"col\\\">Column G</Th>\\n            <Th scope=\\\"col\\\">Column H</Th>\\n            <Th scope=\\\"col\\\">Column I</Th>\\n            <Th scope=\\\"col\\\">Column J</Th>\\n            <Th scope=\\\"col\\\">Column K</Th>\\n            <Th scope=\\\"col\\\">Column L</Th>\\n          </Tr>\\n        </Thead>\\n        <Tbody>\\n          <Tr>\\n            <Td>A1</Td>\\n            <Td>B1</Td>\\n            <Td>C1</Td>\\n            <Td>D1</Td>\\n            <Td>E1</Td>\\n            <Td>F1</Td>\\n            <Td>G1</Td>\\n            <Td>H1</Td>\\n            <Td>I1</Td>\\n            <Td>J1</Td>\\n            <Td>K1</Td>\\n            <Td>L1</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A2</Td>\\n            <Td>B2</Td>\\n            <Td>C2</Td>\\n            <Td>D2</Td>\\n            <Td>E2</Td>\\n            <Td>F2</Td>\\n            <Td>G2</Td>\\n            <Td>H2</Td>\\n            <Td>I2</Td>\\n            <Td>J2</Td>\\n            <Td>K2</Td>\\n            <Td>L2</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A3</Td>\\n            <Td>B3</Td>\\n            <Td>C3</Td>\\n            <Td>D3</Td>\\n            <Td>E3</Td>\\n            <Td>F3</Td>\\n            <Td>G3</Td>\\n            <Td>H3</Td>\\n            <Td>I3</Td>\\n            <Td>J3</Td>\\n            <Td>K3</Td>\\n            <Td>L3</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A4</Td>\\n            <Td>B4</Td>\\n            <Td>C4</Td>\\n            <Td>D4</Td>\\n            <Td>E4</Td>\\n            <Td>F4</Td>\\n            <Td>G4</Td>\\n            <Td>H4</Td>\\n            <Td>I4</Td>\\n            <Td>J4</Td>\\n            <Td>K4</Td>\\n            <Td>L4</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A5</Td>\\n            <Td>B5</Td>\\n            <Td>C5</Td>\\n            <Td>D5</Td>\\n            <Td>E5</Td>\\n            <Td>F5</Td>\\n            <Td>G5</Td>\\n            <Td>H5</Td>\\n            <Td>I5</Td>\\n            <Td>J5</Td>\\n            <Td>K5</Td>\\n            <Td>L5</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A6</Td>\\n            <Td>B6</Td>\\n            <Td>C6</Td>\\n            <Td>D6</Td>\\n            <Td>E6</Td>\\n            <Td>F6</Td>\\n            <Td>G6</Td>\\n            <Td>H6</Td>\\n            <Td>I6</Td>\\n            <Td>J6</Td>\\n            <Td>K6</Td>\\n            <Td>L6</Td>\\n          </Tr>\\n        </Tbody>\\n      </Table>\\n    </TableWrapper>\\n  );\\n};\\n\"},\"name\":\"Table with scrollbars and banded rows\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables without banded rows\",\"url\":\"components/table/lined-rows-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const LinedRowsTable = () => {\\n  return (\\n    <Table borderBlock>\\n      <ScreenReader tag=\\\"caption\\\">Table with lined rows.</ScreenReader>\\n      <Thead>\\n        <Tr>\\n          <Th scope=\\\"col\\\">Column A</Th>\\n          <Th scope=\\\"col\\\">Column B</Th>\\n          <Th scope=\\\"col\\\">Column C</Th>\\n          <Th scope=\\\"col\\\">Column D</Th>\\n        </Tr>\\n      </Thead>\\n      <Tbody>\\n        <Tr>\\n          <Td>A1</Td>\\n          <Td>B1</Td>\\n          <Td>C1</Td>\\n          <Td>D1</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A2</Td>\\n          <Td>B2</Td>\\n          <Td>C2</Td>\\n          <Td>D2</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A3</Td>\\n          <Td>B3</Td>\\n          <Td>C3</Td>\\n          <Td>D3</Td>\\n        </Tr>\\n      </Tbody>\\n    </Table>\\n  );\\n};\\n\"},\"name\":\"Table with lined rows\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables without banded rows\",\"url\":\"components/table/outer-border-column-row-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, TableWrapper, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const OuterBorderColumnRowDividerTable = () => {\\n  return (\\n    <TableWrapper>\\n      <Table border>\\n        <ScreenReader tag=\\\"caption\\\">Table with outer borders on column and row dividers.</ScreenReader>\\n        <Thead>\\n          <Tr>\\n            <Th scope=\\\"col\\\">Column A</Th>\\n            <Th scope=\\\"col\\\">Column B</Th>\\n            <Th scope=\\\"col\\\">Column C</Th>\\n            <Th scope=\\\"col\\\">Column D</Th>\\n          </Tr>\\n        </Thead>\\n        <Tbody>\\n          <Tr>\\n            <Td>A1</Td>\\n            <Td>B1</Td>\\n            <Td>C1</Td>\\n            <Td>D1</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A2</Td>\\n            <Td>B2</Td>\\n            <Td>C2</Td>\\n            <Td>D2</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A3</Td>\\n            <Td>B3</Td>\\n            <Td>C3</Td>\\n            <Td>D3</Td>\\n          </Tr>\\n        </Tbody>\\n      </Table>\\n    </TableWrapper>\\n  );\\n};\\n\"},\"name\":\"Table with outer border, column, and row dividers\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables without banded rows\",\"url\":\"components/table/outer-border-subtle-header-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, TableWrapper, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const OuterBorderSubtleHeaderTable = () => {\\n  return (\\n    <TableWrapper>\\n      <Table border subtle>\\n        <ScreenReader tag=\\\"caption\\\">Table with outer borders and subtle headers.</ScreenReader>\\n        <Thead>\\n          <Tr>\\n            <Th scope=\\\"col\\\">Column A</Th>\\n            <Th scope=\\\"col\\\">Column B</Th>\\n            <Th scope=\\\"col\\\">Column C</Th>\\n            <Th scope=\\\"col\\\">Column D</Th>\\n          </Tr>\\n        </Thead>\\n        <Tbody>\\n          <Tr>\\n            <Td>A1</Td>\\n            <Td>B1</Td>\\n            <Td>C1</Td>\\n            <Td>D1</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A2</Td>\\n            <Td>B2</Td>\\n            <Td>C2</Td>\\n            <Td>D2</Td>\\n          </Tr>\\n          <Tr>\\n            <Td>A3</Td>\\n            <Td>B3</Td>\\n            <Td>C3</Td>\\n            <Td>D3</Td>\\n          </Tr>\\n        </Tbody>\\n      </Table>\\n    </TableWrapper>\\n  );\\n};\\n\"},\"name\":\"Table with outer border and subtle headers\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables with group headers\",\"url\":\"components/table/group-headers-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const GroupHeadersTable = () => {\\n  return (\\n    <Table border>\\n      <ScreenReader tag=\\\"caption\\\">Table with group headers.</ScreenReader>\\n      <Thead>\\n        <Tr className=\\\"v-typography-overline\\\">\\n          <Th alternate colSpan={2}>\\n            Group header 1\\n          </Th>\\n          <Th alternate colSpan={2}>\\n            Group header 2\\n          </Th>\\n        </Tr>\\n        <Tr>\\n          <Th scope=\\\"col\\\">Column A</Th>\\n          <Th scope=\\\"col\\\">Column B</Th>\\n          <Th scope=\\\"col\\\">Column C</Th>\\n          <Th scope=\\\"col\\\">Column D</Th>\\n        </Tr>\\n      </Thead>\\n      <Tbody>\\n        <Tr>\\n          <Td>A1</Td>\\n          <Td>B1</Td>\\n          <Td>C1</Td>\\n          <Td>D1</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A2</Td>\\n          <Td>B2</Td>\\n          <Td>C2</Td>\\n          <Td>D2</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A3</Td>\\n          <Td>B3</Td>\\n          <Td>C3</Td>\\n          <Td>D3</Td>\\n        </Tr>\\n      </Tbody>\\n    </Table>\\n  );\\n};\\n\"},\"name\":\"Table with group headers\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Static tables with group headers\",\"url\":\"components/table/group-headers-empty-cell-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, Tbody, Td, Th, Thead, Tr } from '@visa/nova-react';\\n\\nexport const GroupHeadersEmptyCellTable = () => {\\n  return (\\n    <Table border>\\n      <ScreenReader tag=\\\"caption\\\">Table with group headers and an empty cell.</ScreenReader>\\n      <Thead>\\n        <Tr className=\\\"v-typography-overline\\\">\\n          <Th alternate tag=\\\"td\\\" />\\n          <Th alternate colSpan={1}>\\n            Group header 1\\n          </Th>\\n          <Th alternate colSpan={1}>\\n            Group header 2\\n          </Th>\\n        </Tr>\\n        <Tr>\\n          <Th scope=\\\"col\\\">Column A</Th>\\n          <Th scope=\\\"col\\\">Column B</Th>\\n          <Th scope=\\\"col\\\">Column C</Th>\\n        </Tr>\\n      </Thead>\\n      <Tbody>\\n        <Tr>\\n          <Td>A1</Td>\\n          <Td>B1</Td>\\n          <Td>C1</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A2</Td>\\n          <Td>B2</Td>\\n          <Td>C2</Td>\\n        </Tr>\\n        <Tr>\\n          <Td>A3</Td>\\n          <Td>B3</Td>\\n          <Td>C3</Td>\\n        </Tr>\\n      </Tbody>\\n    </Table>\\n  );\\n};\\n\"},\"name\":\"Table with group headers with empty cell\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Key value static tables\",\"url\":\"components/table/key-value-banded-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, Tbody, Td, Tr } from '@visa/nova-react';\\n\\nexport const KeyValueBandedTable = () => {\\n  return (\\n    <Table alternate keyValue>\\n      <ScreenReader tag=\\\"caption\\\">Table with banded key-value pairs.</ScreenReader>\\n      <Tbody>\\n        <Tr>\\n          <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n            Key 1\\n          </th>\\n          <Td>Value 1</Td>\\n        </Tr>\\n        <Tr>\\n          <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n            Key 2\\n          </th>\\n          <Td>Value 2</Td>\\n        </Tr>\\n        <Tr>\\n          <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n            Key 3\\n          </th>\\n          <Td>Value 3</Td>\\n        </Tr>\\n        <Tr>\\n          <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n            Key 4\\n          </th>\\n          <Td>Value 4</Td>\\n        </Tr>\\n      </Tbody>\\n    </Table>\\n  );\\n};\\n\"},\"name\":\"Key value table with banded rows\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Key value static tables\",\"url\":\"components/table/key-value-lined-table\",\"tags\":[],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, TableWrapper, Tbody, Td, Tr } from '@visa/nova-react';\\n\\nexport const KeyValueLinedTable = () => {\\n  return (\\n    <TableWrapper>\\n      <Table keyValue border>\\n        <ScreenReader tag=\\\"caption\\\">Table with lined key-value pairs.</ScreenReader>\\n        <Tbody>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 1\\n            </th>\\n            <Td>Value 1</Td>\\n          </Tr>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 2\\n            </th>\\n            <Td>Value 2</Td>\\n          </Tr>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 3\\n            </th>\\n            <Td>Value 3</Td>\\n          </Tr>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 4\\n            </th>\\n            <Td>Value 4</Td>\\n          </Tr>\\n        </Tbody>\\n      </Table>\\n    </TableWrapper>\\n  );\\n};\\n\"},\"name\":\"Key value table with lined rows\"}],\"propertySections\":[{\"order\":1,\"name\":\"Table\",\"selector\":\"<Table />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Grid that organizes information, enabling data interaction, manipulation, and criteria-based analysis using columns and rows.\"},{\"order\":2,\"name\":\"TableWrapper\",\"selector\":\"<TableWrapper />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Container for a table that adds a border with a curved radius to the table.\"},{\"order\":3,\"name\":\"Tbody\",\"selector\":\"<Tbody />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Table body component that contains all the tr and td cells.\"},{\"order\":4,\"name\":\"Td\",\"selector\":\"<Td />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Table data cell component typically used for displaying data and content.\"},{\"order\":5,\"name\":\"Th\",\"selector\":\"<Th />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Table header cell component usually used for titles and column/row descriptions.\"},{\"order\":6,\"name\":\"Thead\",\"selector\":\"<Thead />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Table head component that contains all the th cells.\"},{\"order\":7,\"name\":\"Tr\",\"selector\":\"<Tr />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Table row component.\"}],\"properties\":[{\"name\":\"alternate\",\"section\":\"Table\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alt\"}},{\"name\":\"border\",\"section\":\"Table\",\"data\":{\"name\":\"border\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Borders all around the table and cells\"}},{\"name\":\"borderBlock\",\"section\":\"Table\",\"data\":{\"name\":\"borderBlock\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Borders only separating the rows\"}},{\"name\":\"keyValue\",\"section\":\"Table\",\"data\":{\"name\":\"keyValue\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Key value pairs where text for the first column is bold.\"}},{\"name\":\"ref\",\"section\":\"Table\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"subtle\",\"section\":\"Table\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle header\"}},{\"name\":\"ref\",\"section\":\"TableWrapper\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"TableWrapper\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"Tbody\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"ref\",\"section\":\"Td\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"alternate\",\"section\":\"Th\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alt\"}},{\"name\":\"ref\",\"section\":\"Th\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Th\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"th\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"Thead\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"ref\",\"section\":\"Tr\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"tabs\",\"version\":\"0.0.1\",\"description\":\"Organizational element that separates content and allows users to switch between views.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Vertical tabs\",\"description\":\"\",\"order\":1},{\"name\":\"Horizontal tabs\",\"description\":\"\",\"order\":2},{\"name\":\"Stacked Tabs\",\"description\":\"\",\"order\":3},{\"name\":\"Custom tabs\",\"description\":\"\",\"order\":4}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Vertical tabs\",\"url\":\"components/tabs/default-vertical-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, UtilityFragment, useTabs } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-vertical-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const DefaultVerticalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'vertical', defaultSelected: 0 });\\n\\n  return (\\n    <Utility vFlex vFlexWrap vGap={8}>\\n      <Tabs onKeyDown={onKeyNavigation} orientation=\\\"vertical\\\" role=\\\"tablist\\\" style={{ flexBasis: '30%' }}>\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <UtilityFragment vPadding={10}>\\n          <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\">\\n            <span>{tabsContent[selectedIndex]?.text}</span>\\n          </Surface>\\n        </UtilityFragment>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default vertical tablist\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Vertical tabs\",\"url\":\"components/tabs/icon-vertical-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaStatisticsTiny, VisaTopicTiny, VisaEmailTiny, VisaHomeTiny } from '@visa/nova-icons-react';\\nimport { Button, Surface, Tab, Tabs, Utility, UtilityFragment, useTabs } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-icon-vertical-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    icon: <VisaStatisticsTiny />,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    icon: <VisaTopicTiny />,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    icon: <VisaEmailTiny />,\\n    id: `${id}-tab-2`,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    icon: <VisaHomeTiny />,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const IconVerticalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'vertical', defaultSelected: 0 });\\n\\n  return (\\n    <Utility vFlex vFlexWrap vGap={8}>\\n      <Tabs onKeyDown={onKeyNavigation} orientation=\\\"vertical\\\" role=\\\"tablist\\\" style={{ flexBasis: '30%' }}>\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n              style={{ minInlineSize: 'max-content' } as CSSProperties}\\n            >\\n              {tabContent.icon}\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <UtilityFragment vPadding={10}>\\n          <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\">\\n            <span>{tabsContent[selectedIndex]?.text}</span>\\n          </Surface>\\n        </UtilityFragment>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Vertical tablist with icon\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Vertical tabs\",\"url\":\"components/tabs/disabled-vertical-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, UtilityFragment, useTabs } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-disabled-vertical-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n    disabled: true,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const DisabledVerticalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'vertical', defaultSelected: 0 });\\n\\n  return (\\n    <Utility vFlex vFlexWrap vGap={8}>\\n      <Tabs onKeyDown={onKeyNavigation} orientation=\\\"vertical\\\" role=\\\"tablist\\\" style={{ flexBasis: '30%' }}>\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              disabled={tabContent.disabled}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <UtilityFragment vPadding={10}>\\n          <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\">\\n            <span>{tabsContent[selectedIndex]?.text}</span>\\n          </Surface>\\n        </UtilityFragment>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Vertical tablist with disabled tab\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Vertical tabs\",\"url\":\"components/tabs/vertical-tab-with-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Tab, Tabs, TabSuffix, Utility } from '@visa/nova-react';\\nimport { VisaChevronDownTiny, VisaChevronUpTiny, VisaHomeTiny } from '@visa/nova-icons-react';\\nimport { useState } from 'react';\\n\\nconst subItems = ['L1 label 1', 'L1 label 2'];\\n\\nexport const VerticalTabWithMenu = () => {\\n  const [isTabExpanded, setIsTabExpanded] = useState(false);\\n\\n  return (\\n    <Utility vFlex vFlexWrap vGap={8}>\\n      <Tabs orientation=\\\"vertical\\\" tag=\\\"div\\\">\\n        <Tab tag=\\\"div\\\">\\n          <Button aria-expanded={isTabExpanded} colorScheme=\\\"tertiary\\\" onClick={() => setIsTabExpanded(!isTabExpanded)}>\\n            <VisaHomeTiny /> Label\\n            <TabSuffix element={isTabExpanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n          </Button>\\n          {isTabExpanded && (\\n            <Tabs orientation=\\\"vertical\\\">\\n              {subItems.map((subItem, i) => (\\n                <Tab key={i}>\\n                  <Button colorScheme=\\\"tertiary\\\">{subItem}</Button>\\n                </Tab>\\n              ))}\\n            </Tabs>\\n          )}\\n        </Tab>\\n      </Tabs>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Vertical tab with menu\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Horizontal tabs\",\"url\":\"components/tabs/default-horizontal-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-horizontal-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const DefaultHorizontalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Utility>\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default horizontal tab\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Horizontal tabs\",\"url\":\"components/tabs/icon-horizontal-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\nimport { VisaStatisticsTiny, VisaTopicTiny, VisaEmailTiny, VisaHomeTiny } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-icon-horizontal-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n    icon: <VisaStatisticsTiny />,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n    icon: <VisaTopicTiny />,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n    icon: <VisaEmailTiny />,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n    icon: <VisaHomeTiny />,\\n  },\\n];\\n\\nexport const IconHorizontalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Utility>\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.icon}\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Horizontal tab with icon\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Horizontal tabs\",\"url\":\"components/tabs/disabled-horizontal-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-disabled-horizontal-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n    disabled: true,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const DisabledHorizontalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Utility>\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              disabled={tabContent.disabled}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Horizontal tablist with disabled tab\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Horizontal tabs\",\"url\":\"components/tabs/horizontal-tab-with-menu\",\"tags\":[],\"snippets\":{\"tsx\":\"import { useClick, useFloating, useInteractions } from '@floating-ui/react';\\nimport { useState } from 'react';\\nimport { DropdownButton, DropdownMenu, Listbox, ListboxItem, Utility, Tab, TabSuffix } from '@visa/nova-react';\\nimport { VisaChevronDownTiny, VisaChevronUpTiny, VisaHomeTiny } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-horizontal-tabs-with-menu-example';\\n\\nexport const HorizontalTabWithMenu = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const { context, floatingStyles, refs } = useFloating({\\n    open,\\n    onOpenChange: setOpen,\\n    placement: 'bottom-start',\\n  });\\n\\n  const onClick = useClick(context);\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([onClick]);\\n\\n  return (\\n    <Tab tag=\\\"div\\\" style={{ blockSize: 150 }}>\\n      <DropdownButton\\n        aria-controls={id}\\n        aria-expanded={open}\\n        colorScheme=\\\"tertiary\\\"\\n        buttonSize=\\\"large\\\"\\n        id={`${id}-button`}\\n        ref={refs.setReference}\\n        {...getReferenceProps()}\\n      >\\n        <VisaHomeTiny /> Label\\n        {open ? <TabSuffix element={<VisaChevronUpTiny />} /> : <TabSuffix element={<VisaChevronDownTiny />} />}\\n      </DropdownButton>\\n      {open && (\\n        <DropdownMenu\\n          id={id}\\n          ref={refs.setFloating}\\n          style={{ maxInlineSize: '100%', inlineSize: '180px', ...floatingStyles }}\\n          {...getFloatingProps()}\\n        >\\n          <Listbox tag=\\\"div\\\">\\n            <Utility\\n              element={<ListboxItem tag=\\\"button\\\" />}\\n              vPaddingHorizontal={8}\\n              vPaddingRight={24}\\n              vPaddingVertical={11}\\n            >\\n              Label 1\\n            </Utility>\\n            <Utility\\n              element={<ListboxItem tag=\\\"button\\\" />}\\n              vPaddingHorizontal={8}\\n              vPaddingRight={24}\\n              vPaddingVertical={11}\\n            >\\n              Label 2\\n            </Utility>\\n          </Listbox>\\n        </DropdownMenu>\\n      )}\\n    </Tab>\\n  );\\n};\\n\"},\"name\":\"Horizontal tab with menu\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Stacked Tabs\",\"url\":\"components/tabs/default-stacked-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\n\\nimport { VisaStatisticsLow, VisaEmailLow, VisaReceiptLow, VisaHomeLow } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-stacked-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n    icon: <VisaHomeLow />,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n    icon: <VisaReceiptLow />,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n    icon: <VisaStatisticsLow />,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n    icon: <VisaEmailLow />,\\n  },\\n];\\n\\nexport const DefaultStackedTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Utility>\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              stacked\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.icon}\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <Surface id={tabsContent[selectedIndex]?.id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default stacked tablist\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Stacked Tabs\",\"url\":\"components/tabs/disabled-stacked-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\nimport { VisaStatisticsLow, VisaEmailLow, VisaReceiptLow, VisaHomeLow } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-disabled-stacked-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n    icon: <VisaHomeLow />,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n    icon: <VisaReceiptLow />,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n    icon: <VisaStatisticsLow />,\\n    disabled: true,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n    icon: <VisaEmailLow />,\\n  },\\n];\\n\\nexport const DisabledStackedTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Utility>\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={tabContent.disabled}\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              stacked\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.icon}\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <Surface id={tabsContent[selectedIndex]?.id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Stacked tablist with disabled tab\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Stacked Tabs\",\"url\":\"components/tabs/stacked-tabs-with-notifications\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\nimport { VisaStatisticsLow, VisaEmailLow, VisaReceiptLow, VisaHomeLow } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-notifications-stacked-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n    icon: <VisaHomeLow />,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n    icon: <VisaReceiptLow />,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n    icon: <VisaStatisticsLow />,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n    icon: <VisaEmailLow />,\\n  },\\n];\\n\\nexport const StackedTabsWithNotifications = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Utility>\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              stacked\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.icon}\\n              {tabContent.tabLabel}\\n              <Badge\\n                tag=\\\"sup\\\"\\n                aria-label={`${index + 1} unread notification${index === 0 ? '' : 's'}`}\\n                badgeVariant=\\\"number\\\"\\n              >\\n                {index + 1}\\n              </Badge>\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <Surface id={tabsContent[selectedIndex]?.id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Stacked tabs with notifications\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom tabs\",\"url\":\"components/tabs/alternate-horizontal-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-alternate-horizontal-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const AlternateHorizontalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Surface surfaceType=\\\"alternate\\\">\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"xxlarge\\\">\\n        {/*\\n          We have a nested surface that has been styled in our app's stylesheet. \\n          This has been done to leverage darker palette variables and bring contrast to this custom tabpanel.\\n\\n          The CSS rule is something like this:\\n\\n          .v-surface.v-alternate .v-surface {\\n            // The background color is set to surface-3 of the default palette.\\n            background: var(--palette-default-surface-3);\\n          }\\n        */}\\n        <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Surface>\\n  );\\n};\\n\"},\"name\":\"Alternate horizontal tablist\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom tabs\",\"url\":\"components/tabs/alternate-vertical-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-alternate-vertical-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const AlternateVerticalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'vertical', defaultSelected: 0 });\\n\\n  return (\\n    <Surface surfaceType=\\\"alternate\\\">\\n      <Utility vFlex vFlexWrap vGap={8}>\\n        <Tabs orientation=\\\"vertical\\\" onKeyDown={onKeyNavigation} role=\\\"tablist\\\" style={{ flexBasis: '30%' }}>\\n          {tabsContent.map((tabContent, index) => (\\n            <Tab key={tabContent.id} role=\\\"none\\\">\\n              <Button\\n                aria-selected={index === selectedIndex}\\n                aria-controls={tabContent.id}\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => onIndexChange(index)}\\n                ref={el => {\\n                  tabsRef.current[index] = el;\\n                }}\\n                role=\\\"tab\\\"\\n                tabIndex={getTabIndex(index)}\\n              >\\n                {tabContent.tabLabel}\\n              </Button>\\n            </Tab>\\n          ))}\\n        </Tabs>\\n        <Utility vFlex vFlexGrow vElevation=\\\"xxlarge\\\">\\n          {/*\\n          We have a nested surface that has been styled in our app's stylesheet. \\n          This has been done to leverage darker palette variables and bring contrast to this custom tabpanel.\\n\\n          The CSS rule is something like this:\\n\\n          .v-surface.v-alternate .v-surface {\\n            // The background color is set to surface-3 of the default palette.\\n            background: var(--palette-default-surface-3);\\n          }\\n        */}\\n          <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n            <span>{tabsContent[selectedIndex]?.text}</span>\\n          </Surface>\\n        </Utility>\\n      </Utility>\\n    </Surface>\\n  );\\n};\\n\"},\"name\":\"Alternate vertical tablist\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom tabs\",\"url\":\"components/tabs/alternate-stacked-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\nimport { VisaStatisticsLow, VisaEmailLow, VisaReceiptLow, VisaHomeLow } from '@visa/nova-icons-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-alternate-stacked-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n    icon: <VisaHomeLow />,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n    icon: <VisaReceiptLow />,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n    icon: <VisaStatisticsLow />,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n    icon: <VisaEmailLow />,\\n  },\\n];\\n\\nexport const AlternateStackedTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Surface surfaceType=\\\"alternate\\\">\\n      <Utility>\\n        <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n          {tabsContent.map((tabContent, index) => (\\n            <Tab key={`default-stacked-tab-${index}`} role=\\\"none\\\">\\n              <Button\\n                aria-selected={index === selectedIndex}\\n                aria-controls={tabContent.id}\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => onIndexChange(index)}\\n                ref={el => {\\n                  tabsRef.current[index] = el;\\n                }}\\n                role=\\\"tab\\\"\\n                stacked\\n                tabIndex={getTabIndex(index)}\\n              >\\n                {tabContent.icon}\\n                {tabContent.tabLabel}\\n              </Button>\\n            </Tab>\\n          ))}\\n        </Tabs>\\n        <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"xxlarge\\\">\\n          {/*\\n          We have a nested surface that has been styled in our app's stylesheet. \\n          This has been done to leverage darker palette variables and bring contrast to this custom tabpanel.\\n\\n          The CSS rule is something like this:\\n\\n          .v-surface.v-alternate .v-surface {\\n            // The background color is set to surface-3 of the default palette.\\n            background: var(--palette-default-surface-3);\\n          }\\n        */}\\n          <Surface id={tabsContent[selectedIndex]?.id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n            <span>{tabsContent[selectedIndex]?.text}</span>\\n          </Surface>\\n        </Utility>\\n      </Utility>\\n    </Surface>\\n  );\\n};\\n\"},\"name\":\"Alternate stacked tablist\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom tabs\",\"url\":\"components/tabs/auto-horizontal-tabs\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Surface, Tab, Tabs, Utility, useTabs } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'nova-auto-horizontal-tabs-example';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'Label 1',\\n    text: `This is the content area for label 1`,\\n    id: `${id}-tab-0`,\\n  },\\n  {\\n    tabLabel: 'Label 2',\\n    text: `This is the content area for label 2`,\\n    id: `${id}-tab-1`,\\n  },\\n  {\\n    tabLabel: 'Label 3',\\n    text: `This is the content area for label 3`,\\n    id: `${id}-tab-2`,\\n  },\\n  {\\n    tabLabel: 'Label 4',\\n    text: `This is the content area for label 4`,\\n    id: `${id}-tab-3`,\\n  },\\n];\\n\\nexport const AutoHorizontalTabs = () => {\\n  const {\\n    getTabIndex,\\n    onIndexChange,\\n    onKeyNavigation,\\n    ref: tabsRef,\\n    selectedIndex,\\n  } = useTabs({ autoSelect: true, arrowKeyNavigation: 'horizontal', defaultSelected: 0 });\\n\\n  return (\\n    <Utility>\\n      <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n        {tabsContent.map((tabContent, index) => (\\n          <Tab key={tabContent.id} role=\\\"none\\\">\\n            <Button\\n              aria-selected={index === selectedIndex}\\n              aria-controls={tabContent.id}\\n              colorScheme=\\\"tertiary\\\"\\n              onClick={() => onIndexChange(index)}\\n              ref={el => {\\n                tabsRef.current[index] = el;\\n              }}\\n              role=\\\"tab\\\"\\n              tabIndex={getTabIndex(index)}\\n            >\\n              {tabContent.tabLabel}\\n            </Button>\\n          </Tab>\\n        ))}\\n      </Tabs>\\n      <Utility vMarginVertical={8} vFlex vFlexGrow vElevation=\\\"inset\\\">\\n        <Surface id={tabsContent[selectedIndex].id} role=\\\"tabpanel\\\" style={{ minBlockSize: '200px' }}>\\n          <span>{tabsContent[selectedIndex]?.text}</span>\\n        </Surface>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Tablist with automatic activation\"}],\"propertySections\":[{\"order\":1,\"name\":\"Tabs\",\"selector\":\"<Tabs />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Organizational element that separates content and allows users to switch between views.\"},{\"order\":2,\"name\":\"Tab\",\"selector\":\"<Tab />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Singular tab component to be used in a tab group.\"},{\"order\":3,\"name\":\"TabSuffix\",\"selector\":\"<TabSuffix />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Utility class for positioning and styling elements at the end of tab components.\"},{\"order\":4,\"name\":\"useTabs\",\"selector\":null,\"libraryId\":null,\"componentId\":null,\"type\":\"hooks\",\"description\":\"This hook allows us to set the <defaultSelected> value, which indicates that we are selecting that item by default.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Tabs\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"Tabs\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked\"}},{\"name\":\"tag\",\"section\":\"Tabs\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"ul\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"Tab\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"sectionTitle\",\"section\":\"Tab\",\"data\":{\"name\":\"sectionTitle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"section title\"}},{\"name\":\"tag\",\"section\":\"Tab\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"li\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"element\",\"section\":\"TabSuffix\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with children)\"}},{\"name\":\"ref\",\"section\":\"TabSuffix\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"textarea\",\"version\":\"0.0.1\",\"description\":\"Input component with optional dynamic sizing, usually used for long-form text input.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[],\"examples\":[],\"propertySections\":[{\"order\":1,\"name\":\"Textarea\",\"selector\":\"<Textarea />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Input component with optional dynamic sizing, usually used for long-form text input.\"}],\"properties\":[{\"name\":\"fixed\",\"section\":\"Textarea\",\"data\":{\"name\":\"fixed\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"fixed height\"}},{\"name\":\"ref\",\"section\":\"Textarea\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}}]},{\"name\":\"toggle\",\"version\":\"0.0.1\",\"description\":\"Selection element that allows users to switch between states or views.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Single-select toggle buttons\",\"description\":\"\",\"order\":1},{\"name\":\"Multi-select toggle buttons\",\"description\":\"\",\"order\":2},{\"name\":\"Custom toggle buttons\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select toggle buttons\",\"url\":\"components/toggle-button/default-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-toggle';\\n\\nconst options = [\\n  { label: 'Label 1', id: `${id}-label-1`, defaultSelected: true },\\n  { label: 'Label 2', id: `${id}-label-2` },\\n  { label: 'Label 3', id: `${id}-label-3` },\\n];\\n\\nexport const DefaultToggles = () => {\\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\\n\\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\\n    setTogglePressedState(options.map((_, buttonIndex) => pressedIndex === buttonIndex));\\n  };\\n\\n  return (\\n    <ToggleContainer>\\n      {options.map((option, optionIndex) => (\\n        <UtilityFragment key={option.id} vGap={6}>\\n          <Toggle\\n            tag=\\\"button\\\"\\n            aria-pressed={togglePressedState[optionIndex]}\\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\\n          >\\n            {option.label}\\n          </Toggle>\\n        </UtilityFragment>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Single-select toggles\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select toggle buttons\",\"url\":\"components/toggle-button/leading-icon-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationTiny, VisaViewGridTiny, VisaViewListTiny } from '@visa/nova-icons-react';\\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'leading-icon-toggle';\\n\\nconst options = [\\n  { label: 'Label 1', id: `${id}-label-1`, icon: <VisaMapLocationTiny />, defaultSelected: true },\\n  { label: 'Label 2', id: `${id}-label-2`, icon: <VisaViewListTiny /> },\\n  { label: 'Label 3', id: `${id}-label-3`, icon: <VisaViewGridTiny /> },\\n];\\n\\nexport const LeadingIconToggles = () => {\\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\\n\\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\\n    setTogglePressedState(options.map((_, buttonIndex) => pressedIndex === buttonIndex));\\n  };\\n\\n  return (\\n    <ToggleContainer>\\n      {options.map((option, optionIndex) => (\\n        <UtilityFragment key={option.id} vGap={6}>\\n          <Toggle\\n            tag=\\\"button\\\"\\n            aria-pressed={togglePressedState[optionIndex]}\\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\\n          >\\n            {option.icon}\\n            {option.label}\\n          </Toggle>\\n        </UtilityFragment>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Single-select toggles with leading icon\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select toggle buttons\",\"url\":\"components/toggle-button/trailing-icon-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationTiny, VisaViewGridTiny, VisaViewListTiny } from '@visa/nova-icons-react';\\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'trailing-icon-toggles';\\n\\nconst options = [\\n  { label: 'Label 1', id: `${id}-label-1`, icon: <VisaMapLocationTiny />, defaultSelected: true },\\n  { label: 'Label 2', id: `${id}-label-2`, icon: <VisaViewListTiny /> },\\n  { label: 'Label 3', id: `${id}-label-3`, icon: <VisaViewGridTiny /> },\\n];\\n\\nexport const TrailingIconToggles = () => {\\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\\n\\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\\n    setTogglePressedState(options.map((_, buttonIndex) => pressedIndex === buttonIndex));\\n  };\\n\\n  return (\\n    <ToggleContainer>\\n      {options.map((option, optionIndex) => (\\n        <UtilityFragment key={option.id} vGap={6}>\\n          <Toggle\\n            tag=\\\"button\\\"\\n            aria-pressed={togglePressedState[optionIndex]}\\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\\n          >\\n            {option.label}\\n            {option.icon}\\n          </Toggle>\\n        </UtilityFragment>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Single-select toggles with trailing icon\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select toggle buttons\",\"url\":\"components/toggle-button/icon-only-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationTiny, VisaViewGridTiny, VisaViewListTiny } from '@visa/nova-icons-react';\\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'icon-only-toggles';\\n\\nconst options = [\\n  { label: 'Label 1', id: `${id}-label-1`, icon: <VisaMapLocationTiny />, defaultSelected: true },\\n  { label: 'Label 2', id: `${id}-label-2`, icon: <VisaViewListTiny /> },\\n  { label: 'Label 3', id: `${id}-label-3`, icon: <VisaViewGridTiny /> },\\n];\\n\\nexport const IconOnlyToggles = () => {\\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\\n\\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\\n    setTogglePressedState(options.map((_, buttonIndex) => pressedIndex === buttonIndex));\\n  };\\n\\n  return (\\n    <ToggleContainer>\\n      {options.map((option, optionIndex) => (\\n        <UtilityFragment key={option.id} vGap={6}>\\n          <Toggle\\n            tag=\\\"button\\\"\\n            aria-label={option.label}\\n            aria-pressed={togglePressedState[optionIndex]}\\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\\n          >\\n            {option.icon}\\n          </Toggle>\\n        </UtilityFragment>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Single-select toggles with icon only\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select toggle buttons\",\"url\":\"components/toggle-button/disabled-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationTiny, VisaViewGridTiny, VisaViewListTiny } from '@visa/nova-icons-react';\\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-toggles';\\n\\nconst options = [\\n  { label: 'Label 1', id: `${id}-label-1`, icon: <VisaMapLocationTiny />, disabled: true },\\n  { label: 'Label 2', id: `${id}-label-2`, icon: <VisaViewListTiny />, disabled: true },\\n  { label: 'Label 3', id: `${id}-label-3`, icon: <VisaViewGridTiny />, disabled: true },\\n];\\n\\nexport const DisabledToggles = () => {\\n  return (\\n    <ToggleContainer>\\n      {options.map(option => (\\n        <UtilityFragment key={option.id} vGap={6}>\\n          <Toggle tag=\\\"button\\\" disabled={option.disabled}>\\n            {option.icon}\\n            {option.label}\\n          </Toggle>\\n        </UtilityFragment>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\\n\"},\"name\":\"Disabled toggles\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-select toggle buttons\",\"url\":\"components/toggle-button/disabled-and-active-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationTiny, VisaViewGridTiny, VisaViewListTiny } from '@visa/nova-icons-react';\\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'disabled-and-active-toggles';\\n\\nconst options = [\\n  { label: 'Label 1', id: `${id}-label-1`, icon: <VisaMapLocationTiny />, disabled: false, defaultSelected: true },\\n  { label: 'Label 2', id: `${id}-label-2`, icon: <VisaViewListTiny />, disabled: false },\\n  { label: 'Label 3', id: `${id}-label-3`, icon: <VisaViewGridTiny />, disabled: true },\\n];\\n\\nexport const DisabledAndActiveToggles = () => {\\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\\n\\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\\n    setTogglePressedState(options.map((_, buttonIndex) => pressedIndex === buttonIndex));\\n  };\\n\\n  return (\\n    <ToggleContainer>\\n      {options.map((option, optionIndex) => (\\n        <UtilityFragment key={option.id} vGap={6}>\\n          <Toggle\\n            tag=\\\"button\\\"\\n            aria-pressed={togglePressedState[optionIndex]}\\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\\n            disabled={option.disabled}\\n          >\\n            {option.icon}\\n            {option.label}\\n          </Toggle>\\n        </UtilityFragment>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Disabled and active toggles\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select toggle buttons\",\"url\":\"components/toggle-button/multi-select-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationLow, VisaViewGridLow, VisaViewListLow } from '@visa/nova-icons-react';\\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'multi-select-toggles';\\n\\nconst options = [\\n  { id: `${id}-label-1`, label: 'Label 1', icon: <VisaMapLocationLow />, defaultSelected: true },\\n  { id: `${id}-label-2`, label: 'Label 2', icon: <VisaViewListLow /> },\\n  { id: `${id}-label-3`, label: 'Label 3', icon: <VisaViewGridLow />, defaultSelected: true },\\n];\\n\\nexport const MultiSelectToggles = () => {\\n  const [togglePressedState, setTogglePressedState] = useState(options.map(o => !!o.defaultSelected));\\n\\n  const handleSingleSelectTogglePress = (pressedIndex: number) => {\\n    setTogglePressedState(prevState => {\\n      return prevState.map((buttonSelected, buttonIndex) =>\\n        pressedIndex === buttonIndex ? !buttonSelected : buttonSelected\\n      );\\n    });\\n  };\\n\\n  return (\\n    <ToggleContainer>\\n      {options.map((option, optionIndex) => (\\n        <UtilityFragment key={option.id} vGap={6}>\\n          <Toggle\\n            tag=\\\"button\\\"\\n            aria-label={option.label}\\n            aria-pressed={togglePressedState[optionIndex]}\\n            onClick={() => handleSingleSelectTogglePress(optionIndex)}\\n          >\\n            {option.icon}\\n          </Toggle>\\n        </UtilityFragment>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Multi-select toggles\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-select toggle buttons\",\"url\":\"components/toggle-button/standalone-multi-select-toggle\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationLow } from '@visa/nova-icons-react';\\nimport { Toggle, ToggleContainer, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'standalone-multi-select-toggle';\\n\\nexport const StandaloneMultiSelectToggle = () => {\\n  const [togglePressedState, setTogglePressedState] = useState<boolean>(false);\\n\\n  const handleTogglePress = () => {\\n    setTogglePressedState(prevState => !prevState);\\n  };\\n\\n  return (\\n    <ToggleContainer>\\n      <UtilityFragment vGap={6}>\\n        <Toggle id={id} tag=\\\"button\\\" aria-label=\\\"Label 1\\\" aria-pressed={togglePressedState} onClick={handleTogglePress}>\\n          <VisaMapLocationLow />\\n        </Toggle>\\n      </UtilityFragment>\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Standalone multi-select toggle\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom toggle buttons\",\"url\":\"components/toggle-button/single-select-radio-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Radio, Toggle, ToggleContainer } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'single-select-radio-toggles';\\n\\nconst options = [\\n  { id: `${id}-label-1`, label: 'Label 1', defaultSelected: true },\\n  { id: `${id}-label-2`, label: 'Label 2' },\\n  { id: `${id}-label-3`, label: 'Label 3' },\\n];\\n\\nexport const SingleSelectRadioToggles = () => {\\n  return (\\n    <ToggleContainer>\\n      {options.map((option, index) => (\\n        <Toggle className=\\\"v-gap-6\\\" htmlFor={option.id} key={`${id}-option-${index}`}>\\n          <Radio defaultChecked={option.defaultSelected} id={option.id} name={`${id}-options`} />\\n          {option.label}\\n        </Toggle>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Single-select toggles using radio buttons\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom toggle buttons\",\"url\":\"components/toggle-button/multi-select-checkbox-toggles\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMapLocationLow, VisaViewGridLow, VisaViewListLow } from '@visa/nova-icons-react';\\nimport { Checkbox, Toggle, ToggleContainer } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'multi-select-checkbox-toggle';\\n\\nconst options = [\\n  { id: `${id}-label-1`, label: 'Label 1', icon: <VisaMapLocationLow />, checked: true },\\n  { id: `${id}-label-2`, label: 'Label 2', icon: <VisaViewListLow />, checked: false },\\n  { id: `${id}-label-3`, label: 'Label 3', icon: <VisaViewGridLow />, checked: true },\\n];\\n\\nexport const MultiSelectCheckboxToggles = () => {\\n  return (\\n    <ToggleContainer>\\n      {options.map(({ label, icon, checked }, index) => (\\n        <Toggle className=\\\"v-gap-6\\\" aria-label={label} htmlFor={`${id}-option-${index}`} key={`${id}-option-${index}`}>\\n          <Checkbox defaultChecked={checked} id={`${id}-option-${index}`} name={`${id}-options`} /> {icon}\\n        </Toggle>\\n      ))}\\n    </ToggleContainer>\\n  );\\n};\\n\"},\"name\":\"Multi-select toggles using checkboxes\"}],\"propertySections\":[{\"order\":1,\"name\":\"Toggle\",\"selector\":\"<Toggle />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Selection element that allows users to switch between states or views.\"},{\"order\":2,\"name\":\"ToggleContainer\",\"selector\":\"<ToggleContainer />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Element to contain a group of toggle components.\"}],\"properties\":[{\"name\":\"iconOnly\",\"section\":\"Toggle\",\"data\":{\"name\":\"iconOnly\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icons only toggle button\"}},{\"name\":\"ref\",\"section\":\"Toggle\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Toggle\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"label\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"ref\",\"section\":\"ToggleContainer\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ToggleContainer\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"fieldset\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"tooltip\",\"version\":\"0.0.1\",\"description\":\"Short message communicating the function or context of a control or object.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default tooltips\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default tooltips\",\"url\":\"components/tooltip/top-tooltip\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  offset,\\n  safePolygon,\\n  useDismiss,\\n  useFloating,\\n  useFocus,\\n  useHover,\\n  useInteractions,\\n  useRole,\\n} from '@floating-ui/react';\\nimport { Button, Tooltip, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const TopTooltip = () => {\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  const { x, y, strategy, refs, context } = useFloating({\\n    middleware: [offset(2)],\\n    open: isOpen,\\n    onOpenChange: setIsOpen,\\n    placement: 'top',\\n  });\\n\\n  const dismiss = useDismiss(context);\\n  const focus = useFocus(context);\\n  const hover = useHover(context, { handleClose: safePolygon(), move: false });\\n  const role = useRole(context, { role: 'tooltip' });\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, focus, hover, role]);\\n\\n  return (\\n    <Utility vFlex vJustifyContent=\\\"center\\\" vMargin={24}>\\n      <Button ref={refs.setReference} {...getReferenceProps()}>\\n        Primary action\\n      </Button>\\n      {isOpen && (\\n        <Tooltip\\n          ref={refs.setFloating}\\n          style={{\\n            left: x,\\n            position: strategy,\\n            top: y,\\n            width: 'fit-content',\\n          }}\\n          {...getFloatingProps()}\\n        >\\n          This is a tooltip\\n        </Tooltip>\\n      )}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Top-positioned tooltip\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default tooltips\",\"url\":\"components/tooltip/bottom-tooltip\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  offset,\\n  safePolygon,\\n  useDismiss,\\n  useFloating,\\n  useFocus,\\n  useHover,\\n  useInteractions,\\n  useRole,\\n} from '@floating-ui/react';\\nimport { Button, Tooltip, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const BottomTooltip = () => {\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  const { x, y, strategy, refs, context } = useFloating({\\n    middleware: [offset(2)],\\n    open: isOpen,\\n    onOpenChange: setIsOpen,\\n    placement: 'bottom',\\n  });\\n\\n  const dismiss = useDismiss(context);\\n  const focus = useFocus(context);\\n  const hover = useHover(context, { handleClose: safePolygon(), move: false });\\n  const role = useRole(context, { role: 'tooltip' });\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, focus, hover, role]);\\n\\n  return (\\n    <Utility vFlex vJustifyContent=\\\"center\\\" vMargin={24}>\\n      <Button ref={refs.setReference} {...getReferenceProps()}>\\n        Primary action\\n      </Button>\\n      {isOpen && (\\n        <Tooltip\\n          ref={refs.setFloating}\\n          style={{\\n            left: x,\\n            position: strategy,\\n            top: y,\\n            width: 'fit-content',\\n          }}\\n          {...getFloatingProps()}\\n        >\\n          This is a tooltip\\n        </Tooltip>\\n      )}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Bottom-positioned tooltip\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default tooltips\",\"url\":\"components/tooltip/left-tooltip\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  offset,\\n  safePolygon,\\n  useDismiss,\\n  useFloating,\\n  useFocus,\\n  useHover,\\n  useInteractions,\\n  useRole,\\n} from '@floating-ui/react';\\nimport { Button, Tooltip, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const LeftTooltip = () => {\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  const { x, y, strategy, refs, context } = useFloating({\\n    middleware: [offset(2)],\\n    open: isOpen,\\n    onOpenChange: setIsOpen,\\n    placement: 'left',\\n  });\\n\\n  const dismiss = useDismiss(context);\\n  const focus = useFocus(context);\\n  const hover = useHover(context, { handleClose: safePolygon(), move: false });\\n  const role = useRole(context, { role: 'tooltip' });\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, focus, hover, role]);\\n\\n  return (\\n    <Utility vFlex vJustifyContent=\\\"center\\\" vMargin={24}>\\n      <Button ref={refs.setReference} {...getReferenceProps()}>\\n        Primary action\\n      </Button>\\n      {isOpen && (\\n        <Tooltip\\n          ref={refs.setFloating}\\n          style={{\\n            left: x,\\n            position: strategy,\\n            top: y,\\n            width: 'fit-content',\\n          }}\\n          {...getFloatingProps()}\\n        >\\n          This is a tooltip\\n        </Tooltip>\\n      )}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Left-positioned tooltip\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default tooltips\",\"url\":\"components/tooltip/right-tooltip\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  offset,\\n  safePolygon,\\n  useDismiss,\\n  useFloating,\\n  useFocus,\\n  useHover,\\n  useInteractions,\\n  useRole,\\n} from '@floating-ui/react';\\nimport { Button, Tooltip, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const RightTooltip = () => {\\n  const [isOpen, setIsOpen] = useState(false);\\n\\n  const { x, y, strategy, refs, context } = useFloating({\\n    middleware: [offset(2)],\\n    open: isOpen,\\n    onOpenChange: setIsOpen,\\n    placement: 'right',\\n  });\\n\\n  const dismiss = useDismiss(context);\\n  const focus = useFocus(context);\\n  const hover = useHover(context, { handleClose: safePolygon(), move: false });\\n  const role = useRole(context, { role: 'tooltip' });\\n\\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, focus, hover, role]);\\n\\n  return (\\n    <Utility vFlex vJustifyContent=\\\"center\\\" vMargin={24}>\\n      <Button ref={refs.setReference} {...getReferenceProps()}>\\n        Primary action\\n      </Button>\\n      {isOpen && (\\n        <Tooltip\\n          ref={refs.setFloating}\\n          style={{\\n            left: x,\\n            position: strategy,\\n            top: y,\\n            width: 'fit-content',\\n          }}\\n          {...getFloatingProps()}\\n        >\\n          This is a tooltip\\n        </Tooltip>\\n      )}\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Right-positioned tooltip\"}],\"propertySections\":[{\"order\":1,\"name\":\"Tooltip\",\"selector\":\"<Tooltip />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Short message communicating the function or context of a control or object.\"}],\"properties\":[{\"name\":\"ref\",\"section\":\"Tooltip\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Tooltip\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"span\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"typography\",\"version\":\"0.0.1\",\"description\":\"Styles text in a consistent manner.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Headline\",\"description\":\"\",\"order\":1},{\"name\":\"Body\",\"description\":\"\",\"order\":2},{\"name\":\"Detail\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/display-one-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const DisplayOneTypography = () => {\\n  return <Typography variant=\\\"display-1\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Display 1\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/display-two-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const DisplayTwoTypography = () => {\\n  return <Typography variant=\\\"display-2\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Display 2\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/headline-one-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const HeadlineOneTypography = () => {\\n  return <Typography variant=\\\"headline-1\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Headline 1\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/headline-two-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const HeadlineTwoTypography = () => {\\n  return <Typography variant=\\\"headline-2\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Headline 2\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/headline-three-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const HeadlineThreeTypography = () => {\\n  return <Typography variant=\\\"headline-3\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Headline 3\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/headline-four-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const HeadlineFourTypography = () => {\\n  return <Typography variant=\\\"headline-4\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Headline 4\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/subtitle-one-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const SubtitleOneTypography = () => {\\n  return <Typography variant=\\\"subtitle-1\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Subtitle 1\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/subtitle-two-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const SubtitleTwoTypography = () => {\\n  return <Typography variant=\\\"subtitle-2\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Subtitle 2\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/subtitle-three-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const SubtitleThreeTypography = () => {\\n  return <Typography variant=\\\"subtitle-3\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Subtitle 3\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Headline\",\"url\":\"components/typography/overline-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const OverlineTypography = () => {\\n  return <Typography variant=\\\"overline\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Overline\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Body\",\"url\":\"components/typography/body-one-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const BodyOneTypography = () => {\\n  return <Typography variant=\\\"body-1\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Body 1\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Body\",\"url\":\"components/typography/body-two-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const BodyTwoTypography = () => {\\n  return <Typography variant=\\\"body-2\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Body 2\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Body\",\"url\":\"components/typography/body-two-bold-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const BodyTwoBoldTypography = () => {\\n  return <Typography variant=\\\"body-2-bold\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Body 2 bold\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Body\",\"url\":\"components/typography/body-two-medium-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const BodyTwoMediumTypography = () => {\\n  return <Typography variant=\\\"body-2-medium\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Body 2 medium\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Body\",\"url\":\"components/typography/body-three-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const BodyThreeTypography = () => {\\n  return <Typography variant=\\\"body-3\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Body 3\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/button-medium-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const ButtonMediumTypography = () => {\\n  return <Typography variant=\\\"button-medium\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Button medium\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/button-large-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const ButtonLargeTypography = () => {\\n  return <Typography variant=\\\"button-large\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Button large\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/button-small-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const ButtonSmallTypography = () => {\\n  return <Typography variant=\\\"button-small\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Button small\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/label-large-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const LabelLargeTypography = () => {\\n  return <Typography variant=\\\"label-large\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\\nLabelLargeTypography.displayName = 'LabelLargeTypography';\\n\"},\"name\":\"Label large\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/label-large-active-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const LabelLargeActiveTypography = () => {\\n  return <Typography variant=\\\"label-large-active\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Label large active\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/label-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const LabelTypography = () => {\\n  return <Typography variant=\\\"label\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Label\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/label-active-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const LabelActiveTypography = () => {\\n  return <Typography variant=\\\"label-active\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Label active\"},{\"description\":\"\",\"order\":23,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/label-small-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const LabelSmallTypography = () => {\\n  return <Typography variant=\\\"label-small\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Label small\"},{\"description\":\"\",\"order\":24,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/color-default-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const ColorDefaultTypography = () => {\\n  return <Typography colorScheme=\\\"default\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Typography color default\"},{\"description\":\"\",\"order\":25,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/color-subtle-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const ColorSubtleTypography = () => {\\n  return <Typography colorScheme=\\\"subtle\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Typography color subtle\"},{\"description\":\"\",\"order\":26,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/color-active-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const ColorActiveTypography = () => {\\n  return <Typography colorScheme=\\\"active\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Typography color active\"},{\"description\":\"\",\"order\":27,\"libraryId\":null,\"componentId\":null,\"section\":\"Detail\",\"url\":\"components/typography/color-on-active-typography\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Typography } from '@visa/nova-react';\\n\\nexport const ColorOnActiveTypography = () => {\\n  return <Typography colorScheme=\\\"on-active\\\">The quick brown fox jumps over the lazy dog.</Typography>;\\n};\\n\"},\"name\":\"Typography color on active\"}],\"propertySections\":[{\"order\":1,\"name\":\"Typography\",\"selector\":\"<Typography />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Styles text in a consistent manner.\"}],\"properties\":[{\"name\":\"colorScheme\",\"section\":\"Typography\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"default\\\" , \\\"subtle\\\" , \\\"active\\\" , \\\"on-active\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color variant\"}},{\"name\":\"ref\",\"section\":\"Typography\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Typography\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"p\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"vertical-navigation\",\"version\":\"0.0.1\",\"description\":\"Menu or panel next to the page content that links to important pages or features.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Default vertical navigations\",\"description\":\"\",\"order\":1},{\"name\":\"Custom vertical navigation\",\"description\":\"\",\"order\":2}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/default-vertical-navigation\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'default-vertical-navigation';\\nconst navRegionAriaLabel = 'Default vertical navigation';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const DefaultVerticalNavigation = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    {tabsContent.map(tabContent => (\\n                      <Tab key={tabContent.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href=\\\"./vertical-navigation\\\">{tabContent.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Default vertical navigation\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/vertical-navigation-with-active-element\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'vertical-navigation-with-active-element';\\nconst navRegionAriaLabel = 'Vertical navigation with active element';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    active: true,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const VerticalNavigationWithActiveElement = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    {tabsContent.map(tabContent => (\\n                      <Tab key={tabContent.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          aria-current={tabContent.active ? 'page' : false}\\n                          element={<a href={tabContent.href}>{tabContent.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Vertical navigation with active element\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/vertical-navigation-with-icons\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n  VisaStatisticsTiny,\\n  VisaSettingsTiny,\\n  VisaSecurityTiny,\\n  VisaNotesTiny,\\n  VisaSupportTicketTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'vertical-navigation-with-icons';\\nconst navRegionAriaLabel = 'Vertical navigation with icons';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0}`,\\n    icon: <VisaStatisticsTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1}`,\\n    icon: <VisaSettingsTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2}`,\\n    icon: <VisaSecurityTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3}`,\\n    icon: <VisaNotesTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4}`,\\n    icon: <VisaSupportTicketTiny />,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const VerticalNavigationWithIcons = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    {tabsContent.map(tabContent => (\\n                      <Tab key={tabContent.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={\\n                            <a href={tabContent.href}>\\n                              {tabContent.icon}\\n                              {tabContent.tabLabel}\\n                            </a>\\n                          }\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Vertical navigation with icons\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/vertical-navigation-with-nested-elements\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'vertical-navigation-with-nested-elements';\\nconst navRegionAriaLabel = 'Vertical navigation with nested elements';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const VerticalNavigationWithNestedElements = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const [l1Label2Expanded, setL1Label2Expanded] = useState(false);\\n  const [l1Label4Expanded, setL1Label4Expanded] = useState(false);\\n  const [l2Label1Expanded, setL2Label1Expanded] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    <Tab>\\n                      <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./vertical-navigation\\\">L1 label 1</a>} />\\n                    </Tab>\\n                    <Tab>\\n                      <Button\\n                        aria-expanded={l1Label2Expanded}\\n                        aria-controls={`${id}-l1-label2-sub-menu`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        onClick={() => setL1Label2Expanded(!l1Label2Expanded)}\\n                      >\\n                        L1 label 2\\n                        <TabSuffix element={l1Label2Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                      </Button>\\n                      <UtilityFragment vHide={!l1Label2Expanded}>\\n                        <Tabs orientation=\\\"vertical\\\" id={`${id}-l1-label2-sub-menu`} aria-hidden={!l1Label2Expanded}>\\n                          <Tab>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./vertical-navigation\\\">L2 label 1</a>} />\\n                          </Tab>\\n                          <Tab>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./vertical-navigation\\\">L2 label 2</a>} />\\n                          </Tab>\\n                        </Tabs>\\n                      </UtilityFragment>\\n                    </Tab>\\n                    <Tab>\\n                      <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./vertical-navigation\\\">L1 label 3</a>} />\\n                    </Tab>\\n                    <Tab>\\n                      <Button\\n                        aria-expanded={l1Label4Expanded}\\n                        aria-controls={`${id}-l1-label4-sub-menu`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        onClick={() => setL1Label4Expanded(!l1Label4Expanded)}\\n                      >\\n                        L1 label 4\\n                        <TabSuffix element={l1Label4Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                      </Button>\\n                      <UtilityFragment vHide={!l1Label4Expanded}>\\n                        <Tabs orientation=\\\"vertical\\\" id={`${id}-l1-label4-sub-menu`} aria-hidden={!l1Label4Expanded}>\\n                          <Tab>\\n                            <Button\\n                              aria-expanded={l2Label1Expanded}\\n                              aria-controls={`${id}-l2-label1-sub-menu`}\\n                              colorScheme=\\\"tertiary\\\"\\n                              onClick={() => setL2Label1Expanded(!l2Label1Expanded)}\\n                            >\\n                              L2 label 1\\n                              <TabSuffix element={l2Label1Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                            </Button>\\n\\n                            <UtilityFragment vHide={!l2Label1Expanded}>\\n                              <Tabs\\n                                orientation=\\\"vertical\\\"\\n                                id={`${id}-l2-label1-sub-menu`}\\n                                aria-hidden={!l2Label1Expanded}\\n                              >\\n                                <Tab>\\n                                  <Button\\n                                    colorScheme=\\\"tertiary\\\"\\n                                    element={<a href=\\\"./vertical-navigation\\\">L3 label 1</a>}\\n                                  />\\n                                </Tab>\\n                                <Tab>\\n                                  <Button\\n                                    colorScheme=\\\"tertiary\\\"\\n                                    element={<a href=\\\"./vertical-navigation\\\">L3 label 2</a>}\\n                                  />\\n                                </Tab>\\n                                <Tab>\\n                                  <Button\\n                                    colorScheme=\\\"tertiary\\\"\\n                                    element={<a href=\\\"./vertical-navigation\\\">L3 label 3</a>}\\n                                  />\\n                                </Tab>\\n                              </Tabs>\\n                            </UtilityFragment>\\n                          </Tab>\\n                        </Tabs>\\n                      </UtilityFragment>\\n                    </Tab>\\n                    <Tab>\\n                      <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./vertical-navigation\\\">L1 label 5</a>} />\\n                    </Tab>\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Vertical navigation with nested elements\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/vertical-navigation-with-section-titles\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'vertical-navigation-with-section-titles';\\nconst navRegionAriaLabel = 'Vertical navigation with section titles';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const VerticalNavigationWithSectionTitles = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    <Tab>\\n                      <UtilityFragment>\\n                        <Tab sectionTitle tag=\\\"h2\\\">\\n                          Section Title 1\\n                        </Tab>\\n                      </UtilityFragment>\\n                      <Tabs orientation=\\\"vertical\\\">\\n                        <Tab>\\n                          <UtilityFragment>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 1</a>} />\\n                          </UtilityFragment>\\n                        </Tab>\\n                        <Tab>\\n                          <UtilityFragment>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 2</a>} />\\n                          </UtilityFragment>\\n                        </Tab>\\n                        <Tab>\\n                          <UtilityFragment>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 3</a>} />\\n                          </UtilityFragment>\\n                        </Tab>\\n                      </Tabs>\\n                    </Tab>\\n                    <Tab>\\n                      <UtilityFragment>\\n                        <Tab sectionTitle tag=\\\"h2\\\">\\n                          Section Title 2\\n                        </Tab>\\n                      </UtilityFragment>\\n                      <Tabs orientation=\\\"vertical\\\">\\n                        <Tab>\\n                          <UtilityFragment>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 4</a>} />\\n                          </UtilityFragment>\\n                        </Tab>\\n                        <Tab>\\n                          <UtilityFragment>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 5</a>} />\\n                          </UtilityFragment>\\n                        </Tab>\\n                        <Tab>\\n                          <UtilityFragment>\\n                            <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 6</a>} />\\n                          </UtilityFragment>\\n                        </Tab>\\n                      </Tabs>\\n                    </Tab>\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Vertical navigation with section titles\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/vertical-navigation-with-nested-elements-and-section-titles\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'vertical-navigation-with-nested-elements-and-section-titles';\\nconst navRegionAriaLabel = 'Vertical navigation with nested elements and section titles';\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const VerticalNavigationWithNestedElementsAndSectionTitles = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n  const [l1Label2Expanded, setL1Label2Expanded] = useState(false);\\n  const [l2Label2Expanded, setL2Label2Expanded] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    <Tab>\\n                      <Tab sectionTitle tag=\\\"h2\\\">\\n                        L1 Section Title 1\\n                      </Tab>\\n                      <Tabs orientation=\\\"vertical\\\">\\n                        <Tab>\\n                          <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 1</a>} />\\n                        </Tab>\\n                        <Tab>\\n                          <Button\\n                            aria-expanded={l1Label2Expanded}\\n                            aria-controls={`${id}-l1-label2-sub-menu`}\\n                            colorScheme=\\\"tertiary\\\"\\n                            onClick={() => setL1Label2Expanded(!l1Label2Expanded)}\\n                          >\\n                            L1 label 2\\n                            <TabSuffix element={l1Label2Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                          </Button>\\n                          <UtilityFragment vHide={!l1Label2Expanded}>\\n                            <Tabs\\n                              orientation=\\\"vertical\\\"\\n                              id={`${id}-l1-label2-sub-menu`}\\n                              tag=\\\"div\\\"\\n                            >\\n                              <Tab sectionTitle tag=\\\"h3\\\">\\n                                L2 Section Title 1\\n                              </Tab>\\n                              <Tabs orientation=\\\"vertical\\\">\\n                                <Tab>\\n                                  <Button\\n                                    colorScheme=\\\"tertiary\\\"\\n                                    element={<a href=\\\"./navigation-drawer\\\">L2 label 1</a>}\\n                                  />\\n                                </Tab>\\n                                <Tab>\\n                                  <Button\\n                                    aria-expanded={l2Label2Expanded}\\n                                    aria-controls={`${id}-l2-label2-sub-menu`}\\n                                    colorScheme=\\\"tertiary\\\"\\n                                    onClick={() => setL2Label2Expanded(!l2Label2Expanded)}\\n                                  >\\n                                    L2 label 2\\n                                    <TabSuffix\\n                                      element={l2Label2Expanded ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />}\\n                                    />\\n                                  </Button>\\n\\n                                  <UtilityFragment vHide={!l2Label2Expanded}>\\n                                    <Tabs orientation=\\\"vertical\\\" id={`${id}-l2-label2-sub-menu`} tag=\\\"div\\\">\\n                                      <Tab sectionTitle tag=\\\"h4\\\">\\n                                        L3 Section Title 1\\n                                      </Tab>\\n                                      <Tabs orientation=\\\"vertical\\\">\\n                                        <Tab>\\n                                          <Button\\n                                            colorScheme=\\\"tertiary\\\"\\n                                            element={<a href=\\\"./navigation-drawer\\\">L3 label 1</a>}\\n                                          />\\n                                        </Tab>\\n                                        <Tab>\\n                                          <Button\\n                                            colorScheme=\\\"tertiary\\\"\\n                                            element={<a href=\\\"./navigation-drawer\\\">L3 label 2</a>}\\n                                          />\\n                                        </Tab>\\n                                      </Tabs>\\n                                    </Tabs>\\n                                  </UtilityFragment>\\n                                </Tab>\\n                              </Tabs>\\n                            </Tabs>\\n                          </UtilityFragment>\\n                        </Tab>\\n                      </Tabs>\\n                    </Tab>\\n                    <Tab>\\n                      <Tab sectionTitle tag=\\\"h2\\\">\\n                        L1 Section Title 2\\n                      </Tab>\\n                      <Tabs orientation=\\\"vertical\\\">\\n                        <Tab>\\n                          <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 3</a>} />\\n                        </Tab>\\n                        <Tab>\\n                          <Button colorScheme=\\\"tertiary\\\" element={<a href=\\\"./navigation-drawer\\\">L1 label 4</a>} />\\n                        </Tab>\\n                      </Tabs>\\n                    </Tab>\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Vertical navigation with nested elements and section titles\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/alternate-vertical-navigation\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-vertical-navigation';\\nconst navRegionAriaLabel = 'Alternate vertical navigation';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const AlternateVerticalNavigation = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} alternate orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link alternate skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    {tabsContent.map(tabContent => (\\n                      <Tab key={tabContent.id}>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href={tabContent.href}>{tabContent.tabLabel}</a>} />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                iconTwoColor\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Alternate vertical navigation\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/alternate-vertical-navigation-with-active-element\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-vertical-navigation-with-active-element';\\nconst navRegionAriaLabel = 'Alternate vertical navigation with active element';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    active: true,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const AlternateVerticalNavigationWithActiveElement = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} alternate orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link alternate skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    {tabsContent.map(tabContent => (\\n                      <Tab key={tabContent.id}>\\n                        <Button\\n                          aria-current={tabContent.active ? 'page' : false}\\n                          colorScheme=\\\"tertiary\\\"\\n                          element={<a href={tabContent.href}>{tabContent.tabLabel}</a>}\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                iconTwoColor\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Alternate vertical navigation with active element\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Default vertical navigations\",\"url\":\"components/vertical-navigation/alternate-vertical-navigation-with-icons\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaAccountTiny,\\n  VisaChevronDownTiny,\\n  VisaChevronUpTiny,\\n  VisaMediaFastForwardTiny,\\n  VisaMediaRewindTiny,\\n  VisaStatisticsTiny,\\n  VisaSettingsTiny,\\n  VisaSecurityTiny,\\n  VisaNotesTiny,\\n  VisaSupportTicketTiny,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Button,\\n  Divider,\\n  Link,\\n  Nav,\\n  NavAppName,\\n  Tab,\\n  TabSuffix,\\n  Tabs,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  VisaLogo,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'alternate-vertical-navigation-with-icons';\\nconst navRegionAriaLabel = 'Alternate vertical navigation with icons';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0}`,\\n    icon: <VisaStatisticsTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1}`,\\n    icon: <VisaSettingsTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2}`,\\n    icon: <VisaSecurityTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3}`,\\n    icon: <VisaNotesTiny />,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4}`,\\n    icon: <VisaSupportTicketTiny />,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\nconst accountSubItems = [\\n  {\\n    tabLabel: 'L2 label 1',\\n    id: `${id}-account-sub-item-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L2 label 2',\\n    id: `${id}-account-sub-item-1`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const AlternateVerticalNavigationWithIcons = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n  const [accountTabOpen, setAccountTabOpen] = useState(false);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} alternate orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link alternate skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <UtilityFragment\\n                vFlex\\n                vFlexCol\\n                vGap={12}\\n                vMarginTop={16}\\n                vMarginRight={16}\\n                vMarginBottom={30}\\n                vMarginLeft={20}\\n              >\\n                <Link\\n                  aria-label=\\\"Visa Application Name Home\\\"\\n                  href=\\\"https://www.visa.com\\\"\\n                  id={`${id}-home-link`}\\n                  noUnderline\\n                  style={{ backgroundColor: 'transparent' }}\\n                >\\n                  <VisaLogo />\\n                  <NavAppName>\\n                    <Typography variant=\\\"subtitle-1\\\">Application Name</Typography>\\n                  </NavAppName>\\n                </Link>\\n              </UtilityFragment>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    {tabsContent.map(tabContent => (\\n                      <Tab key={tabContent.id}>\\n                        <Button\\n                          colorScheme=\\\"tertiary\\\"\\n                          iconTwoColor\\n                          element={\\n                            <a href={tabContent.href}>\\n                              {tabContent.icon}\\n                              {tabContent.tabLabel}\\n                            </a>\\n                          }\\n                        />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            {navExpanded && (\\n              <>\\n                <Divider dividerType=\\\"decorative\\\" />\\n                <Tab tag=\\\"div\\\">\\n                  <Button\\n                    aria-expanded={accountTabOpen}\\n                    aria-controls={`${id}-account-sub-menu`}\\n                    aria-label=\\\"Alex Miller\\\"\\n                    buttonSize=\\\"large\\\"\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => setAccountTabOpen(!accountTabOpen)}\\n                  >\\n                    <VisaAccountTiny />\\n                    Alex Miller\\n                    <TabSuffix element={accountTabOpen ? <VisaChevronUpTiny /> : <VisaChevronDownTiny />} />\\n                  </Button>\\n                  <UtilityFragment vHide={!accountTabOpen}>\\n                    <Tabs orientation=\\\"vertical\\\" id={`${id}-account-sub-menu`} aria-hidden={!accountTabOpen}>\\n                      {accountSubItems.map(accountSubItem => (\\n                        <Tab key={accountSubItem.id} id={accountSubItem.id}>\\n                          <Button\\n                            colorScheme=\\\"tertiary\\\"\\n                            element={<a href={accountSubItem.href}>{accountSubItem.tabLabel}</a>}\\n                          />\\n                        </Tab>\\n                      ))}\\n                    </Tabs>\\n                  </UtilityFragment>\\n                </Tab>\\n              </>\\n            )}\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Alternate vertical navigation with icons\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom vertical navigation\",\"url\":\"components/vertical-navigation/vertical-navigation-without-logo-or-application-name\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaMediaFastForwardTiny, VisaMediaRewindTiny } from '@visa/nova-icons-react';\\nimport { Button, Link, Nav, Tab, Tabs, Typography, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { useState } from 'react';\\nimport Styles from './styles.module.scss';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'vertical-navigation-without-logo-or-application-name';\\nconst navRegionAriaLabel = 'Vertical navigation without logo or application name';\\n\\nconst tabsContent = [\\n  {\\n    tabLabel: 'L1 label 1',\\n    id: `${id}-tab-0`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 2',\\n    id: `${id}-tab-1`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 3',\\n    id: `${id}-tab-2`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 4',\\n    id: `${id}-tab-3`,\\n    href: './vertical-navigation',\\n  },\\n  {\\n    tabLabel: 'L1 label 5',\\n    id: `${id}-tab-4`,\\n    href: './vertical-navigation',\\n  },\\n];\\n\\n/*\\n * Styles for the application container and main content\\n * -----------------------------------------------------\\n * .appContainer {\\n *   &:global(:has(.v-nav .v-tabs)) {\\n *     // The open navigation should be 242px\\n *     grid-template-columns: 242px 1fr;\\n *   }\\n * }\\n *\\n * .layoutContainer {\\n *   min-block-size: 700px;\\n *   display: grid;\\n *   grid-template-columns: auto 1fr;\\n * }\\n *\\n * .mainContent {\\n *   background-color: whitesmoke;\\n *   min-block-size: 300px;\\n *   padding: 12px;\\n * }\\n */\\n\\nexport const VerticalNavigationWithoutLogoOrApplicationName = () => {\\n  const [navExpanded, setNavExpanded] = useState(true);\\n\\n  return (\\n    <div className={Styles.appContainer}>\\n      <div id=\\\"layout\\\" className={Styles.layoutContainer}>\\n        <Nav id={id} orientation=\\\"vertical\\\" tag=\\\"header\\\">\\n          {navExpanded && (\\n            <Link skipLink href=\\\"#content\\\">\\n              Skip to content\\n            </Link>\\n          )}\\n          {navExpanded && (\\n            <>\\n              <nav aria-label={navRegionAriaLabel}>\\n                <UtilityFragment vGap={8}>\\n                  <Tabs orientation=\\\"vertical\\\">\\n                    {tabsContent.map(tabContent => (\\n                      <Tab key={tabContent.id}>\\n                        <Button colorScheme=\\\"tertiary\\\" element={<a href={tabContent.href}>{tabContent.tabLabel}</a>} />\\n                      </Tab>\\n                    ))}\\n                  </Tabs>\\n                </UtilityFragment>\\n              </nav>\\n            </>\\n          )}\\n          <Utility vFlex vFlexCol vAlignSelf=\\\"stretch\\\" vGap={4} vMarginTop=\\\"auto\\\">\\n            <UtilityFragment vMarginLeft={navExpanded ? 'auto' : 5} vMarginRight={navExpanded ? 8 : 5}>\\n              <Button\\n                aria-label=\\\"Side bar\\\"\\n                aria-expanded={!!navExpanded}\\n                buttonSize=\\\"small\\\"\\n                colorScheme=\\\"tertiary\\\"\\n                iconButton\\n                onClick={() => setNavExpanded(!navExpanded)}\\n                subtle\\n              >\\n                {navExpanded ? <VisaMediaRewindTiny rtl /> : <VisaMediaFastForwardTiny rtl />}\\n              </Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Nav>\\n        <div className={Styles.mainContent}>\\n          <Typography>Main Content</Typography>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\"},\"name\":\"Vertical navigation without logo or application name\"}],\"propertySections\":[{\"order\":1,\"name\":\"Nav\",\"selector\":\"<Nav />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Menu or panel at the top or next to page content that links to important pages or features.\"},{\"order\":2,\"name\":\"tabs\",\"type\":\"related\",\"selector\":\"<Tabs />\",\"description\":\"\"}],\"properties\":[{\"name\":\"alternate\",\"section\":\"Nav\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate\"}},{\"name\":\"drawer\",\"section\":\"Nav\",\"data\":{\"name\":\"drawer\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Drawer\"}},{\"name\":\"ref\",\"section\":\"Nav\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Nav\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"nav\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"wizard\",\"version\":\"0.0.1\",\"description\":\"Manages and navigates multi-step processes within your application.\",\"libraryId\":null,\"category\":\"components\",\"exampleSections\":[{\"name\":\"Multi-page wizards\",\"description\":\"\",\"order\":1},{\"name\":\"Single-page wizard\",\"description\":\"\",\"order\":2},{\"name\":\"Custom wizard\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-page wizards\",\"url\":\"components/wizard/horizontal-wizard\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowBackTiny,\\n  VisaArrowForwardTiny,\\n  VisaCheckmarkTiny,\\n  VisaChevronRightTiny,\\n  VisaEditTiny,\\n  VisaErrorAltTiny,\\n  VisaErrorTiny,\\n  VisaSuccessHigh,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Badge,\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  DialogIcon,\\n  Flag,\\n  FlagCloseButton,\\n  FlagContent,\\n  FlagIcon,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Link,\\n  ScreenReader,\\n  Surface,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  Wizard,\\n  WizardStep,\\n  useFocusTrap,\\n  useWizard,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useState, useRef, ChangeEvent } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'horizontal-multi-page-wizard';\\nconst navRegionAriaLabel = 'Horizontal multi-page wizard';\\n\\nconst steps = [\\n  {\\n    label: '1',\\n    title: 'Step 1 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-1-input`,\\n    buttonId: `${id}-step-1-button`,\\n  },\\n  {\\n    label: '2',\\n    title: 'Step 2 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-2-input`,\\n    buttonId: `${id}-step-2-button`,\\n  },\\n  {\\n    label: '3',\\n    title: 'Step 3 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-3-input`,\\n    buttonId: `${id}-step-3-button`,\\n  },\\n  {\\n    label: '4',\\n    title: 'Step 4 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-4-input`,\\n    buttonId: `${id}-step-4-button`,\\n  },\\n  {\\n    label: '5',\\n    title: 'Step 5 label',\\n  },\\n];\\n\\nconst exitDialogId = `${id}-exit-warning-dialog`;\\n\\nconst DEFAULT_INPUT_VALUES = Array(steps.length).fill('');\\n\\nexport const HorizontalWizard = () => {\\n  const {\\n    currentStep,\\n    isStepAvailable,\\n    isLastStep,\\n    isStepComplete,\\n    isStepError,\\n    onStepError,\\n    onStepChange,\\n    onStepComplete,\\n    onStepPrevious,\\n    onWizardReset,\\n  } = useWizard({ length: steps.length });\\n\\n  // Track whether the wizard has been interacted with in order\\n  // to control focus within a useEffect\\n  const [hasWizardStepChanged, setHasWizardStepChanged] = useState(false);\\n\\n  const { onKeyNavigation, ref: exitDialogRef } = useFocusTrap();\\n\\n  const [inputValues, setInputValues] = useState(DEFAULT_INPUT_VALUES);\\n\\n  const [showSavedFlag, setShowSavedFlag] = useState(false);\\n  const [formSubmitted, setFormSubmitted] = useState(false);\\n\\n  // Create an array of refs to handle focusing input fields on error\\n  // https://react.dev/learn/manipulating-the-dom-with-refs#how-to-manage-a-list-of-refs-using-a-ref-callback\\n  const inputRefs = useRef(new Map());\\n  function getInputRefMap() {\\n    if (!inputRefs.current) {\\n      inputRefs.current = new Map();\\n    }\\n    return inputRefs.current;\\n  }\\n\\n  const buttonRefs = useRef(new Map());\\n  function getButtonRefMap() {\\n    if (!buttonRefs.current) {\\n      buttonRefs.current = new Map();\\n    }\\n    return buttonRefs.current;\\n  }\\n\\n  useEffect(() => {\\n    if (!hasWizardStepChanged) {\\n      return;\\n    }\\n    // apply focus if the currentStep has changed\\n    // (and the wizard has been interacted with)\\n    const buttonRefsMap = getButtonRefMap();\\n    const currentStepButtonNode = buttonRefsMap.get(steps[currentStep].buttonId);\\n    currentStepButtonNode.focus();\\n  }, [hasWizardStepChanged, currentStep]);\\n\\n  const handleInputChange = (index: number, event: ChangeEvent<HTMLInputElement>) => {\\n    const value = event.target.value;\\n    const newInputValues = [...inputValues];\\n    newInputValues[index] = value;\\n    setInputValues(newInputValues);\\n  };\\n\\n  // On next button click, simulate completion on all steps\\n  const handleClickNext = () => {\\n    if (!inputValues[currentStep]) {\\n      onStepError(currentStep);\\n      // find the input element with the error in the refs map and set focus on it\\n      const inputRefsMap = getInputRefMap();\\n      const currentStepInputNode = inputRefsMap.get(steps[currentStep].inputId);\\n      currentStepInputNode.focus();\\n      return;\\n    }\\n\\n    setHasWizardStepChanged(true);\\n    setShowSavedFlag(false);\\n    onStepComplete(currentStep);\\n  };\\n\\n  // On previous button click, reset the current step status from the list of completed steps\\n  const handleClickPrevious = () => {\\n    setHasWizardStepChanged(true);\\n    setShowSavedFlag(false);\\n    onStepPrevious();\\n  };\\n\\n  const handleSave = () => {\\n    setShowSavedFlag(true);\\n  };\\n\\n  // On next button click, simulate completion on all steps\\n  const handleResetWizard = () => {\\n    setHasWizardStepChanged(true);\\n    setInputValues(DEFAULT_INPUT_VALUES);\\n    setFormSubmitted(false);\\n    onWizardReset();\\n  };\\n\\n  const handleSubmit = () => {\\n    const formValues: { [key: string]: string } = {};\\n    steps.forEach((step, i) => {\\n      if (!step.inputId) return;\\n      formValues[step.inputId] = inputValues[i];\\n    });\\n    setFormSubmitted(true);\\n  };\\n\\n  const handleExit = () => {\\n    exitDialogRef.current?.showModal();\\n  };\\n\\n  // On step button click, change the current step and reset the status of all steps after the clicked step\\n  const handleClickStep = (i: number) => {\\n    setHasWizardStepChanged(true);\\n    onStepChange(i);\\n  };\\n\\n  const renderSummaryStep = () => (\\n    <Utility vAlignSelf=\\\"center\\\" vFlex vFlexCol vGap={10} style={{ maxWidth: '610px', width: '100%' }}>\\n      <UtilityFragment\\n        vAlignSelf=\\\"center\\\"\\n        vFlex\\n        vJustifyContent=\\\"center\\\"\\n        vPaddingVertical={44}\\n        vPaddingHorizontal={32}\\n        vGap={32}\\n      >\\n        <Surface>\\n          <Utility style={{ maxWidth: '400px', width: '100%' }}>\\n            <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n              Summary\\n            </Typography>\\n            <ol>\\n              {steps.slice(0, steps.length - 1).map((step, i) => (\\n                <UtilityFragment\\n                  key={i}\\n                  vPaddingVertical={20}\\n                  style={{\\n                    borderBlockEnd: i < steps.length - 2 ? '1px solid rgba(0,0,0,0.10)' : 'none',\\n                  }}\\n                >\\n                  <li>\\n                    <Utility vFlex vJustifyContent=\\\"between\\\">\\n                      <Typography\\n                        tag=\\\"h3\\\"\\n                        variant=\\\"body-2-bold\\\"\\n                        colorScheme=\\\"subtle\\\"\\n                      >{`${i + 1}. ${step.title}`}</Typography>\\n                      <Button\\n                        aria-label={`Edit step ${i + 1}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        buttonSize=\\\"small\\\"\\n                        onClick={() => handleClickStep(i)}\\n                      >\\n                        <VisaEditTiny rtl />\\n                      </Button>\\n                    </Utility>\\n                    <Typography>{`${step.inputLabel}: ${inputValues[i]}`}</Typography>\\n                  </li>\\n                </UtilityFragment>\\n              ))}\\n            </ol>\\n          </Utility>\\n        </Surface>\\n      </UtilityFragment>\\n      <Typography>Changes have been automatically saved.</Typography>\\n      {renderActionButtons()}\\n    </Utility>\\n  );\\n\\n  const renderActionButtons = () => {\\n    return (\\n      <Utility vPaddingVertical={12}>\\n        <Utility vJustifyContent=\\\"between\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n          <Utility vJustifyContent=\\\"start\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n            <Button onClick={handleSave} colorScheme=\\\"secondary\\\">\\n              Save\\n            </Button>\\n            <Button onClick={handleExit} colorScheme=\\\"tertiary\\\">\\n              Exit\\n            </Button>\\n          </Utility>\\n          <Utility vJustifyContent=\\\"end\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n            <UtilityFragment vHide={currentStep === 0}>\\n              <Button onClick={handleClickPrevious} colorScheme=\\\"secondary\\\">\\n                <VisaArrowBackTiny />\\n                Back\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment vHide={currentStep === steps.length - 1}>\\n              <Button onClick={handleClickNext}>\\n                Next\\n                <VisaArrowForwardTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment vHide={currentStep !== steps.length - 1}>\\n              <Button onClick={handleSubmit}>Submit</Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Utility>\\n      </Utility>\\n    );\\n  };\\n\\n  if (formSubmitted) {\\n    return (\\n      <Utility vFlex vJustifyContent=\\\"center\\\" vGap={12}>\\n        <UtilityFragment\\n          vFlex\\n          vJustifyContent=\\\"center\\\"\\n          vPaddingVertical={44}\\n          vPaddingHorizontal={32}\\n          vGap={32}\\n          style={{ maxWidth: '676px' }}\\n        >\\n          <Surface>\\n            <Utility vFlex vFlexCol vGap={24} vAlignItems=\\\"center\\\" style={{ maxWidth: '394px', width: '394px' }}>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n                Success\\n              </Typography>\\n              <VisaSuccessHigh\\n                style={\\n                  {\\n                    '--v-icon-primary': 'var(--palette-messaging-graphics-positive)',\\n                    '--v-icon-secondary': 'var(--palette-messaging-graphics-positive)',\\n                  } as CSSProperties\\n                }\\n              />\\n              <Typography tag=\\\"p\\\" variant=\\\"body-2\\\">\\n                This is required text that describes the success message in more detail.\\n              </Typography>\\n              <Utility vAlignSelf=\\\"stretch\\\" vFlex vJustifyContent=\\\"center\\\" vGap={24}>\\n                <Link element={<button />} onClick={handleResetWizard}>\\n                  Reset wizard example\\n                </Link>\\n                <Link href=\\\"./wizard\\\">Destination label</Link>\\n              </Utility>\\n            </Utility>\\n          </Surface>\\n        </UtilityFragment>\\n      </Utility>\\n    );\\n  }\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={12}>\\n      {showSavedFlag && (\\n        <UtilityFragment vAlignSelf=\\\"end\\\">\\n          <Flag messageType=\\\"success\\\">\\n            <FlagIcon />\\n            <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n              <ScreenReader>success</ScreenReader>\\n              Your progress has been saved.\\n            </FlagContent>\\n            <FlagCloseButton onClick={() => setShowSavedFlag(false)} />\\n          </Flag>\\n        </UtilityFragment>\\n      )}\\n      <nav aria-label={navRegionAriaLabel}>\\n        <Wizard>\\n          {steps.map((step, i) => (\\n            <WizardStep key={`horizontal-wizard-step-${i + 1}`} aria-current={currentStep === i ? 'step' : undefined}>\\n              {isStepAvailable(i) ? (\\n                <>\\n                  <ScreenReader>\\n                    {`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                  </ScreenReader>\\n                  <Button\\n                    className={`${\\n                      currentStep === i ? 'v-typography-label-large-active' : 'v-typography-body-2'\\n                    } v-typography-color-default`}\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => handleClickStep(i)}\\n                    id={step.buttonId}\\n                    ref={node => {\\n                      const map = getButtonRefMap();\\n                      if (node) {\\n                        // store the node in the inputRefs Map\\n                        map.set(step.buttonId, node);\\n                      } else {\\n                        map.delete(step.buttonId);\\n                      }\\n                    }}\\n                  >\\n                    <Badge\\n                      aria-current={i === currentStep ? 'step' : undefined}\\n                      active={i === currentStep && !isStepError(i) && !isStepComplete(i)}\\n                      badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                      badgeVariant=\\\"icon\\\"\\n                      clear={i !== currentStep}\\n                      tag=\\\"span\\\"\\n                    >\\n                      {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : step.label}\\n                    </Badge>\\n                    <Typography>{step.title}</Typography>\\n                    {i < steps.length - 1 && <VisaChevronRightTiny className=\\\"v-typography-color-subtle\\\" />}\\n                  </Button>\\n                </>\\n              ) : (\\n                <>\\n                  <ScreenReader>\\n                    {`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                  </ScreenReader>\\n                  <Badge\\n                    active={i === currentStep && !isStepError(i) && !isStepComplete(i)}\\n                    clear={i !== currentStep}\\n                    badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                    badgeVariant=\\\"icon\\\"\\n                    tag=\\\"span\\\"\\n                  >\\n                    {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : step.label}\\n                  </Badge>\\n                  <Typography variant={i === currentStep ? 'label-large-active' : 'body-2'}>{step.title}</Typography>\\n                  {!isLastStep(i) && <VisaChevronRightTiny className=\\\"v-typography-color-subtle\\\" />}\\n                </>\\n              )}\\n            </WizardStep>\\n          ))}\\n        </Wizard>\\n      </nav>\\n      <Utility vFlex vFlexCol vGap={12}>\\n        {steps.slice(0, steps.length - 1).map((step, i) => {\\n          return (\\n            <Utility key={i} vFlex vFlexCol vGap={4} vHide={currentStep !== i}>\\n              <Label htmlFor={step.inputId}>{`${step.inputLabel} (required)`}</Label>\\n              <InputContainer>\\n                <Input\\n                  aria-describedby={`${step.inputId}-message`}\\n                  aria-required=\\\"true\\\"\\n                  aria-invalid={isStepError(i)}\\n                  id={step.inputId}\\n                  type=\\\"text\\\"\\n                  value={inputValues[i]}\\n                  onChange={e => handleInputChange(i, e as ChangeEvent<HTMLInputElement>)}\\n                  ref={node => {\\n                    const map = getInputRefMap();\\n                    if (node) {\\n                      // store the node in the inputRefs Map\\n                      map.set(step.inputId, node);\\n                    } else {\\n                      map.delete(step.inputId);\\n                    }\\n                  }}\\n                />\\n              </InputContainer>\\n              {isStepError(i) && (\\n                <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${step.inputId}-message`} role=\\\"alert\\\">\\n                  <VisaErrorTiny />\\n                  This is required text that describes the error in more detail.\\n                </InputMessage>\\n              )}\\n              {renderActionButtons()}\\n            </Utility>\\n          );\\n        })}\\n        {currentStep === steps.length - 1 && renderSummaryStep()}\\n      </Utility>\\n      <Dialog\\n        aria-describedby={`${exitDialogId}-description`}\\n        aria-labelledby={`${exitDialogId}-title`}\\n        ref={exitDialogRef}\\n        id={exitDialogId}\\n        messageType=\\\"warning\\\"\\n        onKeyDown={e => onKeyNavigation(e, exitDialogRef.current?.open)}\\n        style={{ maxWidth: '300px' }}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${exitDialogId}-title`}>\\n            <DialogIcon />\\n            Exit form?\\n          </DialogHeader>\\n          <Typography id={`${exitDialogId}-description`}>\\n            Your progress has been automatically saved. You can continue where you left off when you return.\\n          </Typography>\\n          <Utility vFlex vFlexWrap vGap={8} vPaddingTop={16}>\\n            <Button\\n              style={{ width: '100%' }}\\n              onClick={() => {\\n                window?.location?.reload();\\n              }}\\n            >\\n              Exit\\n            </Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => exitDialogRef.current?.close()} />\\n      </Dialog>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Horizontal multi-page wizard\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Multi-page wizards\",\"url\":\"components/wizard/vertical-wizard\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowBackTiny,\\n  VisaArrowForwardTiny,\\n  VisaCheckmarkTiny,\\n  VisaEditTiny,\\n  VisaErrorAltTiny,\\n  VisaErrorTiny,\\n  VisaSuccessHigh,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Badge,\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  DialogIcon,\\n  Flag,\\n  FlagCloseButton,\\n  FlagContent,\\n  FlagIcon,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Link,\\n  ScreenReader,\\n  Surface,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  Wizard,\\n  WizardStep,\\n  useFocusTrap,\\n  useWizard,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useState, useRef, ChangeEvent } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'vertical-multi-page-wizard';\\nconst navRegionAriaLabel = 'Vertical multi-page wizard';\\n\\nconst steps = [\\n  {\\n    label: '1',\\n    title: 'Step 1 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-1-input`,\\n    buttonId: `${id}-step-1-button`,\\n  },\\n  {\\n    label: '2',\\n    title: 'Step 2 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-2-input`,\\n    buttonId: `${id}-step-2-button`,\\n  },\\n  {\\n    label: '3',\\n    title: 'Step 3 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-3-input`,\\n    buttonId: `${id}-step-3-button`,\\n  },\\n  {\\n    label: '4',\\n    title: 'Step 4 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-4-input`,\\n    buttonId: `${id}-step-4-button`,\\n  },\\n  {\\n    label: '5',\\n    title: 'Step 5 label',\\n  },\\n];\\n\\nconst exitDialogId = `${id}-exit-warning-dialog`;\\n\\nconst DEFAULT_INPUT_VALUES = Array(steps.length).fill('');\\n\\nexport const VerticalWizard = () => {\\n  const {\\n    currentStep,\\n    isStepAvailable,\\n    isStepComplete,\\n    isStepError,\\n    onStepError,\\n    onStepChange,\\n    onStepComplete,\\n    onStepPrevious,\\n    onWizardReset,\\n  } = useWizard({ length: steps.length });\\n\\n  // Track whether the wizard has been interacted with in order\\n  // to control focus within a useEffect\\n  const [hasWizardStepChanged, setHasWizardStepChanged] = useState(false);\\n\\n  const { onKeyNavigation, ref: exitDialogRef } = useFocusTrap();\\n\\n  const [inputValues, setInputValues] = useState(DEFAULT_INPUT_VALUES);\\n\\n  const [showSavedFlag, setShowSavedFlag] = useState(false);\\n  const [formSubmitted, setFormSubmitted] = useState(false);\\n\\n  // Create an array of refs to handle focusing input fields on error\\n  // https://react.dev/learn/manipulating-the-dom-with-refs#how-to-manage-a-list-of-refs-using-a-ref-callback\\n  const inputRefs = useRef(new Map());\\n  function getInputRefMap() {\\n    if (!inputRefs.current) {\\n      inputRefs.current = new Map();\\n    }\\n    return inputRefs.current;\\n  }\\n\\n  const buttonRefs = useRef(new Map());\\n  function getButtonRefMap() {\\n    if (!buttonRefs.current) {\\n      buttonRefs.current = new Map();\\n    }\\n    return buttonRefs.current;\\n  }\\n\\n  useEffect(() => {\\n    if (!hasWizardStepChanged) {\\n      return;\\n    }\\n    // apply focus if the currentStep has changed\\n    // (and the wizard has been interacted with)\\n    const buttonRefsMap = getButtonRefMap();\\n    const currentStepButtonNode = buttonRefsMap.get(steps[currentStep].buttonId);\\n    currentStepButtonNode.focus();\\n  }, [hasWizardStepChanged, currentStep]);\\n\\n  const handleInputChange = (index: number, event: ChangeEvent<HTMLInputElement>) => {\\n    const value = event.target.value;\\n    const newInputValues = [...inputValues];\\n    newInputValues[index] = value;\\n    setInputValues(newInputValues);\\n  };\\n\\n  // On next button click, simulate completion on all steps\\n  const handleClickNext = () => {\\n    if (!inputValues[currentStep]) {\\n      onStepError(currentStep);\\n      // find the input element with the error in the refs map and set focus on it\\n      const inputRefsMap = getInputRefMap();\\n      const currentStepInputNode = inputRefsMap.get(steps[currentStep].inputId);\\n      currentStepInputNode.focus();\\n      return;\\n    }\\n\\n    setHasWizardStepChanged(true);\\n    setShowSavedFlag(false);\\n    onStepComplete(currentStep);\\n  };\\n\\n  // On previous button click, reset the current step status from the list of completed steps\\n  const handleClickPrevious = () => {\\n    setHasWizardStepChanged(true);\\n    setShowSavedFlag(false);\\n    onStepPrevious();\\n  };\\n\\n  const handleSave = () => {\\n    setShowSavedFlag(true);\\n  };\\n\\n  // On next button click, simulate completion on all steps\\n  const handleResetWizard = () => {\\n    setHasWizardStepChanged(true);\\n    setInputValues(DEFAULT_INPUT_VALUES);\\n    setFormSubmitted(false);\\n    onWizardReset();\\n  };\\n\\n  const handleSubmit = () => {\\n    const formValues: { [key: string]: string } = {};\\n    steps.forEach((step, i) => {\\n      if (!step.inputId) return;\\n      formValues[step.inputId] = inputValues[i];\\n    });\\n    setFormSubmitted(true);\\n  };\\n\\n  const handleExit = () => {\\n    exitDialogRef.current?.showModal();\\n  };\\n\\n  // On step button click, change the current step and reset the status of all steps after the clicked step\\n  const handleClickStep = (i: number) => {\\n    setHasWizardStepChanged(true);\\n    onStepChange(i);\\n  };\\n\\n  const renderSummaryStep = () => (\\n    <Utility vFlex vFlexCol vJustifyContent=\\\"end\\\" vFlexGrow vGap={10}>\\n      <UtilityFragment\\n        vAlignSelf=\\\"center\\\"\\n        vFlex\\n        vJustifyContent=\\\"center\\\"\\n        vPaddingVertical={44}\\n        vPaddingHorizontal={32}\\n        vGap={32}\\n      >\\n        <Surface>\\n          <Utility style={{ maxWidth: '400px', width: '100%' }}>\\n            <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n              Summary\\n            </Typography>\\n            <ol>\\n              {steps.slice(0, steps.length - 1).map((step, i) => (\\n                <UtilityFragment\\n                  key={i}\\n                  vPaddingVertical={20}\\n                  style={{\\n                    borderBlockEnd: i < steps.length - 2 ? '1px solid rgba(0,0,0,0.10)' : 'none',\\n                  }}\\n                >\\n                  <li>\\n                    <Utility vFlex vJustifyContent=\\\"between\\\">\\n                      <Typography\\n                        tag=\\\"h3\\\"\\n                        variant=\\\"body-2-bold\\\"\\n                        colorScheme=\\\"subtle\\\"\\n                      >{`${i + 1}. ${step.title}`}</Typography>\\n                      <Button\\n                        aria-label={`Edit step ${i + 1}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        buttonSize=\\\"small\\\"\\n                        onClick={() => handleClickStep(i)}\\n                      >\\n                        <VisaEditTiny rtl />\\n                      </Button>\\n                    </Utility>\\n                    <Typography>{`${step.inputLabel}: ${inputValues[i]}`}</Typography>\\n                  </li>\\n                </UtilityFragment>\\n              ))}\\n            </ol>\\n          </Utility>\\n        </Surface>\\n      </UtilityFragment>\\n      <Typography>Changes have been automatically saved.</Typography>\\n    </Utility>\\n  );\\n\\n  const renderActionButtons = () => {\\n    return (\\n      <Utility vPaddingVertical={12}>\\n        <Utility vJustifyContent=\\\"between\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n          <Utility vJustifyContent=\\\"start\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n            <Button onClick={handleSave} colorScheme=\\\"secondary\\\">\\n              Save\\n            </Button>\\n            <Button onClick={handleExit} colorScheme=\\\"tertiary\\\">\\n              Exit\\n            </Button>\\n          </Utility>\\n          <Utility vFlexGrow vJustifyContent=\\\"end\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n            <UtilityFragment vHide={currentStep === 0}>\\n              <Button onClick={handleClickPrevious} colorScheme=\\\"secondary\\\">\\n                <VisaArrowBackTiny />\\n                Back\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment vHide={currentStep === steps.length - 1}>\\n              <Button onClick={handleClickNext}>\\n                Next\\n                <VisaArrowForwardTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment vHide={currentStep !== steps.length - 1}>\\n              <Button onClick={handleSubmit}>Submit</Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Utility>\\n      </Utility>\\n    );\\n  };\\n\\n  if (formSubmitted) {\\n    return (\\n      <Utility vFlex vJustifyContent=\\\"center\\\" vGap={12}>\\n        <UtilityFragment\\n          vFlex\\n          vJustifyContent=\\\"center\\\"\\n          vPaddingVertical={44}\\n          vPaddingHorizontal={32}\\n          vGap={32}\\n          style={{ maxWidth: '676px' }}\\n        >\\n          <Surface>\\n            <Utility vFlex vFlexCol vGap={24} vAlignItems=\\\"center\\\" style={{ maxWidth: '394px', width: '394px' }}>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n                Success\\n              </Typography>\\n              <VisaSuccessHigh\\n                style={\\n                  {\\n                    '--v-icon-primary': 'var(--palette-messaging-graphics-positive)',\\n                    '--v-icon-secondary': 'var(--palette-messaging-graphics-positive)',\\n                  } as CSSProperties\\n                }\\n              />\\n              <Typography tag=\\\"p\\\" variant=\\\"body-2\\\">\\n                This is required text that describes the success message in more detail.\\n              </Typography>\\n              <Utility vAlignSelf=\\\"stretch\\\" vFlex vJustifyContent=\\\"center\\\" vGap={24}>\\n                <Link element={<button />} onClick={handleResetWizard}>\\n                  Reset wizard example\\n                </Link>\\n                <Link href=\\\"./wizard\\\">Destination label</Link>\\n              </Utility>\\n            </Utility>\\n          </Surface>\\n        </UtilityFragment>\\n      </Utility>\\n    );\\n  }\\n\\n  return (\\n    <Utility vFlex vFlexWrap vGap={12}>\\n      <nav aria-label={navRegionAriaLabel}>\\n        <Wizard vertical>\\n          {steps.map((step, i) => (\\n            <WizardStep key={`horizontal-wizard-step-${i + 1}`} aria-current={currentStep === i ? 'step' : undefined}>\\n              {isStepAvailable(i) ? (\\n                <>\\n                  <ScreenReader>\\n                    {`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                  </ScreenReader>\\n                  <Button\\n                    className={`${\\n                      currentStep === i ? 'v-typography-label-large-active' : 'v-typography-body-2'\\n                    } v-typography-color-default`}\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => handleClickStep(i)}\\n                    id={step.buttonId}\\n                    ref={node => {\\n                      const map = getButtonRefMap();\\n                      if (node) {\\n                        // store the node in the inputRefs Map\\n                        map.set(step.buttonId, node);\\n                      } else {\\n                        map.delete(step.buttonId);\\n                      }\\n                    }}\\n                  >\\n                    <Badge\\n                      aria-current={i === currentStep ? 'step' : undefined}\\n                      active={currentStep === i && !isStepError(i) && !isStepComplete(i)}\\n                      badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                      badgeVariant=\\\"icon\\\"\\n                      clear={i !== currentStep}\\n                      tag=\\\"span\\\"\\n                    >\\n                      {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : step.label}\\n                    </Badge>\\n                    <Typography>{step.title}</Typography>\\n                  </Button>\\n                </>\\n              ) : (\\n                <>\\n                  <ScreenReader>\\n                    {`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                  </ScreenReader>\\n                  <Badge\\n                    active={currentStep === i && !isStepError(i) && !isStepComplete(i)}\\n                    clear={i !== currentStep}\\n                    badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                    badgeVariant=\\\"icon\\\"\\n                    tag=\\\"span\\\"\\n                  >\\n                    {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : step.label}\\n                  </Badge>\\n                  <Typography variant={i === currentStep ? 'label-large-active' : 'body-2'}>{step.title}</Typography>\\n                </>\\n              )}\\n            </WizardStep>\\n          ))}\\n        </Wizard>\\n      </nav>\\n      <Utility vFlex vFlexCol vFlexGrow vGap={12}>\\n        {showSavedFlag && (\\n          <UtilityFragment vAlignSelf=\\\"end\\\">\\n            <Flag messageType=\\\"success\\\">\\n              <FlagIcon />\\n              <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n                <ScreenReader>success</ScreenReader>\\n                Your progress has been saved.\\n              </FlagContent>\\n              <FlagCloseButton onClick={() => setShowSavedFlag(false)} />\\n            </Flag>\\n          </UtilityFragment>\\n        )}\\n        <Utility vFlex vFlexCol vGap={12} vJustifyContent=\\\"between\\\" vFlexGrow>\\n          {steps.slice(0, steps.length - 1).map((step, i) => {\\n            return (\\n              <Utility key={i} vFlex vFlexCol vGap={4} vHide={currentStep !== i}>\\n                <Label htmlFor={step.inputId}>{`${step.inputLabel} (required)`}</Label>\\n                <InputContainer>\\n                  <Input\\n                    aria-describedby={`${step.inputId}-message`}\\n                    aria-required=\\\"true\\\"\\n                    aria-invalid={isStepError(i)}\\n                    id={step.inputId}\\n                    type=\\\"text\\\"\\n                    value={inputValues[i]}\\n                    onChange={e => handleInputChange(i, e as ChangeEvent<HTMLInputElement>)}\\n                    ref={node => {\\n                      const map = getInputRefMap();\\n                      if (node) {\\n                        // store the node in the inputRefs Map\\n                        map.set(step.inputId, node);\\n                      } else {\\n                        map.delete(step.inputId);\\n                      }\\n                    }}\\n                  />\\n                </InputContainer>\\n                {isStepError(i) && (\\n                  <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${step.inputId}-message`} role=\\\"alert\\\">\\n                    <VisaErrorTiny />\\n                    This is required text that describes the error in more detail.\\n                  </InputMessage>\\n                )}\\n              </Utility>\\n            );\\n          })}\\n          {currentStep === steps.length - 1 && renderSummaryStep()}\\n          {renderActionButtons()}\\n        </Utility>\\n      </Utility>\\n\\n      <Dialog\\n        aria-describedby={`${exitDialogId}-description`}\\n        aria-labelledby={`${exitDialogId}-title`}\\n        ref={exitDialogRef}\\n        id={exitDialogId}\\n        messageType=\\\"warning\\\"\\n        onKeyDown={e => onKeyNavigation(e, exitDialogRef.current?.open)}\\n        style={{ maxWidth: '300px' }}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${exitDialogId}-title`}>\\n            <DialogIcon />\\n            Exit form?\\n          </DialogHeader>\\n          <Typography id={`${exitDialogId}-description`}>\\n            Your progress has been automatically saved. You can continue where you left off when you return.\\n          </Typography>\\n          <Utility vFlex vFlexWrap vGap={8} vPaddingTop={16}>\\n            <Button\\n              style={{ width: '100%' }}\\n              onClick={() => {\\n                window?.location?.reload();\\n              }}\\n            >\\n              Exit\\n            </Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => exitDialogRef.current?.close()} />\\n      </Dialog>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Vertical multi-page wizard\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Single-page wizard\",\"url\":\"components/wizard/single-page-wizard\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowBackTiny,\\n  VisaArrowForwardTiny,\\n  VisaCheckmarkTiny,\\n  VisaEditTiny,\\n  VisaErrorAltTiny,\\n  VisaErrorTiny,\\n  VisaSuccessHigh,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Badge,\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  DialogIcon,\\n  Divider,\\n  Flag,\\n  FlagCloseButton,\\n  FlagContent,\\n  FlagIcon,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Link,\\n  ScreenReader,\\n  Surface,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  Wizard,\\n  WizardStep,\\n  useFocusTrap,\\n  useWizard,\\n} from '@visa/nova-react';\\nimport { CSSProperties, ChangeEvent, useEffect, useRef, useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'single-page-wizard';\\nconst navRegionAriaLabel = 'Single page wizard';\\n\\nconst steps = [\\n  {\\n    label: '1',\\n    title: 'Step 1 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-1-input`,\\n    buttonId: `${id}-step-1-button`,\\n  },\\n  {\\n    label: '2',\\n    title: 'Step 2 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-2-input`,\\n    buttonId: `${id}-step-2-button`,\\n  },\\n  {\\n    label: '3',\\n    title: 'Step 3 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-3-input`,\\n    buttonId: `${id}-step-3-button`,\\n  },\\n  {\\n    label: '4',\\n    title: 'Step 4 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-4-input`,\\n    buttonId: `${id}-step-4-button`,\\n  },\\n  {\\n    label: '5',\\n    title: 'Step 5 label',\\n  },\\n];\\n\\nconst exitDialogId = `${id}-exit-warning-dialog`;\\n\\nconst DEFAULT_INPUT_VALUES = Array(steps.length).fill('');\\n\\nexport const SinglePageWizard = () => {\\n  const {\\n    currentStep,\\n    isStepAvailable,\\n    isStepComplete,\\n    isStepError,\\n    onStepError,\\n    onStepChange,\\n    onStepComplete,\\n    onStepPrevious,\\n    onWizardReset,\\n  } = useWizard({ length: steps.length });\\n\\n  // Track whether the wizard has been interacted with in order\\n  // to control focus within a useEffect\\n  const [hasWizardStepChanged, setHasWizardStepChanged] = useState(false);\\n\\n  const { onKeyNavigation, ref: exitDialogRef } = useFocusTrap();\\n\\n  const [inputValues, setInputValues] = useState(DEFAULT_INPUT_VALUES);\\n\\n  const [showSavedFlag, setShowSavedFlag] = useState(false);\\n  const [formSubmitted, setFormSubmitted] = useState(false);\\n\\n  // Create an array of refs to handle focusing input fields on error\\n  // https://react.dev/learn/manipulating-the-dom-with-refs#how-to-manage-a-list-of-refs-using-a-ref-callback\\n  const inputRefs = useRef(new Map());\\n  function getInputRefMap() {\\n    if (!inputRefs.current) {\\n      inputRefs.current = new Map();\\n    }\\n    return inputRefs.current;\\n  }\\n\\n  const buttonRefs = useRef(new Map());\\n  function getButtonRefMap() {\\n    if (!buttonRefs.current) {\\n      buttonRefs.current = new Map();\\n    }\\n    return buttonRefs.current;\\n  }\\n\\n  useEffect(() => {\\n    if (!hasWizardStepChanged) {\\n      return;\\n    }\\n    // apply focus if the currentStep has changed\\n    // (and the wizard has been interacted with)\\n    const buttonRefsMap = getButtonRefMap();\\n    const currentStepButtonNode = buttonRefsMap.get(steps[currentStep].buttonId);\\n    currentStepButtonNode.focus();\\n  }, [hasWizardStepChanged, currentStep]);\\n\\n  const handleInputChange = (index: number, event: ChangeEvent<HTMLInputElement>) => {\\n    const value = event.target.value;\\n    const newInputValues = [...inputValues];\\n    newInputValues[index] = value;\\n    setInputValues(newInputValues);\\n  };\\n\\n  const handleClickNext = () => {\\n    if (!inputValues[currentStep]) {\\n      onStepError(currentStep);\\n      // find the input element with the error in the refs map and set focus on it\\n      const inputRefsMap = getInputRefMap();\\n      const errorStepInputNode = inputRefsMap.get(steps[currentStep].inputId);\\n      errorStepInputNode.focus();\\n      return;\\n    }\\n\\n    setHasWizardStepChanged(true);\\n    setShowSavedFlag(false);\\n    onStepComplete(currentStep);\\n  };\\n\\n  const handleClickPrevious = () => {\\n    setShowSavedFlag(false);\\n    setShowSavedFlag(false);\\n    onStepPrevious();\\n  };\\n\\n  const handleSave = () => {\\n    setShowSavedFlag(true);\\n  };\\n\\n  // On next button click, simulate completion on all steps\\n  const handleResetWizard = () => {\\n    setHasWizardStepChanged(true);\\n    setInputValues(DEFAULT_INPUT_VALUES);\\n    setFormSubmitted(false);\\n    onWizardReset();\\n  };\\n\\n  const handleSubmit = () => {\\n    const formValues: { [key: string]: string } = {};\\n    steps.forEach((step, i) => {\\n      if (!step.inputId) return;\\n      formValues[step.inputId] = inputValues[i];\\n    });\\n    setFormSubmitted(true);\\n  };\\n\\n  const handleExit = () => {\\n    exitDialogRef.current?.showModal();\\n  };\\n\\n  const handleClickStep = (i: number) => {\\n    setHasWizardStepChanged(true);\\n    onStepChange(i);\\n  };\\n\\n  const renderActionButtons = () => {\\n    return (\\n      <Utility vPaddingVertical={12} vPaddingHorizontal={40}>\\n        <Utility vFlex vFlexWrap vJustifyContent=\\\"between\\\" vColGap={24} vRowGap={16}>\\n          <Utility vJustifyContent=\\\"start\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n            <Button onClick={handleSave} colorScheme=\\\"secondary\\\">\\n              Save\\n            </Button>\\n            <Button onClick={handleExit} colorScheme=\\\"tertiary\\\">\\n              Exit\\n            </Button>\\n          </Utility>\\n          <Utility vFlexGrow vJustifyContent=\\\"end\\\" vFlex vFlexWrap vColGap={24} vRowGap={16}>\\n            <UtilityFragment vHide={currentStep === 0}>\\n              <Button onClick={handleClickPrevious} colorScheme=\\\"secondary\\\">\\n                <VisaArrowBackTiny />\\n                Back\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment vHide={currentStep === steps.length - 1}>\\n              <Button onClick={handleClickNext}>\\n                Next\\n                <VisaArrowForwardTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment vHide={currentStep !== steps.length - 1}>\\n              <Button onClick={handleSubmit}>Submit</Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </Utility>\\n      </Utility>\\n    );\\n  };\\n\\n  const renderSummaryStep = () => (\\n    <UtilityFragment vPaddingHorizontal={40}>\\n      <Surface>\\n        <Utility vFlexGrow>\\n          <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n            Summary\\n          </Typography>\\n          <ol>\\n            {steps.slice(0, steps.length - 1).map((step, i) => (\\n              <UtilityFragment\\n                key={i}\\n                vPaddingVertical={20}\\n                style={{\\n                  borderBlockEnd: i < steps.length - 2 ? '1px solid rgba(0,0,0,0.10)' : 'none',\\n                }}\\n              >\\n                <li>\\n                  <Utility vFlex vJustifyContent=\\\"between\\\">\\n                    <Typography\\n                      tag=\\\"h3\\\"\\n                      variant=\\\"body-2-bold\\\"\\n                      colorScheme=\\\"subtle\\\"\\n                    >{`${i + 1}. ${step.title}`}</Typography>\\n                    <Button\\n                      aria-label={`Edit step ${i + 1}`}\\n                      colorScheme=\\\"tertiary\\\"\\n                      iconButton\\n                      buttonSize=\\\"small\\\"\\n                      onClick={() => handleClickStep(i)}\\n                    >\\n                      <VisaEditTiny rtl />\\n                    </Button>\\n                  </Utility>\\n                  <Typography>{`${step.inputLabel}: ${inputValues[i]}`}</Typography>\\n                </li>\\n              </UtilityFragment>\\n            ))}\\n          </ol>\\n        </Utility>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n\\n  if (formSubmitted) {\\n    return (\\n      <Utility vFlex vJustifyContent=\\\"center\\\" vGap={12}>\\n        <UtilityFragment\\n          vFlex\\n          vJustifyContent=\\\"center\\\"\\n          vPaddingVertical={44}\\n          vPaddingHorizontal={32}\\n          vGap={32}\\n          style={{ maxWidth: '676px' }}\\n        >\\n          <Surface>\\n            <Utility vFlex vFlexCol vGap={24} vAlignItems=\\\"center\\\" style={{ maxWidth: '394px', width: '394px' }}>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n                Success\\n              </Typography>\\n              <VisaSuccessHigh\\n                style={\\n                  {\\n                    '--v-icon-primary': 'var(--palette-messaging-graphics-positive)',\\n                    '--v-icon-secondary': 'var(--palette-messaging-graphics-positive)',\\n                  } as CSSProperties\\n                }\\n              />\\n              <Typography tag=\\\"p\\\" variant=\\\"body-2\\\">\\n                This is required text that describes the success message in more detail.\\n              </Typography>\\n              <Utility vAlignSelf=\\\"stretch\\\" vFlex vJustifyContent=\\\"center\\\" vGap={24}>\\n                <Link element={<button />} onClick={handleResetWizard}>\\n                  Reset wizard example\\n                </Link>\\n                <Link href=\\\"./wizard\\\">Destination label</Link>\\n              </Utility>\\n            </Utility>\\n          </Surface>\\n        </UtilityFragment>\\n      </Utility>\\n    );\\n  }\\n  return (\\n    <nav aria-label={navRegionAriaLabel}>\\n      <UtilityFragment vFlex vFlexCol vGap={16}>\\n        <Wizard tag=\\\"div\\\">\\n          {showSavedFlag && (\\n            <UtilityFragment vAlignSelf=\\\"end\\\">\\n              <Flag messageType=\\\"success\\\">\\n                <FlagIcon />\\n                <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n                  <ScreenReader>success</ScreenReader>\\n                  Your progress has been saved.\\n                </FlagContent>\\n                <FlagCloseButton onClick={() => setShowSavedFlag(false)} />\\n              </Flag>\\n            </UtilityFragment>\\n          )}\\n          {steps.map((step, i) => (\\n            <WizardStep\\n              element={<Accordion tag=\\\"div\\\" />}\\n              key={`${id}-step-${i + 1}`}\\n              aria-current={currentStep === i ? 'step' : undefined}\\n            >\\n              <UtilityFragment vFlex vJustifyContent=\\\"between\\\">\\n                <AccordionHeading\\n                  aria-controls={`${id}-panel-${i}`}\\n                  aria-expanded={i === currentStep}\\n                  buttonSize=\\\"large\\\"\\n                  colorScheme=\\\"secondary\\\"\\n                  disabled={!isStepAvailable(i)}\\n                  id={`${id}-${i}`}\\n                  onClick={() => handleClickStep(i)}\\n                  ref={node => {\\n                    const map = getButtonRefMap();\\n                    if (node) {\\n                      // store the node in the inputRefs Map\\n                      map.set(step.buttonId, node);\\n                    } else {\\n                      map.delete(step.buttonId);\\n                    }\\n                  }}\\n                  tag=\\\"button\\\"\\n                >\\n                  <Utility vAlignItems=\\\"center\\\" vFlex vGap={6}>\\n                    <Badge\\n                      aria-current={i === currentStep ? 'step' : undefined}\\n                      aria-label={`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                      active={i === currentStep && !isStepError(i) && !isStepComplete(i)}\\n                      badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                      clear={i !== currentStep}\\n                      badgeVariant=\\\"icon\\\"\\n                      tag=\\\"span\\\"\\n                      style={{ '--v-badge-disabled-background': 'var(--v-badge-subtle-icon-color)' } as CSSProperties}\\n                    >\\n                      {isStepError(i) ? (\\n                        <VisaErrorAltTiny aria-hidden=\\\"false\\\" aria-label=\\\"error icon\\\" />\\n                      ) : isStepComplete(i) ? (\\n                        <VisaCheckmarkTiny aria-hidden=\\\"false\\\" aria-label=\\\"check mark icon\\\" />\\n                      ) : (\\n                        step.label\\n                      )}\\n                    </Badge>\\n                    <Typography colorScheme={i === currentStep ? 'active' : isStepAvailable(i) ? 'default' : 'subtle'}>\\n                      {step.title}\\n                    </Typography>\\n                  </Utility>\\n                  <AccordionToggleIcon accordionOpen={i === currentStep} />\\n                </AccordionHeading>\\n              </UtilityFragment>\\n              <UtilityFragment vPaddingVertical={0} vPaddingHorizontal={0}>\\n                <AccordionPanel aria-hidden={i !== currentStep} id={`${id}-panel-${i}`}>\\n                  {i !== steps.length - 1 ? (\\n                    <Utility vPaddingVertical={12} vFlex vFlexCol vJustifyContent=\\\"between\\\">\\n                      <Utility vPaddingVertical={12} vPaddingHorizontal={40} vFlex vFlexCol vGap={4}>\\n                        <Label htmlFor={step.inputId}>{`${step.inputLabel} (required)`}</Label>\\n                        <InputContainer>\\n                          <Input\\n                            aria-describedby={`${step.inputId}-message`}\\n                            aria-required=\\\"true\\\"\\n                            aria-invalid={isStepError(i)}\\n                            id={step.inputId}\\n                            type=\\\"text\\\"\\n                            value={inputValues[i]}\\n                            onChange={e => handleInputChange(i, e as ChangeEvent<HTMLInputElement>)}\\n                            ref={node => {\\n                              const map = getInputRefMap();\\n                              if (node) {\\n                                map.set(step.inputId, node);\\n                              } else {\\n                                map.delete(step.inputId);\\n                              }\\n                            }}\\n                          />\\n                        </InputContainer>\\n                        {isStepError(i) && (\\n                          <InputMessage\\n                            aria-atomic=\\\"true\\\"\\n                            aria-live=\\\"assertive\\\"\\n                            id={`${step.inputId}-message`}\\n                            role=\\\"alert\\\"\\n                          >\\n                            <VisaErrorTiny />\\n                            This is required text that describes the error in more detail.\\n                          </InputMessage>\\n                        )}\\n                      </Utility>\\n                      <UtilityFragment vMarginVertical={12}>\\n                        <Divider dividerType=\\\"decorative\\\" />\\n                      </UtilityFragment>\\n                      {renderActionButtons()}\\n                    </Utility>\\n                  ) : (\\n                    <Utility vPaddingVertical={12} vFlex vFlexCol vJustifyContent=\\\"between\\\">\\n                      {renderSummaryStep()}\\n                      <UtilityFragment vMarginVertical={12}>\\n                        <Divider dividerType=\\\"decorative\\\" />\\n                      </UtilityFragment>\\n                      {renderActionButtons()}\\n                    </Utility>\\n                  )}\\n                </AccordionPanel>\\n              </UtilityFragment>\\n            </WizardStep>\\n          ))}\\n        </Wizard>\\n      </UtilityFragment>\\n      <Dialog\\n        aria-describedby={`${exitDialogId}-description`}\\n        aria-labelledby={`${exitDialogId}-title`}\\n        ref={exitDialogRef}\\n        id={exitDialogId}\\n        messageType=\\\"warning\\\"\\n        onKeyDown={e => onKeyNavigation(e, exitDialogRef.current?.open)}\\n        style={{ maxWidth: '300px' }}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${exitDialogId}-title`}>\\n            <DialogIcon />\\n            Exit form?\\n          </DialogHeader>\\n          <Typography id={`${exitDialogId}-description`}>\\n            Your progress has been automatically saved. You can continue where you left off when you return.\\n          </Typography>\\n          <Utility vFlex vFlexWrap vGap={8} vPaddingTop={16}>\\n            <Button\\n              style={{ width: '100%' }}\\n              onClick={() => {\\n                window?.location?.reload();\\n              }}\\n            >\\n              Exit\\n            </Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => exitDialogRef.current?.close()} />\\n      </Dialog>\\n    </nav>\\n  );\\n};\\n\"},\"name\":\"Default single-page wizard\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Custom wizard\",\"url\":\"components/wizard/responsive-horizontal-wizard\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowBackTiny,\\n  VisaArrowForwardTiny,\\n  VisaCheckmarkTiny,\\n  VisaChevronRightTiny,\\n  VisaEditTiny,\\n  VisaErrorAltTiny,\\n  VisaErrorTiny,\\n  VisaSuccessHigh,\\n} from '@visa/nova-icons-react';\\nimport {\\n  Badge,\\n  Button,\\n  Flag,\\n  FlagCloseButton,\\n  FlagContent,\\n  FlagIcon,\\n  Input,\\n  InputContainer,\\n  InputMessage,\\n  Label,\\n  Link,\\n  ScreenReader,\\n  Surface,\\n  Typography,\\n  Utility,\\n  UtilityFragment,\\n  Wizard,\\n  WizardStep,\\n  useWizard,\\n} from '@visa/nova-react';\\nimport { CSSProperties, useEffect, useState, useRef, ChangeEvent } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'responsive-horizontal-wizard';\\nconst navRegionAriaLabel = 'Responsive horizontal wizard';\\n\\nconst steps = [\\n  {\\n    label: '1',\\n    title: 'Step 1 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-1-input`,\\n    buttonId: `${id}-step-1-button`,\\n  },\\n  {\\n    label: '2',\\n    title: 'Step 2 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-2-input`,\\n    buttonId: `${id}-step-2-button`,\\n  },\\n  {\\n    label: '3',\\n    title: 'Step 3 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-3-input`,\\n    buttonId: `${id}-step-3-button`,\\n  },\\n  {\\n    label: '4',\\n    title: 'Step 4 label',\\n    inputLabel: 'Label',\\n    inputId: `${id}-step-4-input`,\\n    buttonId: `${id}-step-4-button`,\\n  },\\n  {\\n    label: '5',\\n    title: 'Step 5 label',\\n  },\\n];\\n\\nconst DEFAULT_INPUT_VALUES = Array(steps.length).fill('');\\n\\nexport const ResponsiveHorizontalWizard = () => {\\n  const {\\n    currentStep,\\n    isStepAvailable,\\n    isLastStep,\\n    isStepComplete,\\n    isStepError,\\n    onStepError,\\n    onStepChange,\\n    onStepComplete,\\n    onStepPrevious,\\n    onWizardReset,\\n  } = useWizard({ length: steps.length });\\n\\n  // Track whether the wizard has been interacted with in order\\n  // to control focus within a useEffect\\n  const [hasWizardStepChanged, setHasWizardStepChanged] = useState(false);\\n\\n  const [inputValues, setInputValues] = useState(DEFAULT_INPUT_VALUES);\\n\\n  const [showSavedFlag, setShowSavedFlag] = useState(false);\\n  const [formSubmitted, setFormSubmitted] = useState(false);\\n\\n  // Create an array of refs to handle focusing input fields on error\\n  // https://react.dev/learn/manipulating-the-dom-with-refs#how-to-manage-a-list-of-refs-using-a-ref-callback\\n  const inputRefs = useRef(new Map());\\n  function getInputRefMap() {\\n    if (!inputRefs.current) {\\n      inputRefs.current = new Map();\\n    }\\n    return inputRefs.current;\\n  }\\n\\n  const buttonRefs = useRef(new Map());\\n  function getButtonRefMap() {\\n    if (!buttonRefs.current) {\\n      buttonRefs.current = new Map();\\n    }\\n    return buttonRefs.current;\\n  }\\n\\n  useEffect(() => {\\n    if (!hasWizardStepChanged) {\\n      return;\\n    }\\n    const buttonRefsMap = getButtonRefMap();\\n    const currentStepButtonNode = buttonRefsMap.get(steps[currentStep].buttonId);\\n    // the wizard steps are only buttons on the full size wizard.\\n    // if the button is available and NOT hidden then the full size\\n    // wizard is being rendered. focus the current step button.\\n    if (\\n      currentStepButtonNode &&\\n      currentStepButtonNode.offsetParent !== null &&\\n      window.getComputedStyle(currentStepButtonNode).display !== 'none'\\n    ) {\\n      currentStepButtonNode.focus();\\n      return;\\n    }\\n    // for the compact wizard, the steps are not buttons.\\n    // look for an inputRef on the current step to focus instead\\n    const inputRefsMap = getInputRefMap();\\n    const currentStepInputNode = inputRefsMap.get(steps[currentStep].inputId);\\n    if (currentStepInputNode) {\\n      currentStepInputNode.focus();\\n    }\\n  }, [hasWizardStepChanged, currentStep]);\\n\\n  const handleInputChange = (index: number, event: ChangeEvent<HTMLInputElement>) => {\\n    const value = event.target.value;\\n    const newInputValues = [...inputValues];\\n    newInputValues[index] = value;\\n    setInputValues(newInputValues);\\n  };\\n\\n  // On next button click, simulate completion on all steps\\n  const handleClickNext = () => {\\n    if (!inputValues[currentStep]) {\\n      onStepError(currentStep);\\n      // find the input element with the error in the refs map and set focus on it\\n      const inputRefsMap = getInputRefMap();\\n      const currentStepInputNode = inputRefsMap.get(steps[currentStep].inputId);\\n      currentStepInputNode.focus();\\n      return;\\n    }\\n\\n    setHasWizardStepChanged(true);\\n    setShowSavedFlag(false);\\n    onStepComplete(currentStep);\\n  };\\n\\n  // On previous button click, reset the current step status from the list of completed steps\\n  const handleClickPrevious = () => {\\n    setHasWizardStepChanged(true);\\n    setShowSavedFlag(false);\\n    onStepPrevious();\\n  };\\n\\n  const handleSave = () => {\\n    setShowSavedFlag(true);\\n  };\\n\\n  // On next button click, simulate completion on all steps\\n  const handleResetWizard = () => {\\n    setHasWizardStepChanged(true);\\n    setInputValues(DEFAULT_INPUT_VALUES);\\n    setFormSubmitted(false);\\n    onWizardReset();\\n  };\\n\\n  const handleSubmit = () => {\\n    const formValues: { [key: string]: string } = {};\\n    steps.forEach((step, i) => {\\n      if (!step.inputId) return;\\n      formValues[step.inputId] = inputValues[i];\\n    });\\n    setFormSubmitted(true);\\n  };\\n\\n  // On step button click, change the current step and reset the status of all steps after the clicked step\\n  const handleClickStep = (i: number) => {\\n    setHasWizardStepChanged(true);\\n    onStepChange(i);\\n  };\\n\\n  const renderSummaryStep = () => (\\n    <Utility vAlignSelf=\\\"center\\\" vFlex vFlexCol vGap={10} style={{ maxWidth: '610px', width: '100%' }}>\\n      <UtilityFragment vAlignSelf=\\\"center\\\" vFlex vJustifyContent=\\\"center\\\" vPadding={24} vGap={32}>\\n        <Surface>\\n          <Utility style={{ maxWidth: '400px', width: '100%' }}>\\n            <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n              Summary\\n            </Typography>\\n            <ol>\\n              {steps.slice(0, steps.length - 1).map((step, i) => (\\n                <UtilityFragment\\n                  key={i}\\n                  vPaddingVertical={20}\\n                  style={{\\n                    borderBlockEnd: i < steps.length - 2 ? '1px solid rgba(0,0,0,0.10)' : 'none',\\n                  }}\\n                >\\n                  <li>\\n                    <Utility vFlex vJustifyContent=\\\"between\\\">\\n                      <Typography\\n                        tag=\\\"h3\\\"\\n                        variant=\\\"body-2-bold\\\"\\n                        colorScheme=\\\"subtle\\\"\\n                      >{`${i + 1}. ${step.title}`}</Typography>\\n                      <Button\\n                        aria-label={`Edit step ${i + 1}`}\\n                        colorScheme=\\\"tertiary\\\"\\n                        iconButton\\n                        buttonSize=\\\"small\\\"\\n                        onClick={() => handleClickStep(i)}\\n                      >\\n                        <VisaEditTiny rtl />\\n                      </Button>\\n                    </Utility>\\n                    <Typography>{`${step.inputLabel}: ${inputValues[i]}`}</Typography>\\n                  </li>\\n                </UtilityFragment>\\n              ))}\\n            </ol>\\n          </Utility>\\n        </Surface>\\n      </UtilityFragment>\\n      <Typography>Changes have been automatically saved.</Typography>\\n      {renderActionButtons()}\\n    </Utility>\\n  );\\n\\n  const renderActionButtons = () => {\\n    return (\\n      <>\\n        <Utility vContainerHide=\\\"xs\\\">\\n          <Utility vJustifyContent=\\\"between\\\" vFlex vFlexWrap vGap={24}>\\n            <Utility>\\n              <Button onClick={handleSave} colorScheme=\\\"secondary\\\">\\n                Save\\n              </Button>\\n            </Utility>\\n            <Utility vJustifyContent=\\\"end\\\" vFlex vFlexWrap vGap={24}>\\n              <UtilityFragment vHide={currentStep === 0}>\\n                <Button onClick={handleClickPrevious} colorScheme=\\\"secondary\\\">\\n                  <VisaArrowBackTiny />\\n                  Back\\n                </Button>\\n              </UtilityFragment>\\n              <UtilityFragment vHide={currentStep === steps.length - 1}>\\n                <Button onClick={handleClickNext}>\\n                  Next\\n                  <VisaArrowForwardTiny />\\n                </Button>\\n              </UtilityFragment>\\n              <UtilityFragment vHide={currentStep !== steps.length - 1}>\\n                <Button onClick={handleSubmit}>Submit</Button>\\n              </UtilityFragment>\\n            </Utility>\\n          </Utility>\\n        </Utility>\\n        <UtilityFragment vContainerHide=\\\"desktop\\\">\\n          <Utility vFlex vFlexCol vGap={16} vContainerHide=\\\"sm\\\">\\n            <Button onClick={handleSave} colorScheme=\\\"secondary\\\">\\n              Save\\n            </Button>\\n            <Button onClick={handleClickPrevious} colorScheme=\\\"secondary\\\">\\n              <VisaArrowBackTiny />\\n              Back\\n            </Button>\\n            <UtilityFragment vHide={currentStep === steps.length - 1}>\\n              <Button onClick={handleClickNext}>\\n                Next\\n                <VisaArrowForwardTiny />\\n              </Button>\\n            </UtilityFragment>\\n            <UtilityFragment vHide={currentStep !== steps.length - 1}>\\n              <Button onClick={handleSubmit}>Submit</Button>\\n            </UtilityFragment>\\n          </Utility>\\n        </UtilityFragment>\\n      </>\\n    );\\n  };\\n\\n  if (formSubmitted) {\\n    return (\\n      <Utility vFlex vJustifyContent=\\\"center\\\" vGap={12}>\\n        <UtilityFragment\\n          vFlex\\n          vJustifyContent=\\\"center\\\"\\n          vPaddingVertical={44}\\n          vPaddingHorizontal={32}\\n          vGap={32}\\n          style={{ maxWidth: '676px' }}\\n        >\\n          <Surface>\\n            <Utility vFlex vFlexCol vGap={24} vAlignItems=\\\"center\\\" style={{ maxWidth: '394px', width: '394px' }}>\\n              <Typography tag=\\\"h2\\\" variant=\\\"headline-2\\\">\\n                Success\\n              </Typography>\\n              <VisaSuccessHigh\\n                style={\\n                  {\\n                    '--v-icon-primary': 'var(--palette-messaging-graphics-positive)',\\n                    '--v-icon-secondary': 'var(--palette-messaging-graphics-positive)',\\n                  } as CSSProperties\\n                }\\n              />\\n              <Typography tag=\\\"p\\\" variant=\\\"body-2\\\">\\n                This is required text that describes the success message in more detail.\\n              </Typography>\\n              <Utility vAlignSelf=\\\"stretch\\\" vFlex vJustifyContent=\\\"center\\\" vGap={24}>\\n                <Link element={<button />} onClick={handleResetWizard}>\\n                  Reset wizard example\\n                </Link>\\n                <Link href=\\\"./wizard\\\">Destination label</Link>\\n              </Utility>\\n            </Utility>\\n          </Surface>\\n        </UtilityFragment>\\n      </Utility>\\n    );\\n  }\\n\\n  const renderDesktopWizard = () => {\\n    return (\\n      <nav aria-label={`${navRegionAriaLabel}-desktop`}>\\n        <Wizard>\\n          {steps.map((step, i) => (\\n            <WizardStep key={`horizontal-wizard-step-${i + 1}`} aria-current={currentStep === i ? 'step' : undefined}>\\n              {isStepAvailable(i) ? (\\n                <>\\n                  <ScreenReader>\\n                    {`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                  </ScreenReader>\\n                  <Button\\n                    className={`${\\n                      currentStep === i ? 'v-typography-label-large-active' : 'v-typography-body-2'\\n                    } v-typography-color-default`}\\n                    colorScheme=\\\"tertiary\\\"\\n                    onClick={() => handleClickStep(i)}\\n                    id={step.buttonId}\\n                    ref={node => {\\n                      const map = getButtonRefMap();\\n                      if (node) {\\n                        // store the node in the inputRefs Map\\n                        map.set(step.buttonId, node);\\n                      } else {\\n                        map.delete(step.buttonId);\\n                      }\\n                    }}\\n                  >\\n                    <Badge\\n                      aria-current={i === currentStep ? 'step' : undefined}\\n                      active={i === currentStep && !isStepError(i) && !isStepComplete(i)}\\n                      badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                      badgeVariant=\\\"icon\\\"\\n                      clear={i !== currentStep}\\n                      tag=\\\"span\\\"\\n                    >\\n                      {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : step.label}\\n                    </Badge>\\n                    <Typography>{step.title}</Typography>\\n                    {i < steps.length - 1 && <VisaChevronRightTiny className=\\\"v-typography-color-subtle\\\" />}\\n                  </Button>\\n                </>\\n              ) : (\\n                <>\\n                  <ScreenReader>\\n                    {`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                  </ScreenReader>\\n                  <Badge\\n                    active={i === currentStep && !isStepError(i) && !isStepComplete(i)}\\n                    clear={i !== currentStep}\\n                    badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                    badgeVariant=\\\"icon\\\"\\n                    tag=\\\"span\\\"\\n                  >\\n                    {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : step.label}\\n                  </Badge>\\n                  <Typography variant={i === currentStep ? 'label-large-active' : 'body-2'}>{step.title}</Typography>\\n                  {!isLastStep(i) && <VisaChevronRightTiny className=\\\"v-typography-color-subtle\\\" />}\\n                </>\\n              )}\\n            </WizardStep>\\n          ))}\\n        </Wizard>\\n      </nav>\\n    );\\n  };\\n\\n  const renderMobileWizard = () => {\\n    return (\\n      <nav aria-label={`${navRegionAriaLabel}-mobile`}>\\n        <UtilityFragment vJustifyContent=\\\"center\\\">\\n          <Wizard\\n            compact\\n            style={\\n              {\\n                '--v-wizard-compact-gap': 'clamp(var(--size-scalable-12), 6vw, var(--size-scalable-72))',\\n              } as CSSProperties\\n            }\\n          >\\n            {steps.map((step, i) => (\\n              <WizardStep key={`horizontal-wizard-step-${i + 1}`} aria-current={currentStep === i ? 'step' : undefined}>\\n                <ScreenReader>\\n                  {`${isStepError(i) ? 'Error ' : isStepComplete(i) ? 'Completed ' : ''}Step ${i + 1} of ${steps.length}`}\\n                </ScreenReader>\\n                <Badge\\n                  aria-current={i === currentStep ? 'step' : undefined}\\n                  active={i === currentStep && !isStepError(i) && !isStepComplete(i)}\\n                  badgeType={isStepError(i) ? 'critical' : isStepComplete(i) ? 'stable' : 'subtle'}\\n                  badgeVariant=\\\"icon\\\"\\n                  clear={i !== currentStep}\\n                  tag=\\\"span\\\"\\n                >\\n                  {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : step.label}\\n                </Badge>\\n              </WizardStep>\\n            ))}\\n          </Wizard>\\n        </UtilityFragment>\\n      </nav>\\n    );\\n  };\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={48} style={{ containerType: 'inline-size' } as CSSProperties}>\\n      <Utility vFlex vFlexCol vGap={16}>\\n        {showSavedFlag && (\\n          <Utility vAlignSelf=\\\"end\\\">\\n            <Flag messageType=\\\"success\\\">\\n              <FlagIcon />\\n              <FlagContent className=\\\"v-pl-2 v-pb-2\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\">\\n                <ScreenReader>success</ScreenReader>\\n                Your progress has been saved.\\n              </FlagContent>\\n              <FlagCloseButton onClick={() => setShowSavedFlag(false)} />\\n            </Flag>\\n          </Utility>\\n        )}\\n        <UtilityFragment vContainerHide=\\\"mobile\\\">{renderDesktopWizard()}</UtilityFragment>\\n        <UtilityFragment vContainerHide=\\\"desktop\\\">{renderMobileWizard()}</UtilityFragment>\\n        {steps.slice(0, steps.length - 1).map((step, i) => {\\n          return (\\n            <Utility key={i} vFlex vFlexCol vGap={24} vHide={currentStep !== i}>\\n              <Utility key={i} vFlex vFlexCol vGap={4} vHide={currentStep !== i}>\\n                <Label htmlFor={step.inputId}>{`${step.inputLabel} (required)`}</Label>\\n                <InputContainer>\\n                  <Input\\n                    aria-describedby={`${step.inputId}-message`}\\n                    aria-required=\\\"true\\\"\\n                    aria-invalid={isStepError(i)}\\n                    id={step.inputId}\\n                    type=\\\"text\\\"\\n                    value={inputValues[i]}\\n                    onChange={e => handleInputChange(i, e as ChangeEvent<HTMLInputElement>)}\\n                    ref={node => {\\n                      const map = getInputRefMap();\\n                      if (node) {\\n                        // store the node in the inputRefs Map\\n                        map.set(step.inputId, node);\\n                      } else {\\n                        map.delete(step.inputId);\\n                      }\\n                    }}\\n                  />\\n                </InputContainer>\\n                {isStepError(i) && (\\n                  <InputMessage aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" id={`${step.inputId}-message`} role=\\\"alert\\\">\\n                    <VisaErrorTiny />\\n                    This is required text that describes the error in more detail.\\n                  </InputMessage>\\n                )}\\n              </Utility>\\n              {renderActionButtons()}\\n            </Utility>\\n          );\\n        })}\\n        {currentStep === steps.length - 1 && renderSummaryStep()}\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Responsive horizontal wizard\"}],\"propertySections\":[{\"order\":1,\"name\":\"Wizard\",\"selector\":\"<Wizard />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Manages and navigates multi-step processes within your application.\"},{\"order\":2,\"name\":\"WizardStep\",\"selector\":\"<WizardStep />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Represents an individual step within a multi-step wizard process.\"},{\"order\":3,\"name\":\"Badge\",\"selector\":\"<Badge />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Visual indicators communicating the status of a component.\"},{\"order\":4,\"name\":\"Button\",\"selector\":\"<Button />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Interactive elements enabling users to take actions within an interface.\"},{\"order\":5,\"name\":\"useWizard\",\"selector\":null,\"libraryId\":null,\"componentId\":null,\"type\":\"hooks\",\"description\":\"This hook is used to control the state of a wizard component.\"},{\"order\":6,\"name\":\"badge\",\"type\":\"related\",\"selector\":\"<Badge />\",\"description\":\"\"},{\"order\":7,\"name\":\"button\",\"type\":\"related\",\"selector\":\"<Button />\",\"description\":\"\"}],\"properties\":[{\"name\":\"compact\",\"section\":\"Wizard\",\"data\":{\"name\":\"compact\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"show wizard in compact\"}},{\"name\":\"ref\",\"section\":\"Wizard\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Wizard\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"ol\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"vertical\",\"section\":\"Wizard\",\"data\":{\"name\":\"vertical\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"show wizard in vertical\"}},{\"name\":\"element\",\"section\":\"WizardStep\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"ref\",\"section\":\"WizardStep\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"WizardStep\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"li\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"active\",\"section\":\"Badge\",\"data\":{\"name\":\"active\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Active style\"}},{\"name\":\"badgeType\",\"section\":\"Badge\",\"data\":{\"name\":\"badgeType\",\"type\":\"\\\"subtle\\\" , \\\"critical\\\" , \\\"neutral\\\" , \\\"stable\\\" , \\\"warning\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Type of Badge\"}},{\"name\":\"badgeVariant\",\"section\":\"Badge\",\"data\":{\"name\":\"badgeVariant\",\"type\":\"\\\"number\\\" , \\\"icon\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Variant of Badge\"}},{\"name\":\"clear\",\"section\":\"Badge\",\"data\":{\"name\":\"clear\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Clear background\"}},{\"name\":\"ref\",\"section\":\"Badge\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Badge\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag of Component\"}},{\"name\":\"alternate\",\"section\":\"Button\",\"data\":{\"name\":\"alternate\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Alternate color scheme\"}},{\"name\":\"buttonSize\",\"section\":\"Button\",\"data\":{\"name\":\"buttonSize\",\"type\":\"\\\"small\\\" , \\\"large\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Size of Button\"}},{\"name\":\"colorScheme\",\"section\":\"Button\",\"data\":{\"name\":\"colorScheme\",\"type\":\"\\\"secondary\\\" , \\\"tertiary\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"Color Scheme of Button\"}},{\"name\":\"destructive\",\"section\":\"Button\",\"data\":{\"name\":\"destructive\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Destructive Button\"}},{\"name\":\"element\",\"section\":\"Button\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"iconButton\",\"section\":\"Button\",\"data\":{\"name\":\"iconButton\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Button\"}},{\"name\":\"iconTwoColor\",\"section\":\"Button\",\"data\":{\"name\":\"iconTwoColor\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Icon Two Button\"}},{\"name\":\"ref\",\"section\":\"Button\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"stacked\",\"section\":\"Button\",\"data\":{\"name\":\"stacked\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Stacked Button\"}},{\"name\":\"subtle\",\"section\":\"Button\",\"data\":{\"name\":\"subtle\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"Subtle Button\"}},{\"name\":\"tag\",\"section\":\"Button\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"button\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}}]},{\"name\":\"use-accordion\",\"version\":\"0.0.1\",\"description\":\"This hook is used to manage the open state and keyboard navigation of accordions.\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-accordion/use-accordion-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Accordion,\\n  AccordionHeading,\\n  AccordionPanel,\\n  AccordionToggleIcon,\\n  Typography,\\n  useAccordion,\\n} from '@visa/nova-react';\\nimport { Fragment } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'use-accordion-usage';\\n\\nconst accordions = [\\n  {\\n    content: 'This is required text that describes the accordion section in more detail.',\\n    header: 'Section label 1',\\n  },\\n];\\n\\nexport const UseAccordionExample = () => {\\n  // useAccordion hook returns the following:\\n  // isIndexExpanded: function that returns a boolean value to determine if the accordion is expanded or not\\n  // onKeyNavigation: function that handles keyboard navigation, and toggles the accordion expanded state\\n  // ref: a ref object that is used to store the accordion elements\\n  // toggleIndexExpanded: function that toggles the accordion expanded state, based on the index provided\\n  const { isIndexExpanded, onKeyNavigation, ref, toggleIndexExpanded } = useAccordion();\\n\\n  return (\\n    <Accordion id={id} onKeyDown={onKeyNavigation} tag=\\\"div\\\">\\n      {accordions.map((accordion, i) => (\\n        <Fragment key={i}>\\n          <AccordionHeading\\n            aria-controls={`${id}-panel-${i}`}\\n            aria-expanded={isIndexExpanded(i)}\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"secondary\\\"\\n            id={`${id}-header-${i}`}\\n            onClick={() => toggleIndexExpanded(i)}\\n            ref={el => {\\n              ref.current[i] = el;\\n            }}\\n            tag=\\\"button\\\"\\n          >\\n            <AccordionToggleIcon accordionOpen={isIndexExpanded(i)} />\\n            {accordion.header}\\n          </AccordionHeading>\\n          <AccordionPanel aria-hidden={!isIndexExpanded(i)} id={`${id}-panel-${i}`}>\\n            <Typography tag=\\\"span\\\">{accordion.content}</Typography>\\n          </AccordionPanel>\\n        </Fragment>\\n      ))}\\n    </Accordion>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Properties\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Properties\",\"name\":\"defaultExpanded\",\"data\":{\"order\":1,\"name\":\"defaultExpanded\",\"type\":\"string , number , (string , number)[]\",\"default\":\"\",\"required\":\"\",\"description\":\"Default expanded state of the accordion\"}},{\"section\":\"Properties\",\"name\":\"ref\",\"data\":{\"order\":2,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"default\":\"\",\"required\":\"\",\"description\":\"Ref for the accordion elements\"}},{\"section\":\"Returns\",\"name\":\"isIndexExpanded\",\"data\":{\"order\":1,\"name\":\"isIndexExpanded\",\"type\":\"(index: number , string) => boolean\",\"description\":\"Function that takes in index or id of element and returns expanded boolean\"}},{\"section\":\"Returns\",\"name\":\"onKeyNavigation\",\"data\":{\"order\":2,\"name\":\"onKeyNavigation\",\"type\":\"(e: KeyboardEvent) => void\",\"description\":\"Function that handles on key down for navigation\"}},{\"section\":\"Returns\",\"name\":\"ref\",\"data\":{\"order\":3,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"description\":\"Ref object to use if ref isn't supplied in props\"}},{\"section\":\"Returns\",\"name\":\"toggleIndexExpanded\",\"data\":{\"order\":4,\"name\":\"toggleIndexExpanded\",\"type\":\"(index: number , string) => void\",\"description\":\"Callback to toggle accordion expanded state\"}},{\"section\":\"Client side only\",\"data\":\"true\"}]},{\"name\":\"use-card-number-validation\",\"version\":\"0.0.1\",\"description\":\"This hook is used to to validate card numbers. This hook uses BIN regex's, length, Luhn checksum algorithm (modulo 10 check), and brands to check card number validity. This hook is designed to be flexible and allow for custom validators.\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-card-number-validation/use-card-validation-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaChevronDownTiny } from '@visa/nova-icons-react';\\nimport {\\n  Divider,\\n  Input,\\n  InputContainer,\\n  InputControl,\\n  Label,\\n  Select,\\n  Switch,\\n  SwitchLabel,\\n  useCardNumberValidation,\\n  Typography,\\n  Utility,\\n} from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'use-card-validation-example';\\n\\nexport const UseCardValidationUsage = () => {\\n  /// These states are for demo purposes:\\n  const [cardNumberInputValueKey, setCardNumberInputValueKey] = useState('cardNumberInputValue');\\n  const [trimToMaxLength, setTrimToMaxLength] = useState(true);\\n\\n  const {\\n    binValid,\\n    brand,\\n    brandValid,\\n    cardNumberInputValue,\\n    cardNumberValidator,\\n    cleanCardNumber,\\n    formattedCardNumber,\\n    lastDigitValid,\\n    lengthValid,\\n    onCardNumberChange,\\n    valid,\\n  } = useCardNumberValidation({\\n    allowedBrands: ['VISA'],\\n    defaultCardNumberInputValue: '40000000 hello world 00000000 000000',\\n    trimToMaxLength,\\n  });\\n\\n  const valueMap: Record<string, string> = { cardNumberInputValue, cleanCardNumber, formattedCardNumber };\\n  const valueMapKeys = Object.keys(valueMap);\\n\\n  return (\\n    <Utility vFlexCol vGap={16}>\\n      <Utility vFlex vFlexCol vGap={4}>\\n        <Label htmlFor={`${id}-card-number-input`}>Visa card number</Label>\\n        <InputContainer>\\n          <Input\\n            aria-required=\\\"true\\\"\\n            autoComplete=\\\"cc-number\\\"\\n            id={`${id}-card-number-input`}\\n            onChange={event => onCardNumberChange(event.currentTarget.value)}\\n            required\\n            type=\\\"text\\\"\\n            value={valueMap[cardNumberInputValueKey]}\\n          />\\n        </InputContainer>\\n      </Utility>\\n      <code>binValid: {binValid.toString()}</code>\\n      <code>brand: {brand ?? 'undefined'}</code>\\n      <code>brandValid: {brandValid.toString()}</code>\\n      <code>cardNumberInputValue: {cardNumberInputValue}</code>\\n      <code>cardNumberValidator.brand: {cardNumberValidator?.brand ?? 'undefined'}</code>\\n      <code>cardNumberValidator.maxLength: {cardNumberValidator?.maxLength ?? 'undefined'}</code>\\n      <code>cleanCardNumber: {cleanCardNumber}</code>\\n      <code>formattedCardNumber: {formattedCardNumber}</code>\\n      <code>lastDigitValid: {lastDigitValid.toString()}</code>\\n      <code>lengthValid: {lengthValid.toString()}</code>\\n      <code>valid: {valid.toString()}</code>\\n\\n      <Divider />\\n\\n      <Typography tag=\\\"span\\\" variant=\\\"body-2-bold\\\">\\n        Demo options:\\n      </Typography>\\n      <Utility tag=\\\"fieldset\\\" vFlex vFlexCol vGap={6}>\\n        <Label htmlFor={`${id}-input-value-key-select`}>Visa card number input value</Label>\\n        <InputContainer>\\n          <Select\\n            id={`${id}-input-value-key-select`}\\n            name=\\\"select-default-example\\\"\\n            onChange={event => setCardNumberInputValueKey(event.currentTarget.value)}\\n            value={cardNumberInputValueKey}\\n          >\\n            {valueMapKeys.map(key => (\\n              <option key={key} value={key}>\\n                {key}\\n              </option>\\n            ))}\\n          </Select>\\n          <InputControl>\\n            <VisaChevronDownTiny />\\n          </InputControl>\\n        </InputContainer>\\n      </Utility>\\n      <Utility vFlex vFlexWrap vGap={10} vJustifyContent=\\\"between\\\" vMargin={8}>\\n        <SwitchLabel htmlFor={`${id}-trim-value-switch`}>\\n          <code>trimToMaxLength</code>\\n        </SwitchLabel>\\n        <Switch\\n          checked={trimToMaxLength}\\n          id={`${id}-trim-value-switch`}\\n          name={`${id}-trim-value-switch`}\\n          onChange={event => setTrimToMaxLength(event.currentTarget.checked)}\\n        />\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Properties\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Properties\",\"name\":\"allowedBrands\",\"data\":{\"order\":1,\"name\":\"allowedBrands\",\"type\":\"Brand[]\",\"default\":\"undefined\",\"required\":\"\",\"description\":\"Allowed brands array, if undefined all brands allowed. This is used for validation only and will not filter the validators.\"}},{\"section\":\"Properties\",\"name\":\"defaultCardNumberInputValue\",\"data\":{\"order\":2,\"name\":\"defaultCardNumberInputValue\",\"type\":\"string\",\"default\":\"\",\"required\":\"\",\"description\":\"Default card number input state\"}},{\"section\":\"Properties\",\"name\":\"filteredForBrands\",\"data\":{\"order\":3,\"name\":\"filteredForBrands\",\"type\":\"Brand[]\",\"default\":\"undefined\",\"required\":\"\",\"description\":\"Filtered brands array, if undefined no brands will be filtered. Only these brands will be checked for, the rest will be filtered out.\"}},{\"section\":\"Properties\",\"name\":\"trimToMaxLength\",\"data\":{\"order\":4,\"name\":\"trimToMaxLength\",\"type\":\"boolean\",\"default\":true,\"required\":\"\",\"description\":\"Remove all digits passed the matching card validator's max length\"}},{\"section\":\"Properties\",\"name\":\"validators\",\"data\":{\"order\":5,\"name\":\"validators\",\"type\":\"Record\",\"default\":\"{ ...cardValidators }\",\"required\":\"\",\"description\":\"Custom validators if our validators don't fit your use cases\"}},{\"section\":\"Returns\",\"name\":\"binValid\",\"data\":{\"order\":1,\"name\":\"binValid\",\"type\":\"boolean\",\"description\":\"BIN is valid\"}},{\"section\":\"Returns\",\"name\":\"brand\",\"data\":{\"order\":2,\"name\":\"brand\",\"type\":\"Brand , undefined\",\"description\":\"Brand if BIN is valid, undefined if BIN is not valid\"}},{\"section\":\"Returns\",\"name\":\"brandValid\",\"data\":{\"order\":3,\"name\":\"brandValid\",\"type\":\"boolean\",\"description\":\"The brand input is included in allowedBrands\"}},{\"section\":\"Returns\",\"name\":\"cardNumberInputValue\",\"data\":{\"order\":4,\"name\":\"cardNumberInputValue\",\"type\":\"string\",\"description\":\"Raw input value state sent from onCardNumberChange\"}},{\"section\":\"Returns\",\"name\":\"cardValidator\",\"data\":{\"order\":5,\"name\":\"cardValidator\",\"type\":\"CardValidator\",\"description\":\"Card validator from BIN if BIN is matched, undefined if BIN not recognized\"}},{\"section\":\"Returns\",\"name\":\"cleanCardNumber\",\"data\":{\"order\":6,\"name\":\"cleanCardNumber\",\"type\":\"string\",\"description\":\"cardNumberInputValue with non digit values filtered out, and/or max characters removed\"}},{\"section\":\"Returns\",\"name\":\"formattedCardNumber\",\"data\":{\"order\":7,\"name\":\"formattedCardNumber\",\"type\":\"string\",\"description\":\"cleanCardNumber with the proper spacing\"}},{\"section\":\"Returns\",\"name\":\"lastDigitValid\",\"data\":{\"order\":8,\"name\":\"lastDigitValid\",\"type\":\"boolean\",\"description\":\"Valid last digit based off mod 10 check\"}},{\"section\":\"Returns\",\"name\":\"lengthValid\",\"data\":{\"order\":9,\"name\":\"lengthValid\",\"type\":\"boolean\",\"description\":\"The card number length is valid, validated with cleanCardNumber\"}},{\"section\":\"Returns\",\"name\":\"onCardNumberChange\",\"data\":{\"order\":10,\"name\":\"onCardNumberChange\",\"type\":\"(cardNumberInputValue: string) => void\",\"description\":\"Setter for cardNumberInputValue state\"}},{\"section\":\"Returns\",\"name\":\"valid\",\"data\":{\"order\":11,\"name\":\"valid\",\"type\":\"boolean\",\"description\":\"The card number is fully valid based on BIN regex's, allowed brands, length, and modulo 10 check\"}},{\"section\":\"Client side only\",\"data\":\"true\"}],\"devNote\":\"This hook's validation is not comprehensive and is subject to change. VPDS does not maintain acceptance marks for all brands for legal reasons. This hook is designed to let you bring your own validators, if custom validators are required for your use case.\",\"disclaimer\":\"This hook's validation is not comprehensive and is subject to change. VPDS does not maintain acceptance marks for all brands for legal reasons. This hook is designed to let you bring your own validators, if custom validators are required for your use case.\"},{\"name\":\"use-debounce\",\"version\":\"0.0.1\",\"description\":\"Debounces expensive function, only calling the function after it's last call has waited for specified delay\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-debounce/use-button-debounce-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Typography, Utility, useDebounce } from '@visa/nova-react';\\nimport { VisaInformationTiny, VisaSuccessTiny } from \\\"@visa/nova-icons-react\\\";\\nimport { useState, CSSProperties } from 'react';\\n\\nexport const UseButtonDebounceExample = () => {\\n  const [success, setSuccess] = useState(false);\\n\\n  const onDebouncedClick = useDebounce(() => {\\n    setSuccess(true);\\n  }, 1000);\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={12}>\\n      <Typography tag=\\\"span\\\" variant=\\\"body-2-bold\\\">\\n        Rapidly click the button in sequence, then wait for one second:\\n      </Typography>\\n\\n      <Utility vFlex vFlexRow vGap={12}>\\n        <Button onClick={onDebouncedClick}>Submit debounced</Button>\\n        <Button colorScheme=\\\"secondary\\\" onClick={() => setSuccess(false)}>\\n          Reset\\n        </Button>\\n      </Utility>\\n\\n      <Typography aria-atomic=\\\"true\\\" aria-live=\\\"assertive\\\" style={{lineHeight: '16px'}}>\\n        {success ? <VisaSuccessTiny style={{ '--v-icon-primary': 'green', '--v-icon-secondary': 'var(--v-message-text-success)', marginInlineEnd: '3px', verticalAlign: 'bottom' } as CSSProperties} /> : \\n        <VisaInformationTiny style={{ '--v-icon-primary': 'var(--palette-default-text-subtle)', '--v-icon-secondary': 'var(--palette-default-text-subtle)', marginInlineEnd: '3px', verticalAlign: 'bottom' } as CSSProperties} />}\\n        {success ? 'Button click successful, many thanks' : 'Waiting for button click'}\\n      </Typography>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Arguments\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Arguments\",\"name\":\"callback\",\"data\":{\"order\":1,\"name\":\"callback\",\"type\":\"(...args: any[]) => void\",\"default\":\"\",\"required\":\"yes\",\"description\":\"Function that runs after last delay\"}},{\"section\":\"Arguments\",\"name\":\"delay\",\"data\":{\"order\":2,\"name\":\"delay\",\"type\":\"number\",\"default\":250,\"required\":\"\",\"description\":\"Length of time to wait since last call was made (milliseconds)\"}},{\"section\":\"Returns\",\"data\":\"typeof callback\"},{\"section\":\"Client side only\",\"data\":\"true\"}]},{\"name\":\"use-focus-trap\",\"version\":\"0.0.1\",\"description\":\"This hook is used to trap focus inside a container.\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-focus-trap/use-focus-trap-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  Button,\\n  Dialog,\\n  DialogCloseButton,\\n  DialogContent,\\n  DialogHeader,\\n  Typography,\\n  useFocusTrap,\\n  Utility,\\n} from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'use-focus-trap-usage';\\n\\nexport const UseFocusTrapExample = () => {\\n  const { onKeyNavigation, ref } = useFocusTrap();\\n\\n  return (\\n    <>\\n      <Button onClick={() => ref.current?.showModal()}>Open dialog</Button>\\n      <Dialog\\n        aria-describedby={`${id}-description`}\\n        aria-labelledby={`${id}-title`}\\n        id={id}\\n        ref={ref}\\n        onKeyDown={e => onKeyNavigation(e, ref.current?.open)}\\n      >\\n        <DialogContent>\\n          <DialogHeader id={`${id}-title`}>Default title</DialogHeader>\\n          <Typography id={`${id}-description`}>\\n            This is required text that describes the dialog title in more detail.\\n          </Typography>\\n          <Utility vAlignItems=\\\"center\\\" vFlex vFlexWrap vGap={8} vJustifyContent=\\\"end\\\" vPaddingTop={16}>\\n            <Button>Primary action</Button>\\n            <Button colorScheme=\\\"secondary\\\">Secondary action</Button>\\n          </Utility>\\n        </DialogContent>\\n        <DialogCloseButton onClick={() => ref.current?.close()} />\\n      </Dialog>\\n    </>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Properties\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Properties\",\"name\":\"document\",\"data\":{\"order\":1,\"name\":\"document\",\"type\":\"Document\",\"default\":\"\",\"required\":\"\",\"description\":\"Document object\"}},{\"section\":\"Properties\",\"name\":\"querySelector\",\"data\":{\"order\":2,\"name\":\"querySelector\",\"type\":\"string\",\"default\":\"a[href], button:not(disabled), textarea:not(disabled), input:not(disabled), select:not(disabled)\",\"required\":\"\",\"description\":\"DOM elements selector\"}},{\"section\":\"Properties\",\"name\":\"ref\",\"data\":{\"order\":3,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"default\":\"\",\"required\":\"\",\"description\":\"Ref object to use if ref isn't supplied in properties.\"}},{\"section\":\"Returns\",\"name\":\"onKeyNavigation\",\"data\":{\"order\":1,\"name\":\"onKeyNavigation\",\"type\":\"(e: KeyboardEvent, open?: boolean) => void\",\"description\":\"Function that handles on key down for navigation\"}},{\"section\":\"Returns\",\"name\":\"ref\",\"data\":{\"order\":2,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"description\":\"Ref object to use if ref isn't supplied in props\"}},{\"section\":\"Client side only\",\"data\":\"true\"}]},{\"name\":\"use-listbox\",\"version\":\"0.0.1\",\"description\":\"This hook is used to manage the selected state and keyboard navigation of listbox component.\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-listbox/use-listbox-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Label, Listbox, ListboxContainer, ListboxItem, useListbox } from '@visa/nova-react';\\n\\n// TIP: Customize this ID, pass it as a prop, or auto-generate it with useId() from @react\\nconst id = 'use-listbox-usage';\\n\\nconst options = [\\n  {\\n    label: 'Item A',\\n  },\\n  {\\n    disabled: true,\\n    label: 'Item B',\\n  },\\n  {\\n    label: 'Item C',\\n  },\\n  {\\n    label: 'Item D',\\n  },\\n  {\\n    label: 'Item E',\\n  },\\n];\\n\\nexport const UseListboxExample = () => {\\n  // useListbox hook returns the following:\\n  // isIndexSelected: function that returns a boolean value to determine if the index is selected or not\\n  // getTabIndex: function that returns the correct tabIndex based on the index and disabled state\\n  // onKeyNavigation: function that handles keyboard navigation, and toggles the list item selected state\\n  // ref: a ref object that is used to store the list item elements\\n  // toggleIndexSelected: function that toggles the list item selected state, based on the index provided\\n  const { isIndexSelected, getTabIndex, onKeyNavigation, ref, toggleIndexSelected } = useListbox({\\n    defaultSelected: 0,\\n  }); // Default to active on first list item\\n\\n  return (\\n    <fieldset>\\n      <Label id={`${id}-legend`} tag=\\\"legend\\\">\\n        Label (required)\\n      </Label>\\n      <ListboxContainer>\\n        <Listbox aria-labelledby={`${id}-legend`} id={id} onKeyDown={onKeyNavigation} role=\\\"listbox\\\" scroll>\\n          {options.map((option, index) => (\\n            <ListboxItem\\n              aria-disabled={option.disabled}\\n              aria-selected={isIndexSelected(index)}\\n              key={`${id}-option-${index}`}\\n              onClick={() => toggleIndexSelected(index)}\\n              ref={el => {\\n                ref.current[index] = el;\\n              }}\\n              role=\\\"option\\\"\\n              tabIndex={getTabIndex(index, option.disabled)}\\n            >\\n              <span className=\\\"v-radio v-flex-shrink-0 \\\" />\\n              {option.label}\\n            </ListboxItem>\\n          ))}\\n        </Listbox>\\n      </ListboxContainer>\\n    </fieldset>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Properties\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Properties\",\"name\":\"autoSelect\",\"data\":{\"order\":1,\"name\":\"autoSelect\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"\",\"description\":\"Auto select (not compatible with multi-select listbox)\"}},{\"section\":\"Properties\",\"name\":\"defaultSelected\",\"data\":{\"order\":2,\"name\":\"defaultSelected\",\"type\":\"number , number[]\",\"default\":-1,\"required\":\"\",\"description\":\"Default selected elements\"}},{\"section\":\"Properties\",\"name\":\"ref\",\"data\":{\"order\":3,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"default\":\"\",\"required\":\"\",\"description\":\"Ref for the tab elements\"}},{\"section\":\"Returns\",\"name\":\"isIndexSelected\",\"data\":{\"order\":1,\"name\":\"isIndexSelected\",\"type\":\"(index: number) => boolean\",\"description\":\"Function that returns true if index is selected\"}},{\"section\":\"Returns\",\"name\":\"getTabIndex\",\"data\":{\"order\":2,\"name\":\"getTabIndex\",\"type\":\"(index: number, disabled?: boolean) => -1 , 0\",\"description\":\"Get tab index for tab key navigation\"}},{\"section\":\"Returns\",\"name\":\"onKeyNavigation\",\"data\":{\"order\":3,\"name\":\"onKeyNavigation\",\"type\":\"(e: KeyboardEvent) => void\",\"description\":\"Function that handles on key down for navigation\"}},{\"section\":\"Returns\",\"name\":\"ref\",\"data\":{\"order\":4,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"description\":\"Ref object to use if ref isn't supplied in props\"}},{\"section\":\"Returns\",\"name\":\"selectedIndex\",\"data\":{\"order\":5,\"name\":\"selectedIndex\",\"type\":\"number\",\"description\":\"Index of the selected listbox\"}},{\"section\":\"Returns\",\"name\":\"selectedIndices\",\"data\":{\"order\":6,\"name\":\"selectedIndices\",\"type\":\"number[]\",\"description\":\"Indices of the selected listbox(s)\"}},{\"section\":\"Returns\",\"name\":\"toggleIndexSelected\",\"data\":{\"order\":7,\"name\":\"toggleIndexSelected\",\"type\":\"(index: number) => void\",\"description\":\"Function that toggles selected state of listbox\"}},{\"section\":\"Client side only\",\"data\":\"true\"}]},{\"name\":\"use-pagination\",\"version\":\"0.0.1\",\"description\":\"This hook is used to manage pagination events, state, and visible page blocks.\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-pagination/use-pagination-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import {\\n  VisaArrowEndTiny,\\n  VisaArrowStartTiny,\\n  VisaChevronLeftTiny,\\n  VisaChevronRightTiny,\\n  VisaOptionHorizontalTiny,\\n} from '@visa/nova-icons-react';\\nimport { Button, Pagination, PaginationOverflow, UtilityFragment, usePagination } from '@visa/nova-react';\\n\\nexport const UsePaginationExample = () => {\\n  const {\\n    isFirstPage,\\n    isLastPage,\\n    onFirstPage,\\n    onLastPage,\\n    onNextPage,\\n    onPageChange,\\n    onPreviousPage,\\n    pages,\\n    selectedPage,\\n  } = usePagination({ maxPageNumber: 10, startPage: 1, totalPages: 12 });\\n\\n  return (\\n    <nav aria-label=\\\"minimum and maximum pagination\\\" role=\\\"navigation\\\">\\n      <UtilityFragment vAlignItems=\\\"center\\\" vFlex vFlexRow vGap={4}>\\n        <Pagination>\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to first page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isFirstPage}\\n              iconButton\\n              onClick={onFirstPage}\\n            >\\n              <VisaArrowStartTiny rtl />\\n            </Button>\\n          </li>\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to previous page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isFirstPage}\\n              iconButton\\n              onClick={onPreviousPage}\\n            >\\n              <VisaChevronLeftTiny rtl />\\n            </Button>\\n          </li>\\n          {pages.map((pageNumber, index) =>\\n            pageNumber === -1 ? (\\n              <UtilityFragment key={`min-max-pagination-ellipse-${index}`} vAlignItems=\\\"center\\\" vFlex>\\n                <PaginationOverflow>\\n                  <VisaOptionHorizontalTiny />\\n                </PaginationOverflow>\\n              </UtilityFragment>\\n            ) : (\\n              <li key={`min-max-pagination-page-${pageNumber}`}>\\n                <Button\\n                  aria-current={selectedPage === pageNumber}\\n                  aria-label={`Page ${pageNumber}`}\\n                  colorScheme=\\\"tertiary\\\"\\n                  onClick={() => onPageChange(pageNumber as number)}\\n                >\\n                  {pageNumber}\\n                </Button>\\n              </li>\\n            )\\n          )}\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to next page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isLastPage}\\n              iconButton\\n              onClick={onNextPage}\\n            >\\n              <VisaChevronRightTiny rtl />\\n            </Button>\\n          </li>\\n          <li>\\n            <Button\\n              aria-label=\\\"Go to last page\\\"\\n              buttonSize=\\\"small\\\"\\n              colorScheme=\\\"tertiary\\\"\\n              disabled={isLastPage}\\n              iconButton\\n              onClick={onLastPage}\\n            >\\n              <VisaArrowEndTiny rtl />\\n            </Button>\\n          </li>\\n        </Pagination>\\n      </UtilityFragment>\\n    </nav>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Properties\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Properties\",\"name\":\"defaultSelected\",\"data\":{\"order\":1,\"name\":\"defaultSelected\",\"type\":\"number\",\"default\":1,\"required\":\"\",\"description\":\"Default selected page\"}},{\"section\":\"Properties\",\"name\":\"endBlockMaxLength\",\"data\":{\"order\":2,\"name\":\"endBlockMaxLength\",\"type\":\"number\",\"default\":3,\"required\":\"\",\"description\":\"Maximum length of pages to show on the end pagination block\"}},{\"section\":\"Properties\",\"name\":\"maxPageNumber\",\"data\":{\"order\":3,\"name\":\"maxPageNumber\",\"type\":\"number\",\"default\":\"\",\"required\":\"\",\"description\":\"Maximum page number to be shown, (default null for no maximum)\"}},{\"section\":\"Properties\",\"name\":\"middleBlockMaxLength\",\"data\":{\"order\":4,\"name\":\"middleBlockMaxLength\",\"type\":\"number\",\"default\":3,\"required\":\"\",\"description\":\"Maximum length of pages to show on the middle pagination block\"}},{\"section\":\"Properties\",\"name\":\"separator\",\"data\":{\"order\":5,\"name\":\"separator\",\"type\":\"string , number\",\"default\":-1,\"required\":\"\",\"description\":\"What to separate the pagination array up with, usually this separator will be replaced with icon or ellipses when shown in the UI\"}},{\"section\":\"Properties\",\"name\":\"startBlockMaxLength\",\"data\":{\"order\":6,\"name\":\"startBlockMaxLength\",\"type\":\"number\",\"default\":3,\"required\":\"\",\"description\":\"Maximum length of pages to show on the start pagination block\"}},{\"section\":\"Properties\",\"name\":\"startPage\",\"data\":{\"order\":7,\"name\":\"startPage\",\"type\":\"number\",\"default\":1,\"required\":\"\",\"description\":\"Start from this page\"}},{\"section\":\"Properties\",\"name\":\"totalPages\",\"data\":{\"order\":8,\"name\":\"totalPages\",\"type\":\"number\",\"default\":\"\",\"required\":\"yes\",\"description\":\"Length of total pages\"}},{\"section\":\"Returns\",\"name\":\"isFirstPage\",\"data\":{\"order\":1,\"name\":\"isFirstPage\",\"type\":\"boolean\",\"description\":\"Is first page currently selected\"}},{\"section\":\"Returns\",\"name\":\"isLastPage\",\"data\":{\"order\":2,\"name\":\"isLastPage\",\"type\":\"boolean\",\"description\":\"Is last page currently selected\"}},{\"section\":\"Returns\",\"name\":\"onFirstPage\",\"data\":{\"order\":3,\"name\":\"onFirstPage\",\"type\":\"() => void\",\"description\":\"Event to handle first page selection\"}},{\"section\":\"Returns\",\"name\":\"onLastPage\",\"data\":{\"order\":4,\"name\":\"onLastPage\",\"type\":\"() => void\",\"description\":\"Event to handle last page selection\"}},{\"section\":\"Returns\",\"name\":\"onNextPage\",\"data\":{\"order\":5,\"name\":\"onNextPage\",\"type\":\"() => void\",\"description\":\"Event to handle next page selection\"}},{\"section\":\"Returns\",\"name\":\"onPageChange\",\"data\":{\"order\":6,\"name\":\"onPageChange\",\"type\":\"(pageNumber: number) => void\",\"description\":\"Event to handle page selection\"}},{\"section\":\"Returns\",\"name\":\"onPreviousPage\",\"data\":{\"order\":7,\"name\":\"onPreviousPage\",\"type\":\"() => void\",\"description\":\"Event to handle previous page selection\"}},{\"section\":\"Returns\",\"name\":\"pages\",\"data\":{\"order\":8,\"name\":\"pages\",\"type\":\"(string , number)[]\",\"description\":\"Array of currently visible pages split by separator\"}},{\"section\":\"Returns\",\"name\":\"selectedPage\",\"data\":{\"order\":9,\"name\":\"selectedPage\",\"type\":\"number\",\"description\":\"Currently selected page\"}},{\"section\":\"Client side only\",\"data\":\"true\"}]},{\"name\":\"use-tabs\",\"version\":\"0.0.1\",\"description\":\"This hook allows us to set the <defaultSelected> value, which indicates that we are selecting that item by default.\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-tabs/use-tabs-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Button, Tab, Tabs, useTabs } from '@visa/nova-react';\\n\\nconst tabsList = ['Tab 1', 'Tab 2', 'Tab 3'];\\n\\nexport const UseTabsExample = () => {\\n  const { getTabIndex, onIndexChange, onKeyNavigation, ref: tabsRef, selectedIndex } = useTabs();\\n\\n  return (\\n    <Tabs onKeyDown={onKeyNavigation} role=\\\"tablist\\\">\\n      {tabsList.map((tab, index) => (\\n        <Tab key={`use-tabs-horizontal-tab-${index}`} role=\\\"none\\\">\\n          <Button\\n            aria-selected={index === selectedIndex}\\n            buttonSize=\\\"large\\\"\\n            colorScheme=\\\"tertiary\\\"\\n            onClick={() => onIndexChange(index)}\\n            ref={el => {\\n              tabsRef.current[index] = el;\\n            }}\\n            role=\\\"tab\\\"\\n            tabIndex={getTabIndex(index)}\\n          >\\n            {tab}\\n          </Button>\\n        </Tab>\\n      ))}\\n    </Tabs>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Properties\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Properties\",\"name\":\"arrowKeyNavigation\",\"data\":{\"order\":1,\"name\":\"arrowKeyNavigation\",\"type\":\"\\\"none\\\" , \\\"both\\\" , \\\"horizontal\\\" , \\\"vertical\\\"\",\"default\":\"\",\"required\":\"\",\"description\":\"Arrow key navigation direction, 'horizontal', 'vertical', 'both', 'none'\"}},{\"section\":\"Properties\",\"name\":\"autoSelect\",\"data\":{\"order\":2,\"name\":\"autoSelect\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"\",\"description\":\"Auto select tab on keyboard navigation\"}},{\"section\":\"Properties\",\"name\":\"defaultSelected\",\"data\":{\"order\":3,\"name\":\"defaultSelected\",\"type\":\"number\",\"default\":-1,\"required\":\"\",\"description\":\"Default selected tab\"}},{\"section\":\"Properties\",\"name\":\"ref\",\"data\":{\"order\":4,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"default\":\"\",\"required\":\"\",\"description\":\"Ref for the tab elements\"}},{\"section\":\"Returns\",\"name\":\"getTabIndex\",\"data\":{\"order\":1,\"name\":\"getTabIndex\",\"type\":\"(index: number, disabled?: boolean) => -1 , 0\",\"description\":\"Get tab index for tab key navigation\"}},{\"section\":\"Returns\",\"name\":\"onIndexChange\",\"data\":{\"order\":2,\"name\":\"onIndexChange\",\"type\":\"(index: number, disabled?: boolean) => void\",\"description\":\"Function that handles selected state of tabs\"}},{\"section\":\"Returns\",\"name\":\"onKeyNavigation\",\"data\":{\"order\":3,\"name\":\"onKeyNavigation\",\"type\":\"(e: KeyboardEvent) => void\",\"description\":\"Function that handles on key down for navigation\"}},{\"section\":\"Returns\",\"name\":\"ref\",\"data\":{\"order\":4,\"name\":\"ref\",\"type\":\"MutableRefObject\",\"description\":\"Ref object to use if ref isn't supplied in props\"}},{\"section\":\"Returns\",\"name\":\"selectedIndex\",\"data\":{\"order\":5,\"name\":\"selectedIndex\",\"type\":\"number\",\"description\":\"Index of the selected tab\"}},{\"section\":\"Client side only\",\"data\":\"true\"}]},{\"name\":\"use-wizard\",\"version\":\"0.0.1\",\"description\":\"This hook is used to control the state of a wizard component.\",\"libraryId\":null,\"category\":\"hooks\",\"exampleSections\":[{\"name\":\"Behavior and usage\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Behavior and usage\",\"url\":\"hooks/use-wizard/use-wizard-example\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Badge, Button, Utility, Wizard, WizardStep, useWizard } from '@visa/nova-react';\\nimport { VisaCheckmarkTiny, VisaChevronRightTiny, VisaErrorAltTiny } from '@visa/nova-icons-react';\\n\\nconst stepList = [\\n  { title: 'Step label 1' },\\n  { title: 'Step label 2' },\\n  { title: 'Step label 3' },\\n  { title: 'Step label 4' },\\n  { title: 'Step label 5' },\\n];\\n\\nexport const UseWizardExample = () => {\\n  const {\\n    currentStep,\\n    isLastStep,\\n    isStepAvailable,\\n    isStepComplete,\\n    isStepError,\\n    onStepChange,\\n    onStepComplete,\\n    onStepError,\\n    onStepNext,\\n    onStepPrevious,\\n    onStepReset,\\n    onWizardReset,\\n  } = useWizard({ length: stepList.length });\\n\\n  return (\\n    <Utility vFlex vFlexCol vGap={12}>\\n      <Wizard>\\n        {stepList.map((step, i) => (\\n          <WizardStep key={`horizontal-wizard-step-${i + 1}`}>\\n            {isStepAvailable(i) ? (\\n              <Button\\n                className={`${\\n                  currentStep === i ? 'v-typography-label-large-active' : 'v-typography-body-2'\\n                } v-typography-color-default v-gap-8`}\\n                colorScheme=\\\"tertiary\\\"\\n                onClick={() => {\\n                  onStepChange(i);\\n                }}\\n              >\\n                <Badge\\n                  active={currentStep === i && !isStepError(i) && !isStepComplete(i)}\\n                  badgeType={(isStepError(i) && 'critical') || (isStepComplete(i) && 'stable') || 'subtle'}\\n                  badgeVariant=\\\"icon\\\"\\n                  clear={!(currentStep === i)}\\n                  tag=\\\"span\\\"\\n                >\\n                  {isStepError(i) ? <VisaErrorAltTiny /> : isStepComplete(i) ? <VisaCheckmarkTiny /> : i + 1}\\n                </Badge>\\n                {step.title}\\n                {i < stepList.length - 1 && <VisaChevronRightTiny className=\\\"v-typography-color-subtle\\\" />}\\n              </Button>\\n            ) : (\\n              <>\\n                <Badge badgeType=\\\"subtle\\\" badgeVariant=\\\"icon\\\" clear tag=\\\"span\\\">\\n                  {i + 1}\\n                </Badge>\\n                {step.title}\\n                {!isLastStep(i) && <VisaChevronRightTiny className=\\\"v-typography-color-subtle\\\" />}\\n              </>\\n            )}\\n          </WizardStep>\\n        ))}\\n      </Wizard>\\n      <Utility vFlex vFlexWrap vGap={24} vJustifyContent=\\\"between\\\">\\n        <Button onClick={onStepPrevious}>Previous step</Button>\\n        <Utility vFlex vFlexWrap vGap={12}>\\n          <Button colorScheme=\\\"secondary\\\" onClick={() => onStepComplete(currentStep, { autoProgress: false })}>\\n            Set step successful\\n          </Button>\\n          <Button colorScheme=\\\"secondary\\\" onClick={() => onStepError(currentStep, { autoProgress: false })}>\\n            Set step error\\n          </Button>\\n          <Button colorScheme=\\\"secondary\\\" onClick={() => onStepReset(currentStep)}>\\n            Reset current step\\n          </Button>\\n        </Utility>\\n        <Button onClick={onStepNext}>Next step</Button>\\n      </Utility>\\n      <Utility vFlex vFlexWrap vGap={16} vJustifyContent=\\\"center\\\">\\n        <Button destructive onClick={() => onWizardReset()}>\\n          Reset wizard\\n        </Button>\\n        <Button colorScheme=\\\"secondary\\\" destructive onClick={() => onWizardReset(1)}>\\n          Reset to step 2\\n        </Button>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"\"}],\"apiSections\":[{\"name\":\"Properties\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":1},{\"name\":\"Returns\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":2},{\"name\":\"Client side only\",\"libraryId\":null,\"componentId\":null,\"description\":\"\",\"order\":3}],\"apiSectionValues\":[{\"section\":\"Properties\",\"name\":\"autoProgressComplete\",\"data\":{\"order\":1,\"name\":\"autoProgressComplete\",\"type\":\"boolean\",\"default\":true,\"required\":\"\",\"description\":\"Auto progress on complete\"}},{\"section\":\"Properties\",\"name\":\"autoProgressError\",\"data\":{\"order\":2,\"name\":\"autoProgressError\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"\",\"description\":\"Auto progress on error\"}},{\"section\":\"Properties\",\"name\":\"defaultActiveStep\",\"data\":{\"order\":3,\"name\":\"defaultActiveStep\",\"type\":\"number\",\"default\":\"\",\"required\":\"\",\"description\":\"Current step\"}},{\"section\":\"Properties\",\"name\":\"isExclusiveSets\",\"data\":{\"order\":4,\"name\":\"isExclusiveSets\",\"type\":\"boolean\",\"default\":true,\"required\":\"\",\"description\":\"If the complete and error sets are mutually exclusive\"}},{\"section\":\"Properties\",\"name\":\"length\",\"data\":{\"order\":5,\"name\":\"length\",\"type\":\"number\",\"default\":\"\",\"required\":\"yes\",\"description\":\"Length of steps\"}},{\"section\":\"Returns\",\"name\":\"currentStep\",\"data\":{\"order\":1,\"name\":\"currentStep\",\"type\":\"number\",\"description\":\"Return the current step of the wizard\"}},{\"section\":\"Returns\",\"name\":\"hasError\",\"data\":{\"order\":2,\"name\":\"hasError\",\"type\":\"() => boolean\",\"description\":\"Check if the wizard has any error step\"}},{\"section\":\"Returns\",\"name\":\"isStepAvailable\",\"data\":{\"order\":3,\"name\":\"isStepAvailable\",\"type\":\"(index: number) => boolean\",\"description\":\"Check if the step is available\"}},{\"section\":\"Returns\",\"name\":\"isFirstStep\",\"data\":{\"order\":4,\"name\":\"isFirstStep\",\"type\":\"(index: number) => boolean\",\"description\":\"Check if the current step is the first step\"}},{\"section\":\"Returns\",\"name\":\"isLastStep\",\"data\":{\"order\":5,\"name\":\"isLastStep\",\"type\":\"(index: number) => boolean\",\"description\":\"Check if the current step is the last step\"}},{\"section\":\"Returns\",\"name\":\"isStepComplete\",\"data\":{\"order\":6,\"name\":\"isStepComplete\",\"type\":\"(index: number) => boolean\",\"description\":\"Check if the step is completed\"}},{\"section\":\"Returns\",\"name\":\"isStepError\",\"data\":{\"order\":7,\"name\":\"isStepError\",\"type\":\"(index: number) => boolean\",\"description\":\"Check if the step has an error\"}},{\"section\":\"Returns\",\"name\":\"isWizardComplete\",\"data\":{\"order\":8,\"name\":\"isWizardComplete\",\"type\":\"() => boolean\",\"description\":\"Check if the wizard is complete\"}},{\"section\":\"Returns\",\"name\":\"maxStep\",\"data\":{\"order\":9,\"name\":\"maxStep\",\"type\":\"number\",\"description\":\"Return the maximum available step of the wizard\"}},{\"section\":\"Returns\",\"name\":\"onStepChange\",\"data\":{\"order\":10,\"name\":\"onStepChange\",\"type\":\"(index: number) => void\",\"description\":\"Move to the selected step\"}},{\"section\":\"Returns\",\"name\":\"onStepNext\",\"data\":{\"order\":11,\"name\":\"onStepNext\",\"type\":\"() => void\",\"description\":\"Move to the next step\"}},{\"section\":\"Returns\",\"name\":\"onStepPrevious\",\"data\":{\"order\":12,\"name\":\"onStepPrevious\",\"type\":\"() => void\",\"description\":\"Move to the previous step\"}},{\"section\":\"Returns\",\"name\":\"onStepComplete\",\"data\":{\"order\":13,\"name\":\"onStepComplete\",\"type\":\"(index: number, { autoProgress = true }) => void\",\"description\":\"Mark the step as complete\"}},{\"section\":\"Returns\",\"name\":\"onStepError\",\"data\":{\"order\":14,\"name\":\"onStepError\",\"type\":\"(index: number, { autoProgress = false }) => void\",\"description\":\"Mark the step as error\"}},{\"section\":\"Returns\",\"name\":\"onStepReset\",\"data\":{\"order\":15,\"name\":\"onStepReset\",\"type\":\"(index: number) => void\",\"description\":\"Reset the step status\"}},{\"section\":\"Returns\",\"name\":\"onWizardReset\",\"data\":{\"order\":16,\"name\":\"onWizardReset\",\"type\":\"(index: number) => void\",\"description\":\"Reset the wizard status (to the desired step)\"}},{\"section\":\"Client side only\",\"data\":\"true\"}]},{\"name\":\"accessibility\",\"version\":\"0.0.1\",\"description\":\"Text elements to only be read by screen readers but not shown visually on screen.\",\"libraryId\":null,\"category\":\"utilities\",\"exampleSections\":[{\"name\":\"Accessibility utilities\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Accessibility utilities\",\"url\":\"utilities/accessibility/screen-reader-only-text\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { ScreenReader } from '@visa/nova-react';\\n\\nexport const ScreenReaderOnlyText = () => {\\n  return <ScreenReader>This text is not shown on the screen, but it's accessible to a screen reader.</ScreenReader>;\\n};\\n\"},\"name\":\"Screen reader-only text\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Accessibility utilities\",\"url\":\"utilities/accessibility/screen-reader-caption-within-table\",\"tags\":[\"docs\"],\"snippets\":{\"tsx\":\"import { ScreenReader, Table, TableWrapper, Tbody, Td, Tr } from '@visa/nova-react';\\n\\nexport const ScreenReaderCaptionWithinTable = () => {\\n  return (\\n    <TableWrapper>\\n      <Table keyValue border>\\n        <ScreenReader tag=\\\"caption\\\">Table with lined key-value pairs.</ScreenReader>\\n        <Tbody>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 1\\n            </th>\\n            <Td>Value 1</Td>\\n          </Tr>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 2\\n            </th>\\n            <Td>Value 2</Td>\\n          </Tr>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 3\\n            </th>\\n            <Td>Value 3</Td>\\n          </Tr>\\n          <Tr>\\n            <th className=\\\"v-td\\\" scope=\\\"row\\\">\\n              Key 4\\n            </th>\\n            <Td>Value 4</Td>\\n          </Tr>\\n        </Tbody>\\n      </Table>\\n    </TableWrapper>\\n  );\\n};\\n\"},\"name\":\"Screen reader-only table caption\"}],\"propertySections\":[{\"order\":1,\"name\":\"Utility\",\"selector\":\"<Utility />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component used to create a div, by default, with the correct Nova utility style classes applied.\"},{\"order\":2,\"name\":\"UtilityFragment\",\"selector\":\"<UtilityFragment />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Wraps around a component and add Nova utility classes to its direct child without adding extra elements to the DOM.\"},{\"order\":3,\"name\":\"ScreenReader\",\"selector\":\"<Accessibility />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Text elements to only be read by screen readers but not shown visually on screen.\"}],\"properties\":[{\"name\":\"element\",\"section\":\"Utility\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"ref\",\"section\":\"Utility\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Utility\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"vAlignContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"Utility\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"Utility\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"Utility\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"children\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"children\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"true\",\"description\":\"Child element that the styles are applies to. Only allows for single child element.\"}},{\"name\":\"vAlignContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"ref\",\"section\":\"ScreenReader\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"ScreenReader\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"span\",\"required\":\"false\",\"description\":\"Tag of Component\"}}]},{\"name\":\"breakpoints\",\"version\":\"0.0.1\",\"description\":\"\",\"libraryId\":null,\"category\":\"utilities\",\"exampleSections\":[{\"name\":\"Breakpoints\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Breakpoints\",\"url\":\"utilities/breakpoints/hide-breakpoints\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar, Button, Utility } from '@visa/nova-react';\\nimport { useState } from 'react';\\n\\nexport const HideBreakpoints = () => {\\n  const [hide, setHide] = useState(false);\\n  const [toggled, setToggled] = useState(false);\\n\\n  const toggleHide = (changedHide: boolean) => {\\n    setHide(changedHide);\\n    setToggled(true);\\n  };\\n\\n  return (\\n    <Utility vFlex vGap={24} vAlignItems=\\\"center\\\">\\n      <Utility element={<Avatar>AM</Avatar>} vHide={hide} />\\n      <span role=\\\"alert\\\" aria-live=\\\"polite\\\" className='v-sr'>\\n          {toggled && (\\n            hide? 'The avatar is hidden' : 'The avatar is visible'\\n          )}\\n        </span>\\n      <Button colorScheme=\\\"secondary\\\" onClick={() => toggleHide(!hide)}>\\n        {hide ? 'Show' : 'Hide'}\\n      </Button>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Hide\"},{\"description\":\"In order for container queries to work, the container element must have a display value other than\u00a0inline\u00a0(e.g.,\u00a0block,\u00a0flex,\u00a0grid). Note that Angular elements (non-native HTML elements such as\u00a0<app-root>) render\u00a0display: inline\u00a0by default, so you may need to change that in some cases.\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Breakpoints\",\"url\":\"utilities/breakpoints/container-hide-breakpoints\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaDeviceLaptopLow, VisaDeviceMobileLow } from '@visa/nova-icons-react';\\nimport { Avatar, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const ContainerHideBreakpoints = () => {\\n  return (\\n    <Utility vFlex vFlexRow vGap={8} vFlexWrap style={{ containerType: 'inline-size' }}>\\n      <UtilityFragment vContainerHide=\\\"xs\\\">\\n        <Avatar style={{ '--v-avatar-background': '#e50000' } as CSSProperties}>XS</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"sm\\\">\\n        <Avatar style={{ '--v-avatar-background': 'orange', '--v-avatar-foreground': 'black' } as CSSProperties}>\\n          SM\\n        </Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"md\\\">\\n        <Avatar style={{ '--v-avatar-background': 'yellow', '--v-avatar-foreground': 'black' } as CSSProperties}>\\n          MD\\n        </Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"lg\\\">\\n        <Avatar style={{ '--v-avatar-background': 'green' } as CSSProperties}>LG</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"xl\\\">\\n        <Avatar style={{ '--v-avatar-background': 'blue' } as CSSProperties}>XL</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"xxl\\\">\\n        <Avatar style={{ '--v-avatar-background': 'purple' } as CSSProperties}>XXL</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"mobile\\\">\\n        <Avatar>\\n          <VisaDeviceLaptopLow aria-label=\\\"Showing a laptop to indicate we're on a desktop-sized container\\\" />\\n        </Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vContainerHide=\\\"desktop\\\">\\n        <Avatar>\\n          <VisaDeviceMobileLow aria-label=\\\"Showing a mobile device to indicate we're on a mobile-sized container\\\" />\\n        </Avatar>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Hide with breakpoint-matching container query\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Breakpoints\",\"url\":\"utilities/breakpoints/media-hide-breakpoints\",\"tags\":[],\"snippets\":{\"tsx\":\"import { VisaDeviceLaptopLow, VisaDeviceMobileLow } from '@visa/nova-icons-react';\\nimport { Avatar, Utility, UtilityFragment } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MediaHideBreakpoints = () => {\\n  return (\\n    <Utility vFlex vFlexRow vGap={8} vFlexWrap style={{ containerType: 'inline-size' }}>\\n      <UtilityFragment vMediaHide=\\\"xs\\\">\\n        <Avatar style={{ '--v-avatar-background': '#e50000' } as CSSProperties}>XS</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vMediaHide=\\\"sm\\\">\\n        <Avatar style={{ '--v-avatar-background': 'orange', '--v-avatar-foreground': 'black' } as CSSProperties}>\\n          SM\\n        </Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vMediaHide=\\\"md\\\">\\n        <Avatar style={{ '--v-avatar-background': 'yellow', '--v-avatar-foreground': 'black' } as CSSProperties}>\\n          MD\\n        </Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vMediaHide=\\\"lg\\\">\\n        <Avatar style={{ '--v-avatar-background': 'green' } as CSSProperties}>LG</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vMediaHide=\\\"xl\\\">\\n        <Avatar style={{ '--v-avatar-background': 'blue' } as CSSProperties}>XL</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vMediaHide=\\\"xxl\\\">\\n        <Avatar style={{ '--v-avatar-background': 'purple' } as CSSProperties}>XXL</Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vMediaHide=\\\"mobile\\\">\\n        <Avatar>\\n          <VisaDeviceLaptopLow aria-label=\\\"Showing a laptop to indicate we're on a desktop-sized media\\\" />\\n        </Avatar>\\n      </UtilityFragment>\\n      <UtilityFragment vMediaHide=\\\"desktop\\\">\\n        <Avatar>\\n          <VisaDeviceMobileLow aria-label=\\\"Showing a mobile device to indicate we're on a mobile-sized media\\\" />\\n        </Avatar>\\n      </UtilityFragment>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Hide with breakpoint-matching media query\"}],\"propertySections\":[{\"order\":1,\"name\":\"Utility\",\"selector\":\"<Utility />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component used to create a div, by default, with the correct Nova utility style classes applied.\"},{\"order\":2,\"name\":\"UtilityFragment\",\"selector\":\"<UtilityFragment />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Wraps around a component and add Nova utility classes to its direct child without adding extra elements to the DOM.\"}],\"properties\":[{\"name\":\"element\",\"section\":\"Utility\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"ref\",\"section\":\"Utility\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Utility\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"vAlignContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"Utility\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"Utility\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"Utility\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"children\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"children\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"true\",\"description\":\"Child element that the styles are applies to. Only allows for single child element.\"}},{\"name\":\"vAlignContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}}]},{\"name\":\"elevation\",\"version\":\"0.0.1\",\"description\":\"\",\"libraryId\":null,\"category\":\"utilities\",\"exampleSections\":[{\"name\":\"Elevations\",\"description\":\"\",\"order\":1}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Elevations\",\"url\":\"utilities/elevation/all-elevation\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\n// These styles simply makes a square box for demo purposes.\\nconst defaultBoxStyle: CSSProperties = {\\n  alignItems: 'center',\\n  background: 'var(--palette-default-surface-2, #FFF)',\\n  display: 'flex',\\n  blockSize: 100,\\n  inlineSize: 100,\\n  justifyContent: 'center',\\n};\\n\\nexport const AllElevation = () => {\\n  return (\\n    <Utility vFlex vFlexWrap vGap={12}>\\n      <Utility vElevation=\\\"none\\\" style={defaultBoxStyle}>\\n        None\\n      </Utility>\\n      <Utility vElevation=\\\"inset\\\" style={defaultBoxStyle}>\\n        Inset\\n      </Utility>\\n      <Utility vElevation=\\\"xsmall\\\" style={defaultBoxStyle}>\\n        XSmall\\n      </Utility>\\n      <Utility vElevation=\\\"small\\\" style={defaultBoxStyle}>\\n        Small\\n      </Utility>\\n      <Utility vElevation=\\\"medium\\\" style={defaultBoxStyle}>\\n        Medium\\n      </Utility>\\n      <Utility vElevation=\\\"large\\\" style={defaultBoxStyle}>\\n        Large\\n      </Utility>\\n      <Utility vElevation=\\\"xlarge\\\" style={defaultBoxStyle}>\\n        XLarge\\n      </Utility>\\n      <Utility vElevation=\\\"xxlarge\\\" style={defaultBoxStyle}>\\n        XXLarge\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"All elevations\"}],\"propertySections\":[{\"order\":1,\"name\":\"Utility\",\"selector\":\"<Utility />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component used to create a div, by default, with the correct Nova utility style classes applied.\"},{\"order\":2,\"name\":\"UtilityFragment\",\"selector\":\"<UtilityFragment />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Wraps around a component and add Nova utility classes to its direct child without adding extra elements to the DOM.\"}],\"properties\":[{\"name\":\"element\",\"section\":\"Utility\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"ref\",\"section\":\"Utility\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Utility\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"vAlignContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"Utility\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"Utility\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"Utility\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"children\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"children\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"true\",\"description\":\"Child element that the styles are applies to. Only allows for single child element.\"}},{\"name\":\"vAlignContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}}]},{\"name\":\"flex\",\"version\":\"0.0.1\",\"description\":\"\",\"libraryId\":null,\"category\":\"utilities\",\"exampleSections\":[{\"name\":\"Flex displays\",\"description\":\"\",\"order\":1},{\"name\":\"Flex column\",\"description\":\"\",\"order\":2},{\"name\":\"Flex row\",\"description\":\"\",\"order\":3},{\"name\":\"Flex wrap\",\"description\":\"\",\"order\":4},{\"name\":\"Flex grow\",\"description\":\"\",\"order\":5},{\"name\":\"Flex shrink\",\"description\":\"\",\"order\":6},{\"name\":\"Flex align\",\"description\":\"\",\"order\":7},{\"name\":\"Flex justify\",\"description\":\"\",\"order\":8}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex displays\",\"url\":\"utilities/flex/default-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Utility } from '@visa/nova-react';\\n\\nexport const DefaultFlex = () => {\\n  return (\\n    <Utility vFlex vGap={4}>\\n      This is a flex container\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Flex default\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex displays\",\"url\":\"utilities/flex/inline-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Utility } from '@visa/nova-react';\\n\\nexport const InlineFlex = () => {\\n  return (\\n    <Utility vFlexInline vGap={4}>\\n      This is an inline flex container\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Inline flex\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex column\",\"url\":\"utilities/flex/column-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Utility } from '@visa/nova-react';\\n\\nexport const ColumnFlex = () => {\\n  return (\\n    <Utility vFlex vFlexCol vGap={4}>\\n      <span>first</span>\\n      <span>second</span>\\n      <span>third</span>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Flex column\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex column\",\"url\":\"utilities/flex/column-reverse-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Utility } from '@visa/nova-react';\\n\\nexport const ColumnReverseFlex = () => {\\n  return (\\n    <Utility vFlex vFlexColReverse vGap={4}>\\n      <span>first</span>\\n      <span>second</span>\\n      <span>third</span>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Flex column reverse\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex row\",\"url\":\"utilities/flex/row-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Utility } from '@visa/nova-react';\\n\\nexport const RowFlex = () => {\\n  return (\\n    <Utility vFlex vFlexRow vGap={4}>\\n      <span>first</span>\\n      <span>second</span>\\n      <span>third</span>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Flex row\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex row\",\"url\":\"utilities/flex/row-reverse-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Utility } from '@visa/nova-react';\\n\\nexport const RowReverseFlex = () => {\\n  return (\\n    <Utility vFlex vFlexRowReverse vGap={4}>\\n      <span>first</span>\\n      <span>second</span>\\n      <span>third</span>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Flex row reverse\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex wrap\",\"url\":\"utilities/flex/wrap-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const WrapFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexWrap vGap={4}>\\n      <Surface style={{ '--v-surface-border-size': '2px', '--v-surface-inline-size': '150px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n        <span>fifth</span>\\n        <span>sixth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex wrap\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex wrap\",\"url\":\"utilities/flex/wrap-reverse-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const WrapReverseFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrapReverse vGap={4}>\\n      <Surface style={{ '--v-surface-border-size': '2px', '--v-surface-inline-size': '150px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n        <span>fifth</span>\\n        <span>sixth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex wrap reverse\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex wrap\",\"url\":\"utilities/flex/no-wrap-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const NoWrapFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexNoWrap vGap={4}>\\n      <Surface style={{ '--v-surface-border-size': '2px', '--v-surface-inline-size': '150px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n        <span>fifth</span>\\n        <span>sixth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex no wrap\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex grow\",\"url\":\"utilities/flex/grow-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, Utility, UtilityFragment } from '@visa/nova-react';\\n\\nexport const GrowFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <Utility tag=\\\"span\\\" vFlexGrow>\\n          first\\n        </Utility>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex grow\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex grow\",\"url\":\"utilities/flex/grow-zero-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, Utility, UtilityFragment } from '@visa/nova-react';\\n\\nexport const GrowZeroFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <Utility tag=\\\"span\\\" vFlexGrow0>\\n          first\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexGrow>\\n          second\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexGrow>\\n          third\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexGrow>\\n          fourth\\n        </Utility>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex grow 0\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex shrink\",\"url\":\"utilities/flex/shrink-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, Utility, UtilityFragment } from '@visa/nova-react';\\n\\nexport const ShrinkFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <Utility tag=\\\"span\\\" vFlexShrink>\\n          first\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexGrow>\\n          second\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexGrow>\\n          third\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexGrow>\\n          fourth\\n        </Utility>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex shrink\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex shrink\",\"url\":\"utilities/flex/shrink-zero-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, Utility, UtilityFragment } from '@visa/nova-react';\\n\\nexport const ShrinkZeroFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vGap={4} vFlexWrap>\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <Utility tag=\\\"span\\\" vFlexShrink0>\\n          first\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexShrink>\\n          second\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexShrink>\\n          third\\n        </Utility>\\n        <Utility tag=\\\"span\\\" vFlexShrink>\\n          fourth\\n        </Utility>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex shrink 0\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-content-center-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignContentCenterFlex = () => {\\n  return (\\n    <UtilityFragment vAlignContent=\\\"center\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align content center\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-content-start-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignContentStartFlex = () => {\\n  return (\\n    <UtilityFragment vAlignContent=\\\"start\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align content start\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-content-end-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignContentEndFlex = () => {\\n  return (\\n    <UtilityFragment vAlignContent=\\\"end\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align content end\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-content-between-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignContentBetweenFlex = () => {\\n  return (\\n    <UtilityFragment vAlignContent=\\\"between\\\" vFlex vFlexRow vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align content space between\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-content-around-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignContentAroundFlex = () => {\\n  return (\\n    <UtilityFragment vAlignContent=\\\"around\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align content around\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-content-evenly-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignContentEvenlyFlex = () => {\\n  return (\\n    <UtilityFragment vAlignContent=\\\"evenly\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align content evenly\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-items-start-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignItemsStartFlex = () => {\\n  return (\\n    <UtilityFragment vAlignItems=\\\"start\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align items start\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-items-end-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignItemsEndFlex = () => {\\n  return (\\n    <UtilityFragment vAlignItems=\\\"end\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align items end\"},{\"description\":\"\",\"order\":22,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-items-center-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignItemsCenterFlex = () => {\\n  return (\\n    <UtilityFragment vAlignItems=\\\"center\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align items center\"},{\"description\":\"\",\"order\":23,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-items-baseline-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignItemsBaselineFlex = () => {\\n  return (\\n    <UtilityFragment vAlignItems=\\\"baseline\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align items baseline\"},{\"description\":\"\",\"order\":24,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-items-stretch-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignItemsStretchFlex = () => {\\n  return (\\n    <UtilityFragment vAlignItems=\\\"stretch\\\" vFlex vFlexRow vFlexWrap vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align items stretch\"},{\"description\":\"\",\"order\":25,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-self-start-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignSelfStartFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <UtilityFragment vFlex vAlignSelf=\\\"start\\\">\\n          <Surface surfaceType=\\\"alternate\\\">self</Surface>\\n        </UtilityFragment>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align self start\"},{\"description\":\"\",\"order\":26,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-self-end-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignSelfEndFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <UtilityFragment vFlex vAlignSelf=\\\"end\\\">\\n          <Surface surfaceType=\\\"alternate\\\">self</Surface>\\n        </UtilityFragment>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align self end\"},{\"description\":\"\",\"order\":27,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-self-auto-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignSelfAutoFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <UtilityFragment vAlignSelf=\\\"auto\\\" vFlex>\\n          <Surface surfaceType=\\\"alternate\\\">self</Surface>\\n        </UtilityFragment>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align self auto\"},{\"description\":\"\",\"order\":28,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-self-center-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignSelfCenterFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <UtilityFragment vAlignSelf=\\\"center\\\" vFlex>\\n          <Surface surfaceType=\\\"alternate\\\">self</Surface>\\n        </UtilityFragment>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align self center\"},{\"description\":\"\",\"order\":29,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex align\",\"url\":\"utilities/flex/align-self-stretch-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const AlignSelfStretchFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vGap={4}>\\n      <Surface style={{ blockSize: '80px', '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <UtilityFragment vFlex vAlignSelf=\\\"stretch\\\">\\n          <Surface surfaceType=\\\"alternate\\\">self</Surface>\\n        </UtilityFragment>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex align self stretch\"},{\"description\":\"\",\"order\":30,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex justify\",\"url\":\"utilities/flex/justify-content-start-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const JustifyContentStartFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4} vJustifyContent=\\\"start\\\">\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex justify content start\"},{\"description\":\"\",\"order\":31,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex justify\",\"url\":\"utilities/flex/justify-content-end-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const JustifyContentEndFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4} vJustifyContent=\\\"end\\\">\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex justify content end\"},{\"description\":\"\",\"order\":32,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex justify\",\"url\":\"utilities/flex/justify-content-center-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const JustifyContentCenterFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4} vJustifyContent=\\\"center\\\">\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex justify content center\"},{\"description\":\"\",\"order\":33,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex justify\",\"url\":\"utilities/flex/justify-content-between-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const JustifyContentBetweenFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vJustifyContent=\\\"between\\\" vGap={4}>\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex justify content space between\"},{\"description\":\"\",\"order\":34,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex justify\",\"url\":\"utilities/flex/justify-content-around-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const JustifyContentAroundFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4} vJustifyContent=\\\"around\\\">\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex justify content around\"},{\"description\":\"\",\"order\":35,\"libraryId\":null,\"componentId\":null,\"section\":\"Flex justify\",\"url\":\"utilities/flex/justify-content-evenly-flex\",\"tags\":[],\"snippets\":{\"tsx\":\"import { CSSProperties } from 'react';\\n\\nimport { Surface, UtilityFragment } from '@visa/nova-react';\\n\\nexport const JustifyContentEvenlyFlex = () => {\\n  return (\\n    <UtilityFragment vFlex vFlexRow vFlexWrap vGap={4} vJustifyContent=\\\"evenly\\\">\\n      <Surface style={{ '--v-surface-border-size': '2px' } as CSSProperties}>\\n        <span>first</span>\\n        <span>second</span>\\n        <span>third</span>\\n        <span>fourth</span>\\n      </Surface>\\n    </UtilityFragment>\\n  );\\n};\\n\"},\"name\":\"Flex justify content evenly\"}],\"propertySections\":[{\"order\":1,\"name\":\"Utility\",\"selector\":\"<Utility />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component used to create a div, by default, with the correct Nova utility style classes applied.\"},{\"order\":2,\"name\":\"UtilityFragment\",\"selector\":\"<UtilityFragment />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Wraps around a component and add Nova utility classes to its direct child without adding extra elements to the DOM.\"}],\"properties\":[{\"name\":\"element\",\"section\":\"Utility\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"ref\",\"section\":\"Utility\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Utility\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"vAlignContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"Utility\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"Utility\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"Utility\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"children\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"children\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"true\",\"description\":\"Child element that the styles are applies to. Only allows for single child element.\"}},{\"name\":\"vAlignContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}}]},{\"name\":\"spacing\",\"version\":\"0.0.1\",\"description\":\"\",\"libraryId\":null,\"category\":\"utilities\",\"exampleSections\":[{\"name\":\"Gap\",\"description\":\"\",\"order\":1},{\"name\":\"Margin\",\"description\":\"\",\"order\":2},{\"name\":\"Padding\",\"description\":\"\",\"order\":3}],\"examples\":[{\"description\":\"\",\"order\":1,\"libraryId\":null,\"componentId\":null,\"section\":\"Gap\",\"url\":\"utilities/spacing/gap-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const GapSpacing = () => {\\n  const itemCardStyles = { boxShadow: 'var(--elevation-medium)', inlineSize: 'auto' } as CSSProperties;\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex vColGap={20} style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n          Item 1\\n        </Utility>\\n        <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n          Item 2\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default gap\"},{\"description\":\"\",\"order\":2,\"libraryId\":null,\"componentId\":null,\"section\":\"Gap\",\"url\":\"utilities/spacing/gap-column-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const GapColumnSpacing = () => {\\n  const itemCardStyles = { boxShadow: 'var(--elevation-medium)', inlineSize: 'auto' } as CSSProperties;\\n\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex vColGap={20} style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility vFlex vFlexCol>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 1\\n          </Utility>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 3\\n          </Utility>\\n        </Utility>\\n        <Utility vFlex vFlexCol>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 2\\n          </Utility>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 4\\n          </Utility>\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Column gap\"},{\"description\":\"\",\"order\":3,\"libraryId\":null,\"componentId\":null,\"section\":\"Gap\",\"url\":\"utilities/spacing/gap-row-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const GapRowSpacing = () => {\\n  const itemCardStyles = { boxShadow: 'var(--elevation-medium)', inlineSize: 'auto' } as CSSProperties;\\n\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vFlex\\n        vFlexCol\\n        vRowGap={20}\\n        style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}\\n      >\\n        <Utility vFlex>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 1\\n          </Utility>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 2\\n          </Utility>\\n        </Utility>\\n        <Utility vFlex>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 3\\n          </Utility>\\n          <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n            Item 4\\n          </Utility>\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Row gap\"},{\"description\":\"\",\"order\":4,\"libraryId\":null,\"componentId\":null,\"section\":\"Gap\",\"url\":\"utilities/spacing/gap-normal-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const GapNormalSpacing = () => {\\n  const itemCardStyles = { boxShadow: 'var(--elevation-medium)', inlineSize: 'auto' } as CSSProperties;\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex vGap=\\\"normal\\\" style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n          Item 1\\n        </Utility>\\n        <Utility vFlexGrow vPadding={16} style={itemCardStyles} element={<Surface />}>\\n          Item 2\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Gap normal\"},{\"description\":\"\",\"order\":5,\"libraryId\":null,\"componentId\":null,\"section\":\"Gap\",\"url\":\"utilities/spacing/gap-inherit-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Avatar, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nconst userCardStyles = {\\n  background: 'var(--palette-default-surface-1)',\\n  padding: 'var(--size-scalable-6) var(--size-scalable-80) var(--size-scalable-6) var(--size-scalable-20)',\\n} as CSSProperties;\\n\\nconst users = [\\n  {\\n    name: 'Alex Miller',\\n    initials: 'AM',\\n  },\\n  {\\n    name: 'Rosetta Jones',\\n    initials: 'RJ',\\n  },\\n  {\\n    name: 'Stacey Taylor',\\n    initials: 'ST',\\n  },\\n];\\n\\nexport const GapInheritSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        element={<ul />}\\n        vFlex\\n        vFlexCol\\n        vGap={8}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n          } as CSSProperties\\n        }\\n      >\\n        {users.map(u => (\\n          <Utility key={u.name} element={<li />} vFlex vAlignItems=\\\"center\\\" vGap=\\\"inherit\\\" style={userCardStyles}>\\n            <Avatar small aria-label={u.name}>\\n              {u.initials}\\n            </Avatar>\\n            {u.name}\\n          </Utility>\\n        ))}\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Gap inherit\"},{\"description\":\"\",\"order\":6,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/default-margin\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const DefaultMargin = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          element={<Surface />}\\n          vMargin={20}\\n          style={{ border: '1px dashed var(--palette-default-active-subtle)' } as CSSProperties}\\n        >\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Default margin\"},{\"description\":\"\",\"order\":7,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/margin-top-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MarginTopSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          element={<Surface />}\\n          vMarginTop={20}\\n          vPadding={16}\\n          style={{ border: '1px dashed var(--palette-default-active-subtle)' } as CSSProperties}\\n        >\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Margin top\"},{\"description\":\"\",\"order\":8,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/margin-bottom-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MarginBottomSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          element={<Surface />}\\n          vMarginBottom={20}\\n          vPadding={16}\\n          style={{ border: '1px dashed var(--palette-default-active-subtle)' } as CSSProperties}\\n        >\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Margin bottom\"},{\"description\":\"\",\"order\":9,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/margin-left-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MarginLeftSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          element={<Surface />}\\n          vMarginLeft={20}\\n          vPadding={16}\\n          style={{ border: '1px dashed var(--palette-default-active-subtle)' } as CSSProperties}\\n        >\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Margin left\"},{\"description\":\"\",\"order\":10,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/margin-right-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MarginRightSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          element={<Surface />}\\n          vMarginRight={20}\\n          vPadding={16}\\n          style={{ border: '1px dashed var(--palette-default-active-subtle)' } as CSSProperties}\\n        >\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Margin right\"},{\"description\":\"\",\"order\":11,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/margin-horizontal-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MarginHorizontalSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          element={<Surface />}\\n          vMarginHorizontal={20}\\n          vPadding={16}\\n          style={{ border: '1px dashed var(--palette-default-active-subtle)' } as CSSProperties}\\n        >\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Margin horizontal\"},{\"description\":\"\",\"order\":12,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/margin-vertical-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MarginVerticalSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility vFlex style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          element={<Surface />}\\n          vMarginVertical={20}\\n          vPadding={16}\\n          style={{ border: '1px dashed var(--palette-default-active-subtle)' } as CSSProperties}\\n        >\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Margin vertical\"},{\"description\":\"\",\"order\":13,\"libraryId\":null,\"componentId\":null,\"section\":\"Margin\",\"url\":\"utilities/spacing/margin-inherit-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const MarginInheritSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility style={{ background: 'var(--palette-default-surface-highlight)' } as CSSProperties}>\\n        <Utility\\n          vMarginTop={20}\\n          style={\\n            {\\n              textAlign: 'center',\\n              border: '1px dashed var(--palette-default-active-subtle)',\\n              background: 'var(--palette-messaging-highlight-positive)',\\n            } as CSSProperties\\n          }\\n        >\\n          <p>Parent with top margin</p>\\n          <Utility\\n            element={<Surface />}\\n            vMarginTop=\\\"inherit\\\"\\n            vPadding={16}\\n            style={\\n              {\\n                border: '1px dashed var(--palette-default-active-subtle)',\\n                borderInline: 0,\\n                borderBlockEnd: 0,\\n              } as CSSProperties\\n            }\\n          >\\n            Child inherits top margin from parent\\n          </Utility>\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Margin inherit\"},{\"description\":\"\",\"order\":14,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/default-padding\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const DefaultPadding = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPadding={20}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Utility vPadding={16} element={<Surface />} vPaddingBottom={20}>\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Padding\"},{\"description\":\"\",\"order\":15,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/padding-top-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const PaddingTopSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPaddingTop={20}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Utility vPadding={16} element={<Surface />} vPaddingBottom={20}>\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\\n\\n\"},\"name\":\"Padding top\"},{\"description\":\"\",\"order\":16,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/padding-bottom-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const PaddingBottomSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPaddingBottom={20}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Utility vPadding={16} element={<Surface />} vPaddingBottom={20}>\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Padding bottom\"},{\"description\":\"\",\"order\":17,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/padding-left-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const PaddingLeftSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPaddingLeft={20}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Utility vPadding={16} element={<Surface />} vPaddingBottom={20}>\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Padding left\"},{\"description\":\"\",\"order\":18,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/padding-right-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const PaddingRightSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPaddingRight={20}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Utility vPadding={16} element={<Surface />} vPaddingBottom={20}>\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\\n\"},\"name\":\"Padding right\"},{\"description\":\"\",\"order\":19,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/padding-horizontal-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const PaddingHorizontalSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPaddingHorizontal={20}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Utility vPadding={16} element={<Surface />} vPaddingBottom={20}>\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Padding horizontal\"},{\"description\":\"\",\"order\":20,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/padding-vertical-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const PaddingVerticalSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPaddingVertical={20}\\n        style={\\n          {\\n            background: 'var(--palette-default-surface-highlight)',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n          } as CSSProperties\\n        }\\n      >\\n        <Utility vPadding={16} element={<Surface />} vPaddingBottom={20}>\\n          Content Area\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Padding vertical\"},{\"description\":\"\",\"order\":21,\"libraryId\":null,\"componentId\":null,\"section\":\"Padding\",\"url\":\"utilities/spacing/padding-inherit-spacing\",\"tags\":[],\"snippets\":{\"tsx\":\"import { Surface, Utility } from '@visa/nova-react';\\nimport { CSSProperties } from 'react';\\n\\nexport const PaddingInheritSpacing = () => {\\n  return (\\n    <Utility vFlex>\\n      <Utility\\n        vPaddingTop={24}\\n        style={\\n          {\\n            textAlign: 'center',\\n            border: '1px dashed var(--palette-default-active-subtle)',\\n            background: 'var(--palette-default-surface-highlight)',\\n          } as CSSProperties\\n        }\\n      >\\n        <p>Parent with top padding</p>\\n        <Utility\\n          element={<Surface />}\\n          vPaddingTop=\\\"inherit\\\"\\n          vPadding={16}\\n          style={\\n            {\\n              border: '1px dashed var(--palette-default-active-subtle)',\\n              borderInline: 0,\\n              borderBlockEnd: 0,\\n            } as CSSProperties\\n          }\\n        >\\n          Child inherits top margin from parent\\n        </Utility>\\n      </Utility>\\n    </Utility>\\n  );\\n};\\n\"},\"name\":\"Padding inherit\"}],\"propertySections\":[{\"order\":1,\"name\":\"Utility\",\"selector\":\"<Utility />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Component used to create a div, by default, with the correct Nova utility style classes applied.\"},{\"order\":2,\"name\":\"UtilityFragment\",\"selector\":\"<UtilityFragment />\",\"libraryId\":null,\"componentId\":null,\"type\":\"components\",\"description\":\"Wraps around a component and add Nova utility classes to its direct child without adding extra elements to the DOM.\"}],\"properties\":[{\"name\":\"element\",\"section\":\"Utility\",\"data\":{\"name\":\"element\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"false\",\"description\":\"Cloned Element (not compatible with tag property)\"}},{\"name\":\"ref\",\"section\":\"Utility\",\"data\":{\"name\":\"ref\",\"type\":\"ForwardedRef\",\"default\":\"\",\"required\":\"false\",\"description\":\"This is a useRef\"}},{\"name\":\"tag\",\"section\":\"Utility\",\"data\":{\"name\":\"tag\",\"type\":\"ElementType\",\"default\":\"div\",\"required\":\"false\",\"description\":\"Tag (not compatible with element property)\"}},{\"name\":\"vAlignContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"Utility\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"Utility\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"Utility\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"Utility\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"Utility\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"Utility\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"Utility\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"Utility\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"Utility\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"children\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"children\",\"type\":\"ReactElement\",\"default\":\"\",\"required\":\"true\",\"description\":\"Child element that the styles are applies to. Only allows for single child element.\"}},{\"name\":\"vAlignContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignItems\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignItems\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"baseline\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vAlignSelf\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vAlignSelf\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"auto\\\" , \\\"end\\\" , \\\"stretch\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vColGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vColGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vContainerHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vContainerHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vElevation\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vElevation\",\"type\":\"\\\"small\\\" , \\\"none\\\" , \\\"large\\\" , \\\"inset\\\" , \\\"medium\\\" , \\\"xlarge\\\" , \\\"xxlarge\\\" , \\\"xsmall\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlex\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlex\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexCol\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexCol\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexColReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexColReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexGrow0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexGrow0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexInline\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexInline\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexNoWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexNoWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRow\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRow\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexRowReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexRowReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexShrink0\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexShrink0\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrap\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vFlexWrapReverse\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vFlexWrapReverse\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vGap\",\"type\":\"Omit\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vHide\",\"type\":\"boolean\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vJustifyContent\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vJustifyContent\",\"type\":\"\\\"center\\\" , \\\"start\\\" , \\\"end\\\" , \\\"around\\\" , \\\"between\\\" , \\\"evenly\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMargin\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMargin\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMarginVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMarginVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vMediaHide\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vMediaHide\",\"type\":\"\\\"xs\\\" , \\\"sm\\\" , \\\"md\\\" , \\\"lg\\\" , \\\"xl\\\" , \\\"xxl\\\" , \\\"desktop\\\" , \\\"mobile\\\"\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPadding\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPadding\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingBottom\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingBottom\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingHorizontal\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingHorizontal\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingLeft\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingLeft\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingRight\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingRight\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingTop\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingTop\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vPaddingVertical\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vPaddingVertical\",\"type\":\"0 , \\\"inherit\\\" , \\\"auto\\\" , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}},{\"name\":\"vRowGap\",\"section\":\"UtilityFragment\",\"data\":{\"name\":\"vRowGap\",\"type\":\"0 , 1 , 48 , 4 , 10 , 3 , 2 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47\",\"default\":\"\",\"required\":\"false\",\"description\":\"\"}}]}]}"
}